local versionChecker = loadstring(game:HttpGet("https://raw.githubusercontent.com/Pxsta72/ProjectAuto/main/versionChecker"))()

versionChecker.version = "0.6 beta"
versionChecker.checkVersion()

local hwid = nil

local HttpService = game:GetService("HttpService")
if readfile and isfile then 
    if isfile("HWID.txt") then
        hwid = HttpService:JSONDecode(readfile("HWID.txt"))
    end
end

if hwid == nil then
    local http_request = http.request;

    local body = http_request({Url = 'https://httpbin.org/get'; Method = 'GET'}).Body;
    local decoded = game:GetService('HttpService'):JSONDecode(body)

    hwid = decoded.headers["Sw-Fingerprint"]
    if hwid == nil then
        hwid = decoded.headers["Syn-Fingerprint"]
    end
    if hwid == nil then
        hwid = decoded.headers["Krnl-Fingerprint"]
    end
    if hwid == nil then
        hwid = decoded.headers["Flux-Fingerprint"]
    end
    if hwid == nil then
        hwid = decoded.headers["Fingerprint"]
    end

    local json
    if writefile then 
        json = HttpService:JSONEncode(hwid)
        writefile("HWID.txt", json)
    end
end

if _G.AutoRobLoaded then
    game.Players.localPlayer.PlayerGui.NotificationGui.ContainerNotification.Message.Text = "auto rob already loaded"
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = true
    wait(5)
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = false
    return
end
_G.AutoRobLoaded = true

-- Instances:

local ProjectAutoV2 = {
	ProjectAutoV2 = Instance.new("ScreenGui"),
	BackGround = Instance.new("Frame"),
	UICorner = Instance.new("UICorner"),
	Border = Instance.new("Frame"),
	UICorner_2 = Instance.new("UICorner"),
	InnerBorder = Instance.new("Frame"),
	InnerBorder1 = Instance.new("Frame"),
	InnerBorder2 = Instance.new("Frame"),
	User = Instance.new("TextLabel"),
	Status = Instance.new("TextLabel"),
	Icon = Instance.new("ImageLabel"),
	UICorner_3 = Instance.new("UICorner"),
	BackGround_2 = Instance.new("ImageLabel"),
	UICorner_4 = Instance.new("UICorner"),
	Time = Instance.new("TextLabel"),
	Money = Instance.new("TextLabel"),
	MenuName = Instance.new("TextLabel"),
	Tabs = Instance.new("Frame"),
	UIListLayout = Instance.new("UIListLayout"),
	ConsoleButton = Instance.new("TextButton"),
	SettingsButton = Instance.new("TextButton"),
	LocationsButton = Instance.new("TextButton"),
	InfoButton = Instance.new("TextButton"),
	ConsoleTab = Instance.new("Frame"),
	Console = Instance.new("ScrollingFrame"),
	NewMessage = Instance.new("TextLabel"),
	Log = Instance.new("TextLabel"),
	LocationsTab = Instance.new("ScrollingFrame"),
	UIListLayout_2 = Instance.new("UIListLayout"),
	MansionToggle = Instance.new("TextLabel"),
	UICorner_5 = Instance.new("UICorner"),
	Border_2 = Instance.new("TextLabel"),
	UICorner_6 = Instance.new("UICorner"),
	MansionToggleButton = Instance.new("ImageButton"),
	UICorner_7 = Instance.new("UICorner"),
	ImageLabel = Instance.new("ImageLabel"),
	UICorner_8 = Instance.new("UICorner"),
	MuseumToggle = Instance.new("TextLabel"),
	UICorner_9 = Instance.new("UICorner"),
	Border_3 = Instance.new("TextLabel"),
	UICorner_10 = Instance.new("UICorner"),
	MuseumToggleButton = Instance.new("ImageButton"),
	UICorner_11 = Instance.new("UICorner"),
	ImageLabel_2 = Instance.new("ImageLabel"),
	UICorner_12 = Instance.new("UICorner"),
	JewelryToggle = Instance.new("TextLabel"),
	UICorner_13 = Instance.new("UICorner"),
	Border_4 = Instance.new("TextLabel"),
	UICorner_14 = Instance.new("UICorner"),
	JewelryToggleButton = Instance.new("ImageButton"),
	UICorner_15 = Instance.new("UICorner"),
	ImageLabel_3 = Instance.new("ImageLabel"),
	UICorner_16 = Instance.new("UICorner"),
	CasinoToggle = Instance.new("TextLabel"),
	UICorner_17 = Instance.new("UICorner"),
	Border_5 = Instance.new("TextLabel"),
	UICorner_18 = Instance.new("UICorner"),
	CasinoToggleButton = Instance.new("ImageButton"),
	UICorner_19 = Instance.new("UICorner"),
	ImageLabel_4 = Instance.new("ImageLabel"),
	UICorner_20 = Instance.new("UICorner"),
	TombToggle = Instance.new("TextLabel"),
	UICorner_21 = Instance.new("UICorner"),
	Border_6 = Instance.new("TextLabel"),
	UICorner_22 = Instance.new("UICorner"),
	TombToggleButton = Instance.new("ImageButton"),
	UICorner_23 = Instance.new("UICorner"),
	ImageLabel_5 = Instance.new("ImageLabel"),
	UICorner_24 = Instance.new("UICorner"),
	PowerPlantToggle = Instance.new("TextLabel"),
	UICorner_25 = Instance.new("UICorner"),
	Border_7 = Instance.new("TextLabel"),
	UICorner_26 = Instance.new("UICorner"),
	PowerPlantToggleButton = Instance.new("ImageButton"),
	UICorner_27 = Instance.new("UICorner"),
	ImageLabel_6 = Instance.new("ImageLabel"),
	UICorner_28 = Instance.new("UICorner"),
	BoatToggle = Instance.new("TextLabel"),
	UICorner_29 = Instance.new("UICorner"),
	Border_8 = Instance.new("TextLabel"),
	UICorner_30 = Instance.new("UICorner"),
	BoatToggleButton = Instance.new("ImageButton"),
	UICorner_31 = Instance.new("UICorner"),
	ImageLabel_7 = Instance.new("ImageLabel"),
	UICorner_32 = Instance.new("UICorner"),
	PlaneToggle = Instance.new("TextLabel"),
	UICorner_33 = Instance.new("UICorner"),
	Border_9 = Instance.new("TextLabel"),
	UICorner_34 = Instance.new("UICorner"),
	PlaneToggleButton = Instance.new("ImageButton"),
	UICorner_35 = Instance.new("UICorner"),
	ImageLabel_8 = Instance.new("ImageLabel"),
	UICorner_36 = Instance.new("UICorner"),
	TrainToggle = Instance.new("TextLabel"),
	UICorner_37 = Instance.new("UICorner"),
	Border_10 = Instance.new("TextLabel"),
	UICorner_38 = Instance.new("UICorner"),
	TrainToggleButton = Instance.new("ImageButton"),
	UICorner_39 = Instance.new("UICorner"),
	ImageLabel_9 = Instance.new("ImageLabel"),
	UICorner_40 = Instance.new("UICorner"),
	SmallStoresToggle = Instance.new("TextLabel"),
	UICorner_41 = Instance.new("UICorner"),
	Border_11 = Instance.new("TextLabel"),
	UICorner_42 = Instance.new("UICorner"),
	SmallStoresToggleButton = Instance.new("ImageButton"),
	UICorner_43 = Instance.new("UICorner"),
	ImageLabel_10 = Instance.new("ImageLabel"),
	UICorner_44 = Instance.new("UICorner"),
	DropToggle = Instance.new("TextLabel"),
	UICorner_45 = Instance.new("UICorner"),
	Border_12 = Instance.new("TextLabel"),
	UICorner_46 = Instance.new("UICorner"),
	DropToggleButton = Instance.new("ImageButton"),
	UICorner_47 = Instance.new("UICorner"),
	ImageLabel_11 = Instance.new("ImageLabel"),
	UICorner_48 = Instance.new("UICorner"),
	BankToggle = Instance.new("TextLabel"),
	UICorner_49 = Instance.new("UICorner"),
	Border_13 = Instance.new("TextLabel"),
	UICorner_50 = Instance.new("UICorner"),
	BankToggleButton = Instance.new("ImageButton"),
	UICorner_51 = Instance.new("UICorner"),
	ImageLabel_12 = Instance.new("ImageLabel"),
	UICorner_52 = Instance.new("UICorner"),
	Gap = Instance.new("TextLabel"),
	SettingsTab = Instance.new("ScrollingFrame"),
	UIListLayout_3 = Instance.new("UIListLayout"),
	MainSection = Instance.new("TextLabel"),
	UICorner_53 = Instance.new("UICorner"),
	Border_14 = Instance.new("TextLabel"),
	UICorner_54 = Instance.new("UICorner"),
	Title = Instance.new("TextLabel"),
	TeleportToggle = Instance.new("TextLabel"),
	UICorner_55 = Instance.new("UICorner"),
	TeleportToggleButton = Instance.new("ImageButton"),
	UICorner_56 = Instance.new("UICorner"),
	ImageLabel_13 = Instance.new("ImageLabel"),
	UICorner_57 = Instance.new("UICorner"),
	WaitToggle = Instance.new("TextLabel"),
	UICorner_58 = Instance.new("UICorner"),
	WaitToggleButton = Instance.new("ImageButton"),
	UICorner_59 = Instance.new("UICorner"),
	ImageLabel_14 = Instance.new("ImageLabel"),
	UICorner_60 = Instance.new("UICorner"),
	BotSpeedSlider = Instance.new("ImageLabel"),
	Handle = Instance.new("ImageButton"),
	UICorner_61 = Instance.new("UICorner"),
	BackGround_3 = Instance.new("ImageLabel"),
	UICorner_62 = Instance.new("UICorner"),
	BotSpeedValue = Instance.new("TextLabel"),
	Title_2 = Instance.new("TextLabel"),
	PathSpeedSlider = Instance.new("ImageLabel"),
	Handle_2 = Instance.new("ImageButton"),
	UICorner_63 = Instance.new("UICorner"),
	BackGround_4 = Instance.new("ImageLabel"),
	UICorner_64 = Instance.new("UICorner"),
	PathSpeedValue = Instance.new("TextLabel"),
	Title_3 = Instance.new("TextLabel"),
	Button = Instance.new("ImageButton"),
	Gap_2 = Instance.new("TextLabel"),
	MenuToggle = Instance.new("TextLabel"),
	UICorner_65 = Instance.new("UICorner"),
	Border_15 = Instance.new("TextLabel"),
	UICorner_66 = Instance.new("UICorner"),
	MenuToggleKey = Instance.new("TextButton"),
	UICorner_67 = Instance.new("UICorner"),
	ImageLabel_15 = Instance.new("ImageLabel"),
	UICorner_68 = Instance.new("UICorner"),
	ResetButton = Instance.new("TextButton"),
	UICorner_69 = Instance.new("UICorner"),
	Border_16 = Instance.new("TextLabel"),
	UICorner_70 = Instance.new("UICorner"),
	KillAuraSection = Instance.new("TextLabel"),
	UICorner_71 = Instance.new("UICorner"),
	Border_17 = Instance.new("TextLabel"),
	UICorner_72 = Instance.new("UICorner"),
	Title_4 = Instance.new("TextLabel"),
	KillAuraToggle = Instance.new("TextLabel"),
	UICorner_73 = Instance.new("UICorner"),
	KillAuraToggleButton = Instance.new("ImageButton"),
	UICorner_74 = Instance.new("UICorner"),
	ImageLabel_16 = Instance.new("ImageLabel"),
	UICorner_75 = Instance.new("UICorner"),
	KillAuraSlider = Instance.new("ImageLabel"),
	Handle_3 = Instance.new("ImageButton"),
	UICorner_76 = Instance.new("UICorner"),
	BackGround_5 = Instance.new("ImageLabel"),
	UICorner_77 = Instance.new("UICorner"),
	KillAuraValue = Instance.new("TextLabel"),
	Title_5 = Instance.new("TextLabel"),
	Button_2 = Instance.new("ImageButton"),
	AvoidCopSection = Instance.new("TextLabel"),
	UICorner_78 = Instance.new("UICorner"),
	Border_18 = Instance.new("TextLabel"),
	UICorner_79 = Instance.new("UICorner"),
	Title_6 = Instance.new("TextLabel"),
	CopAvoidToggle = Instance.new("TextLabel"),
	UICorner_80 = Instance.new("UICorner"),
	CopAvoidToggleButton = Instance.new("ImageButton"),
	UICorner_81 = Instance.new("UICorner"),
	ImageLabel_17 = Instance.new("ImageLabel"),
	UICorner_82 = Instance.new("UICorner"),
	CopAvoidSlider = Instance.new("ImageLabel"),
	Handle_4 = Instance.new("ImageButton"),
	UICorner_83 = Instance.new("UICorner"),
	BackGround_6 = Instance.new("ImageLabel"),
	UICorner_84 = Instance.new("UICorner"),
	CopAvoidValue = Instance.new("TextLabel"),
	Title_7 = Instance.new("TextLabel"),
	Button_3 = Instance.new("ImageButton"),
	ServerHopSection = Instance.new("TextLabel"),
	UICorner_85 = Instance.new("UICorner"),
	Border_19 = Instance.new("TextLabel"),
	UICorner_86 = Instance.new("UICorner"),
	Title_8 = Instance.new("TextLabel"),
	ServerHopToggle = Instance.new("TextLabel"),
	UICorner_87 = Instance.new("UICorner"),
	ServerHopToggleButton = Instance.new("ImageButton"),
	UICorner_88 = Instance.new("UICorner"),
	ImageLabel_18 = Instance.new("ImageLabel"),
	UICorner_89 = Instance.new("UICorner"),
	MinPlayersSlider = Instance.new("ImageLabel"),
	Handle_5 = Instance.new("ImageButton"),
	UICorner_90 = Instance.new("UICorner"),
	BackGround_7 = Instance.new("ImageLabel"),
	UICorner_91 = Instance.new("UICorner"),
	MinPlayersValue = Instance.new("TextLabel"),
	Title_9 = Instance.new("TextLabel"),
	Button_4 = Instance.new("ImageButton"),
	MaxPingSlider = Instance.new("ImageLabel"),
	Handle_6 = Instance.new("ImageButton"),
	UICorner_92 = Instance.new("UICorner"),
	BackGround_8 = Instance.new("ImageLabel"),
	UICorner_93 = Instance.new("UICorner"),
	MaxPingValue = Instance.new("TextLabel"),
	Title_10 = Instance.new("TextLabel"),
	ServerHopWaitTimeSlider = Instance.new("ImageLabel"),
	Handle_7 = Instance.new("ImageButton"),
	UICorner_94 = Instance.new("UICorner"),
	BackGround_9 = Instance.new("ImageLabel"),
	UICorner_95 = Instance.new("UICorner"),
	ServerHopWaitTimeValue = Instance.new("TextLabel"),
	Title_11 = Instance.new("TextLabel"),
	AutoRobToggle = Instance.new("TextLabel"),
	UICorner_96 = Instance.new("UICorner"),
	Border_20 = Instance.new("TextLabel"),
	UICorner_97 = Instance.new("UICorner"),
	AutoRobToggleButton = Instance.new("ImageButton"),
	UICorner_98 = Instance.new("UICorner"),
	ImageLabel_19 = Instance.new("ImageLabel"),
	UICorner_99 = Instance.new("UICorner"),
	InfoTab = Instance.new("Frame"),
	Creator = Instance.new("TextLabel"),
	UICorner_100 = Instance.new("UICorner"),
	Border_21 = Instance.new("TextLabel"),
	UICorner_101 = Instance.new("UICorner"),
	UIListLayout_4 = Instance.new("UIListLayout"),
	Gap_3 = Instance.new("TextLabel"),
	Version = Instance.new("TextLabel"),
	UICorner_102 = Instance.new("UICorner"),
	Border_22 = Instance.new("TextLabel"),
	UICorner_103 = Instance.new("UICorner"),
}

--Properties:

ProjectAutoV2.ProjectAutoV2.Name = "ProjectAutoV2"
ProjectAutoV2.ProjectAutoV2.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

ProjectAutoV2.BackGround.Name = "BackGround"
ProjectAutoV2.BackGround.Parent = ProjectAutoV2.ProjectAutoV2
ProjectAutoV2.BackGround.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
ProjectAutoV2.BackGround.Position = UDim2.new(0.0879717767, 0, 0.0821114406, 0)
ProjectAutoV2.BackGround.Size = UDim2.new(0, 400, 0, 500)

ProjectAutoV2.UICorner.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner.Parent = ProjectAutoV2.BackGround

ProjectAutoV2.Border.Name = "Border"
ProjectAutoV2.Border.Parent = ProjectAutoV2.BackGround
ProjectAutoV2.Border.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.Border.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.Border.Size = UDim2.new(0, 402, 0, 502)
ProjectAutoV2.Border.ZIndex = 0

ProjectAutoV2.UICorner_2.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_2.Parent = ProjectAutoV2.Border

ProjectAutoV2.InnerBorder.Name = "InnerBorder"
ProjectAutoV2.InnerBorder.Parent = ProjectAutoV2.BackGround
ProjectAutoV2.InnerBorder.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.InnerBorder.BorderSizePixel = 0
ProjectAutoV2.InnerBorder.Position = UDim2.new(0, 100, 0, 50)
ProjectAutoV2.InnerBorder.Size = UDim2.new(0, 1, 0, 400)

ProjectAutoV2.InnerBorder1.Name = "InnerBorder1"
ProjectAutoV2.InnerBorder1.Parent = ProjectAutoV2.BackGround
ProjectAutoV2.InnerBorder1.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.InnerBorder1.BorderSizePixel = 0
ProjectAutoV2.InnerBorder1.Position = UDim2.new(0, 0, 0, 450)
ProjectAutoV2.InnerBorder1.Size = UDim2.new(0, 400, 0, 1)

ProjectAutoV2.InnerBorder2.Name = "InnerBorder2"
ProjectAutoV2.InnerBorder2.Parent = ProjectAutoV2.BackGround
ProjectAutoV2.InnerBorder2.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.InnerBorder2.BorderSizePixel = 0
ProjectAutoV2.InnerBorder2.Position = UDim2.new(0, 0, 0, 50)
ProjectAutoV2.InnerBorder2.Size = UDim2.new(0, 400, 0, 1)

ProjectAutoV2.User.Name = "User"
ProjectAutoV2.User.Parent = ProjectAutoV2.BackGround
ProjectAutoV2.User.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.User.BackgroundTransparency = 1.000
ProjectAutoV2.User.Position = UDim2.new(0, 55, 0, 450)
ProjectAutoV2.User.Size = UDim2.new(0, 80, 0, 25)
ProjectAutoV2.User.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.User.Text = "Pxsta#4133"
ProjectAutoV2.User.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.User.TextSize = 15.000
ProjectAutoV2.User.TextXAlignment = Enum.TextXAlignment.Left

ProjectAutoV2.Status.Name = "Status"
ProjectAutoV2.Status.Parent = ProjectAutoV2.BackGround
ProjectAutoV2.Status.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.Status.BackgroundTransparency = 1.000
ProjectAutoV2.Status.Position = UDim2.new(0, 55, 0, 475)
ProjectAutoV2.Status.Size = UDim2.new(0, 50, 0, 25)
ProjectAutoV2.Status.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Status.Text = "Owner"
ProjectAutoV2.Status.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Status.TextSize = 15.000
ProjectAutoV2.Status.TextXAlignment = Enum.TextXAlignment.Left

ProjectAutoV2.Icon.Name = "Icon"
ProjectAutoV2.Icon.Parent = ProjectAutoV2.BackGround
ProjectAutoV2.Icon.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
ProjectAutoV2.Icon.BorderColor3 = Color3.fromRGB(27, 42, 53)
ProjectAutoV2.Icon.Position = UDim2.new(0, 5, 0, 453)
ProjectAutoV2.Icon.Size = UDim2.new(0, 45, 0, 45)
ProjectAutoV2.Icon.ZIndex = 2

ProjectAutoV2.UICorner_3.CornerRadius = UDim.new(5, 0)
ProjectAutoV2.UICorner_3.Parent = ProjectAutoV2.Icon

ProjectAutoV2.BackGround_2.Name = "BackGround"
ProjectAutoV2.BackGround_2.Parent = ProjectAutoV2.Icon
ProjectAutoV2.BackGround_2.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.BackGround_2.BorderColor3 = Color3.fromRGB(27, 42, 53)
ProjectAutoV2.BackGround_2.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.BackGround_2.Size = UDim2.new(0, 47, 0, 47)

ProjectAutoV2.UICorner_4.CornerRadius = UDim.new(5, 0)
ProjectAutoV2.UICorner_4.Parent = ProjectAutoV2.BackGround_2

ProjectAutoV2.Time.Name = "Time"
ProjectAutoV2.Time.Parent = ProjectAutoV2.BackGround
ProjectAutoV2.Time.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.Time.BackgroundTransparency = 1.000
ProjectAutoV2.Time.Position = UDim2.new(0, 200, 0, 450)
ProjectAutoV2.Time.Size = UDim2.new(0, 130, 0, 25)
ProjectAutoV2.Time.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Time.Text = "Time Elapsed: 00:00:00"
ProjectAutoV2.Time.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Time.TextSize = 15.000
ProjectAutoV2.Time.TextXAlignment = Enum.TextXAlignment.Left

ProjectAutoV2.Money.Name = "Money"
ProjectAutoV2.Money.Parent = ProjectAutoV2.BackGround
ProjectAutoV2.Money.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.Money.BackgroundTransparency = 1.000
ProjectAutoV2.Money.Position = UDim2.new(0, 200, 0, 475)
ProjectAutoV2.Money.Size = UDim2.new(0, 150, 0, 25)
ProjectAutoV2.Money.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Money.Text = "Money Earned: $00,000,000"
ProjectAutoV2.Money.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Money.TextSize = 15.000
ProjectAutoV2.Money.TextXAlignment = Enum.TextXAlignment.Left

ProjectAutoV2.MenuName.Name = "MenuName"
ProjectAutoV2.MenuName.Parent = ProjectAutoV2.BackGround
ProjectAutoV2.MenuName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.MenuName.BackgroundTransparency = 1.000
ProjectAutoV2.MenuName.BorderColor3 = Color3.fromRGB(85, 0, 255)
ProjectAutoV2.MenuName.Position = UDim2.new(0, 0, 0, 7)
ProjectAutoV2.MenuName.Size = UDim2.new(0, 400, 0, 35)
ProjectAutoV2.MenuName.Font = Enum.Font.SourceSansBold
ProjectAutoV2.MenuName.Text = "Project Auto"
ProjectAutoV2.MenuName.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.MenuName.TextSize = 50.000
ProjectAutoV2.MenuName.TextStrokeColor3 = Color3.fromRGB(122, 0, 255)

ProjectAutoV2.Tabs.Name = "Tabs"
ProjectAutoV2.Tabs.Parent = ProjectAutoV2.BackGround
ProjectAutoV2.Tabs.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
ProjectAutoV2.Tabs.BorderSizePixel = 0
ProjectAutoV2.Tabs.Position = UDim2.new(0, 0, 0, 51)
ProjectAutoV2.Tabs.Size = UDim2.new(0, 100, 0, 399)

ProjectAutoV2.UIListLayout.Parent = ProjectAutoV2.Tabs
ProjectAutoV2.UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

ProjectAutoV2.ConsoleButton.Name = "ConsoleButton"
ProjectAutoV2.ConsoleButton.Parent = ProjectAutoV2.Tabs
ProjectAutoV2.ConsoleButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
ProjectAutoV2.ConsoleButton.BorderSizePixel = 0
ProjectAutoV2.ConsoleButton.Position = UDim2.new(0.454461813, 0, 0.560117304, 0)
ProjectAutoV2.ConsoleButton.Size = UDim2.new(0, 100, 0, 25)
ProjectAutoV2.ConsoleButton.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.ConsoleButton.Text = "Console"
ProjectAutoV2.ConsoleButton.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.ConsoleButton.TextSize = 15.000

ProjectAutoV2.SettingsButton.Name = "SettingsButton"
ProjectAutoV2.SettingsButton.Parent = ProjectAutoV2.Tabs
ProjectAutoV2.SettingsButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
ProjectAutoV2.SettingsButton.BorderSizePixel = 0
ProjectAutoV2.SettingsButton.LayoutOrder = 2
ProjectAutoV2.SettingsButton.Position = UDim2.new(0.454461813, 0, 0.560117304, 0)
ProjectAutoV2.SettingsButton.Size = UDim2.new(0, 100, 0, 25)
ProjectAutoV2.SettingsButton.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.SettingsButton.Text = "Settings"
ProjectAutoV2.SettingsButton.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.SettingsButton.TextSize = 15.000

ProjectAutoV2.LocationsButton.Name = "LocationsButton"
ProjectAutoV2.LocationsButton.Parent = ProjectAutoV2.Tabs
ProjectAutoV2.LocationsButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
ProjectAutoV2.LocationsButton.BorderSizePixel = 0
ProjectAutoV2.LocationsButton.LayoutOrder = 1
ProjectAutoV2.LocationsButton.Position = UDim2.new(0.454461813, 0, 0.783174932, 0)
ProjectAutoV2.LocationsButton.Size = UDim2.new(0, 100, 0, 25)
ProjectAutoV2.LocationsButton.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.LocationsButton.Text = "Locations"
ProjectAutoV2.LocationsButton.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.LocationsButton.TextSize = 15.000

ProjectAutoV2.InfoButton.Name = "InfoButton"
ProjectAutoV2.InfoButton.Parent = ProjectAutoV2.Tabs
ProjectAutoV2.InfoButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
ProjectAutoV2.InfoButton.BorderSizePixel = 0
ProjectAutoV2.InfoButton.LayoutOrder = 3
ProjectAutoV2.InfoButton.Position = UDim2.new(0.454461813, 0, 0.560117304, 0)
ProjectAutoV2.InfoButton.Size = UDim2.new(0, 100, 0, 25)
ProjectAutoV2.InfoButton.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.InfoButton.Text = "Info"
ProjectAutoV2.InfoButton.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.InfoButton.TextSize = 15.000

ProjectAutoV2.ConsoleTab.Name = "ConsoleTab"
ProjectAutoV2.ConsoleTab.Parent = ProjectAutoV2.BackGround
ProjectAutoV2.ConsoleTab.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
ProjectAutoV2.ConsoleTab.BorderSizePixel = 0
ProjectAutoV2.ConsoleTab.Position = UDim2.new(0, 101, 0, 51)
ProjectAutoV2.ConsoleTab.Size = UDim2.new(0, 299, 0, 399)

ProjectAutoV2.Console.Name = "Console"
ProjectAutoV2.Console.Parent = ProjectAutoV2.ConsoleTab
ProjectAutoV2.Console.Active = true
ProjectAutoV2.Console.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.Console.BorderColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.Console.Position = UDim2.new(0, 10, 0, 10)
ProjectAutoV2.Console.Size = UDim2.new(0, 279, 0, 353)
ProjectAutoV2.Console.AutomaticCanvasSize = "Y"
ProjectAutoV2.Console.CanvasSize = UDim2.new(0, 0, 0.884500027, 0)
ProjectAutoV2.Console.ScrollBarThickness = 5

ProjectAutoV2.NewMessage.Name = "NewMessage"
ProjectAutoV2.NewMessage.Parent = ProjectAutoV2.Console
ProjectAutoV2.NewMessage.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
ProjectAutoV2.NewMessage.BackgroundTransparency = 1.000
ProjectAutoV2.NewMessage.BorderColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.NewMessage.BorderSizePixel = 0
ProjectAutoV2.NewMessage.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.NewMessage.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.NewMessage.Text = "Project Auto Started"
ProjectAutoV2.NewMessage.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.NewMessage.TextSize = 15.000

ProjectAutoV2.Log.Name = "Log"
ProjectAutoV2.Log.Parent = ProjectAutoV2.ConsoleTab
ProjectAutoV2.Log.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.Log.BorderColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.Log.Position = UDim2.new(0, 10, 0, 364)
ProjectAutoV2.Log.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.Log.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Log.Text = "Starting Project Auto"
ProjectAutoV2.Log.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Log.TextSize = 15.000

ProjectAutoV2.LocationsTab.Name = "LocationsTab"
ProjectAutoV2.LocationsTab.Parent = ProjectAutoV2.BackGround
ProjectAutoV2.LocationsTab.Active = true
ProjectAutoV2.LocationsTab.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
ProjectAutoV2.LocationsTab.BorderSizePixel = 0
ProjectAutoV2.LocationsTab.Position = UDim2.new(0, 101, 0, 51)
ProjectAutoV2.LocationsTab.Size = UDim2.new(0, 299, 0, 399)
ProjectAutoV2.LocationsTab.CanvasSize = UDim2.new(0, 0, 0.870000005, 0)
ProjectAutoV2.LocationsTab.ScrollBarThickness = 5

ProjectAutoV2.UIListLayout_2.Parent = ProjectAutoV2.LocationsTab
ProjectAutoV2.UIListLayout_2.HorizontalAlignment = Enum.HorizontalAlignment.Center
ProjectAutoV2.UIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder
ProjectAutoV2.UIListLayout_2.Padding = UDim.new(0, 10)

ProjectAutoV2.MansionToggle.Name = "MansionToggle"
ProjectAutoV2.MansionToggle.Parent = ProjectAutoV2.LocationsTab
ProjectAutoV2.MansionToggle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.MansionToggle.Position = UDim2.new(0, 10, 0, 10)
ProjectAutoV2.MansionToggle.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.MansionToggle.ZIndex = 2
ProjectAutoV2.MansionToggle.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.MansionToggle.Text = "Mansion"
ProjectAutoV2.MansionToggle.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.MansionToggle.TextSize = 15.000

ProjectAutoV2.UICorner_5.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_5.Parent = ProjectAutoV2.MansionToggle

ProjectAutoV2.Border_2.Name = "Border"
ProjectAutoV2.Border_2.Parent = ProjectAutoV2.MansionToggle
ProjectAutoV2.Border_2.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.Border_2.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.Border_2.Size = UDim2.new(0, 281, 0, 27)
ProjectAutoV2.Border_2.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Border_2.Text = ""
ProjectAutoV2.Border_2.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Border_2.TextSize = 15.000

ProjectAutoV2.UICorner_6.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_6.Parent = ProjectAutoV2.Border_2

ProjectAutoV2.MansionToggleButton.Name = "MansionToggleButton"
ProjectAutoV2.MansionToggleButton.Parent = ProjectAutoV2.MansionToggle
ProjectAutoV2.MansionToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.MansionToggleButton.Position = UDim2.new(0, 5, 0, 5)
ProjectAutoV2.MansionToggleButton.Size = UDim2.new(0, 16, 0, 16)
ProjectAutoV2.MansionToggleButton.ZIndex = 4

ProjectAutoV2.UICorner_7.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_7.Parent = ProjectAutoV2.MansionToggleButton

ProjectAutoV2.ImageLabel.Parent = ProjectAutoV2.MansionToggleButton
ProjectAutoV2.ImageLabel.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.ImageLabel.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.ImageLabel.Size = UDim2.new(0, 18, 0, 18)
ProjectAutoV2.ImageLabel.ZIndex = 3

ProjectAutoV2.UICorner_8.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_8.Parent = ProjectAutoV2.ImageLabel

ProjectAutoV2.MuseumToggle.Name = "MuseumToggle"
ProjectAutoV2.MuseumToggle.Parent = ProjectAutoV2.LocationsTab
ProjectAutoV2.MuseumToggle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.MuseumToggle.LayoutOrder = 1
ProjectAutoV2.MuseumToggle.Position = UDim2.new(0, 10, 0, 10)
ProjectAutoV2.MuseumToggle.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.MuseumToggle.ZIndex = 2
ProjectAutoV2.MuseumToggle.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.MuseumToggle.Text = "Museum"
ProjectAutoV2.MuseumToggle.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.MuseumToggle.TextSize = 15.000

ProjectAutoV2.UICorner_9.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_9.Parent = ProjectAutoV2.MuseumToggle

ProjectAutoV2.Border_3.Name = "Border"
ProjectAutoV2.Border_3.Parent = ProjectAutoV2.MuseumToggle
ProjectAutoV2.Border_3.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.Border_3.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.Border_3.Size = UDim2.new(0, 281, 0, 27)
ProjectAutoV2.Border_3.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Border_3.Text = ""
ProjectAutoV2.Border_3.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Border_3.TextSize = 15.000

ProjectAutoV2.UICorner_10.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_10.Parent = ProjectAutoV2.Border_3

ProjectAutoV2.MuseumToggleButton.Name = "MuseumToggleButton"
ProjectAutoV2.MuseumToggleButton.Parent = ProjectAutoV2.MuseumToggle
ProjectAutoV2.MuseumToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.MuseumToggleButton.Position = UDim2.new(0, 5, 0, 5)
ProjectAutoV2.MuseumToggleButton.Size = UDim2.new(0, 16, 0, 16)
ProjectAutoV2.MuseumToggleButton.ZIndex = 4

ProjectAutoV2.UICorner_11.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_11.Parent = ProjectAutoV2.MuseumToggleButton

ProjectAutoV2.ImageLabel_2.Parent = ProjectAutoV2.MuseumToggleButton
ProjectAutoV2.ImageLabel_2.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.ImageLabel_2.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.ImageLabel_2.Size = UDim2.new(0, 18, 0, 18)
ProjectAutoV2.ImageLabel_2.ZIndex = 3

ProjectAutoV2.UICorner_12.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_12.Parent = ProjectAutoV2.ImageLabel_2

ProjectAutoV2.JewelryToggle.Name = "JewelryToggle"
ProjectAutoV2.JewelryToggle.Parent = ProjectAutoV2.LocationsTab
ProjectAutoV2.JewelryToggle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.JewelryToggle.LayoutOrder = 3
ProjectAutoV2.JewelryToggle.Position = UDim2.new(0, 10, 0, 10)
ProjectAutoV2.JewelryToggle.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.JewelryToggle.ZIndex = 2
ProjectAutoV2.JewelryToggle.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.JewelryToggle.Text = "Jewelry"
ProjectAutoV2.JewelryToggle.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.JewelryToggle.TextSize = 15.000

ProjectAutoV2.UICorner_13.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_13.Parent = ProjectAutoV2.JewelryToggle

ProjectAutoV2.Border_4.Name = "Border"
ProjectAutoV2.Border_4.Parent = ProjectAutoV2.JewelryToggle
ProjectAutoV2.Border_4.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.Border_4.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.Border_4.Size = UDim2.new(0, 281, 0, 27)
ProjectAutoV2.Border_4.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Border_4.Text = ""
ProjectAutoV2.Border_4.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Border_4.TextSize = 15.000

ProjectAutoV2.UICorner_14.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_14.Parent = ProjectAutoV2.Border_4

ProjectAutoV2.JewelryToggleButton.Name = "JewelryToggleButton"
ProjectAutoV2.JewelryToggleButton.Parent = ProjectAutoV2.JewelryToggle
ProjectAutoV2.JewelryToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.JewelryToggleButton.Position = UDim2.new(0, 5, 0, 5)
ProjectAutoV2.JewelryToggleButton.Size = UDim2.new(0, 16, 0, 16)
ProjectAutoV2.JewelryToggleButton.ZIndex = 4

ProjectAutoV2.UICorner_15.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_15.Parent = ProjectAutoV2.JewelryToggleButton

ProjectAutoV2.ImageLabel_3.Parent = ProjectAutoV2.JewelryToggleButton
ProjectAutoV2.ImageLabel_3.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.ImageLabel_3.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.ImageLabel_3.Size = UDim2.new(0, 18, 0, 18)
ProjectAutoV2.ImageLabel_3.ZIndex = 3

ProjectAutoV2.UICorner_16.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_16.Parent = ProjectAutoV2.ImageLabel_3

ProjectAutoV2.CasinoToggle.Name = "CasinoToggle"
ProjectAutoV2.CasinoToggle.Parent = ProjectAutoV2.LocationsTab
ProjectAutoV2.CasinoToggle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.CasinoToggle.LayoutOrder = 4
ProjectAutoV2.CasinoToggle.Position = UDim2.new(0, 10, 0, 10)
ProjectAutoV2.CasinoToggle.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.CasinoToggle.ZIndex = 2
ProjectAutoV2.CasinoToggle.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.CasinoToggle.Text = "Casino"
ProjectAutoV2.CasinoToggle.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.CasinoToggle.TextSize = 15.000

ProjectAutoV2.UICorner_17.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_17.Parent = ProjectAutoV2.CasinoToggle

ProjectAutoV2.Border_5.Name = "Border"
ProjectAutoV2.Border_5.Parent = ProjectAutoV2.CasinoToggle
ProjectAutoV2.Border_5.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.Border_5.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.Border_5.Size = UDim2.new(0, 281, 0, 27)
ProjectAutoV2.Border_5.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Border_5.Text = ""
ProjectAutoV2.Border_5.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Border_5.TextSize = 15.000

ProjectAutoV2.UICorner_18.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_18.Parent = ProjectAutoV2.Border_5

ProjectAutoV2.CasinoToggleButton.Name = "CasinoToggleButton"
ProjectAutoV2.CasinoToggleButton.Parent = ProjectAutoV2.CasinoToggle
ProjectAutoV2.CasinoToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.CasinoToggleButton.Position = UDim2.new(0, 5, 0, 5)
ProjectAutoV2.CasinoToggleButton.Size = UDim2.new(0, 16, 0, 16)
ProjectAutoV2.CasinoToggleButton.ZIndex = 4

ProjectAutoV2.UICorner_19.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_19.Parent = ProjectAutoV2.CasinoToggleButton

ProjectAutoV2.ImageLabel_4.Parent = ProjectAutoV2.CasinoToggleButton
ProjectAutoV2.ImageLabel_4.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.ImageLabel_4.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.ImageLabel_4.Size = UDim2.new(0, 18, 0, 18)
ProjectAutoV2.ImageLabel_4.ZIndex = 3

ProjectAutoV2.UICorner_20.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_20.Parent = ProjectAutoV2.ImageLabel_4

ProjectAutoV2.TombToggle.Name = "TombToggle"
ProjectAutoV2.TombToggle.Parent = ProjectAutoV2.LocationsTab
ProjectAutoV2.TombToggle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.TombToggle.LayoutOrder = 5
ProjectAutoV2.TombToggle.Position = UDim2.new(0, 10, 0, 10)
ProjectAutoV2.TombToggle.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.TombToggle.ZIndex = 2
ProjectAutoV2.TombToggle.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.TombToggle.Text = "Tomb"
ProjectAutoV2.TombToggle.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.TombToggle.TextSize = 15.000

ProjectAutoV2.UICorner_21.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_21.Parent = ProjectAutoV2.TombToggle

ProjectAutoV2.Border_6.Name = "Border"
ProjectAutoV2.Border_6.Parent = ProjectAutoV2.TombToggle
ProjectAutoV2.Border_6.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.Border_6.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.Border_6.Size = UDim2.new(0, 281, 0, 27)
ProjectAutoV2.Border_6.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Border_6.Text = ""
ProjectAutoV2.Border_6.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Border_6.TextSize = 15.000

ProjectAutoV2.UICorner_22.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_22.Parent = ProjectAutoV2.Border_6

ProjectAutoV2.TombToggleButton.Name = "TombToggleButton"
ProjectAutoV2.TombToggleButton.Parent = ProjectAutoV2.TombToggle
ProjectAutoV2.TombToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.TombToggleButton.Position = UDim2.new(0, 5, 0, 5)
ProjectAutoV2.TombToggleButton.Size = UDim2.new(0, 16, 0, 16)
ProjectAutoV2.TombToggleButton.ZIndex = 4

ProjectAutoV2.UICorner_23.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_23.Parent = ProjectAutoV2.TombToggleButton

ProjectAutoV2.ImageLabel_5.Parent = ProjectAutoV2.TombToggleButton
ProjectAutoV2.ImageLabel_5.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.ImageLabel_5.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.ImageLabel_5.Size = UDim2.new(0, 18, 0, 18)
ProjectAutoV2.ImageLabel_5.ZIndex = 3

ProjectAutoV2.UICorner_24.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_24.Parent = ProjectAutoV2.ImageLabel_5

ProjectAutoV2.PowerPlantToggle.Name = "PowerPlantToggle"
ProjectAutoV2.PowerPlantToggle.Parent = ProjectAutoV2.LocationsTab
ProjectAutoV2.PowerPlantToggle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.PowerPlantToggle.LayoutOrder = 6
ProjectAutoV2.PowerPlantToggle.Position = UDim2.new(0, 10, 0, 10)
ProjectAutoV2.PowerPlantToggle.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.PowerPlantToggle.ZIndex = 2
ProjectAutoV2.PowerPlantToggle.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.PowerPlantToggle.Text = "Power Plant (NOT ADDED)"
ProjectAutoV2.PowerPlantToggle.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.PowerPlantToggle.TextSize = 15.000

ProjectAutoV2.UICorner_25.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_25.Parent = ProjectAutoV2.PowerPlantToggle

ProjectAutoV2.Border_7.Name = "Border"
ProjectAutoV2.Border_7.Parent = ProjectAutoV2.PowerPlantToggle
ProjectAutoV2.Border_7.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.Border_7.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.Border_7.Size = UDim2.new(0, 281, 0, 27)
ProjectAutoV2.Border_7.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Border_7.Text = ""
ProjectAutoV2.Border_7.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Border_7.TextSize = 15.000

ProjectAutoV2.UICorner_26.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_26.Parent = ProjectAutoV2.Border_7

ProjectAutoV2.PowerPlantToggleButton.Name = "PowerPlantToggleButton"
ProjectAutoV2.PowerPlantToggleButton.Parent = ProjectAutoV2.PowerPlantToggle
ProjectAutoV2.PowerPlantToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.PowerPlantToggleButton.Position = UDim2.new(0, 5, 0, 5)
ProjectAutoV2.PowerPlantToggleButton.Size = UDim2.new(0, 16, 0, 16)
ProjectAutoV2.PowerPlantToggleButton.ZIndex = 4

ProjectAutoV2.UICorner_27.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_27.Parent = ProjectAutoV2.PowerPlantToggleButton

ProjectAutoV2.ImageLabel_6.Parent = ProjectAutoV2.PowerPlantToggleButton
ProjectAutoV2.ImageLabel_6.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.ImageLabel_6.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.ImageLabel_6.Size = UDim2.new(0, 18, 0, 18)
ProjectAutoV2.ImageLabel_6.ZIndex = 3

ProjectAutoV2.UICorner_28.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_28.Parent = ProjectAutoV2.ImageLabel_6

ProjectAutoV2.BoatToggle.Name = "BoatToggle"
ProjectAutoV2.BoatToggle.Parent = ProjectAutoV2.LocationsTab
ProjectAutoV2.BoatToggle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.BoatToggle.LayoutOrder = 7
ProjectAutoV2.BoatToggle.Position = UDim2.new(0, 10, 0, 10)
ProjectAutoV2.BoatToggle.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.BoatToggle.ZIndex = 2
ProjectAutoV2.BoatToggle.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.BoatToggle.Text = "Boat (NOT ADDED)"
ProjectAutoV2.BoatToggle.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.BoatToggle.TextSize = 15.000

ProjectAutoV2.UICorner_29.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_29.Parent = ProjectAutoV2.BoatToggle

ProjectAutoV2.Border_8.Name = "Border"
ProjectAutoV2.Border_8.Parent = ProjectAutoV2.BoatToggle
ProjectAutoV2.Border_8.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.Border_8.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.Border_8.Size = UDim2.new(0, 281, 0, 27)
ProjectAutoV2.Border_8.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Border_8.Text = ""
ProjectAutoV2.Border_8.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Border_8.TextSize = 15.000

ProjectAutoV2.UICorner_30.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_30.Parent = ProjectAutoV2.Border_8

ProjectAutoV2.BoatToggleButton.Name = "BoatToggleButton"
ProjectAutoV2.BoatToggleButton.Parent = ProjectAutoV2.BoatToggle
ProjectAutoV2.BoatToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.BoatToggleButton.Position = UDim2.new(0, 5, 0, 5)
ProjectAutoV2.BoatToggleButton.Size = UDim2.new(0, 16, 0, 16)
ProjectAutoV2.BoatToggleButton.ZIndex = 4

ProjectAutoV2.UICorner_31.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_31.Parent = ProjectAutoV2.BoatToggleButton

ProjectAutoV2.ImageLabel_7.Parent = ProjectAutoV2.BoatToggleButton
ProjectAutoV2.ImageLabel_7.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.ImageLabel_7.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.ImageLabel_7.Size = UDim2.new(0, 18, 0, 18)
ProjectAutoV2.ImageLabel_7.ZIndex = 3

ProjectAutoV2.UICorner_32.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_32.Parent = ProjectAutoV2.ImageLabel_7

ProjectAutoV2.PlaneToggle.Name = "PlaneToggle"
ProjectAutoV2.PlaneToggle.Parent = ProjectAutoV2.LocationsTab
ProjectAutoV2.PlaneToggle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.PlaneToggle.LayoutOrder = 8
ProjectAutoV2.PlaneToggle.Position = UDim2.new(0, 10, 0, 10)
ProjectAutoV2.PlaneToggle.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.PlaneToggle.ZIndex = 2
ProjectAutoV2.PlaneToggle.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.PlaneToggle.Text = "Plane"
ProjectAutoV2.PlaneToggle.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.PlaneToggle.TextSize = 15.000

ProjectAutoV2.UICorner_33.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_33.Parent = ProjectAutoV2.PlaneToggle

ProjectAutoV2.Border_9.Name = "Border"
ProjectAutoV2.Border_9.Parent = ProjectAutoV2.PlaneToggle
ProjectAutoV2.Border_9.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.Border_9.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.Border_9.Size = UDim2.new(0, 281, 0, 27)
ProjectAutoV2.Border_9.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Border_9.Text = ""
ProjectAutoV2.Border_9.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Border_9.TextSize = 15.000

ProjectAutoV2.UICorner_34.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_34.Parent = ProjectAutoV2.Border_9

ProjectAutoV2.PlaneToggleButton.Name = "PlaneToggleButton"
ProjectAutoV2.PlaneToggleButton.Parent = ProjectAutoV2.PlaneToggle
ProjectAutoV2.PlaneToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.PlaneToggleButton.Position = UDim2.new(0, 5, 0, 5)
ProjectAutoV2.PlaneToggleButton.Size = UDim2.new(0, 16, 0, 16)
ProjectAutoV2.PlaneToggleButton.ZIndex = 4

ProjectAutoV2.UICorner_35.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_35.Parent = ProjectAutoV2.PlaneToggleButton

ProjectAutoV2.ImageLabel_8.Parent = ProjectAutoV2.PlaneToggleButton
ProjectAutoV2.ImageLabel_8.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.ImageLabel_8.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.ImageLabel_8.Size = UDim2.new(0, 18, 0, 18)
ProjectAutoV2.ImageLabel_8.ZIndex = 3

ProjectAutoV2.UICorner_36.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_36.Parent = ProjectAutoV2.ImageLabel_8

ProjectAutoV2.TrainToggle.Name = "TrainToggle"
ProjectAutoV2.TrainToggle.Parent = ProjectAutoV2.LocationsTab
ProjectAutoV2.TrainToggle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.TrainToggle.LayoutOrder = 9
ProjectAutoV2.TrainToggle.Position = UDim2.new(0, 10, 0, 10)
ProjectAutoV2.TrainToggle.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.TrainToggle.ZIndex = 2
ProjectAutoV2.TrainToggle.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.TrainToggle.Text = "Train"
ProjectAutoV2.TrainToggle.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.TrainToggle.TextSize = 15.000

ProjectAutoV2.UICorner_37.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_37.Parent = ProjectAutoV2.TrainToggle

ProjectAutoV2.Border_10.Name = "Border"
ProjectAutoV2.Border_10.Parent = ProjectAutoV2.TrainToggle
ProjectAutoV2.Border_10.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.Border_10.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.Border_10.Size = UDim2.new(0, 281, 0, 27)
ProjectAutoV2.Border_10.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Border_10.Text = ""
ProjectAutoV2.Border_10.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Border_10.TextSize = 15.000

ProjectAutoV2.UICorner_38.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_38.Parent = ProjectAutoV2.Border_10

ProjectAutoV2.TrainToggleButton.Name = "TrainToggleButton"
ProjectAutoV2.TrainToggleButton.Parent = ProjectAutoV2.TrainToggle
ProjectAutoV2.TrainToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.TrainToggleButton.Position = UDim2.new(0, 5, 0, 5)
ProjectAutoV2.TrainToggleButton.Size = UDim2.new(0, 16, 0, 16)
ProjectAutoV2.TrainToggleButton.ZIndex = 4

ProjectAutoV2.UICorner_39.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_39.Parent = ProjectAutoV2.TrainToggleButton

ProjectAutoV2.ImageLabel_9.Parent = ProjectAutoV2.TrainToggleButton
ProjectAutoV2.ImageLabel_9.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.ImageLabel_9.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.ImageLabel_9.Size = UDim2.new(0, 18, 0, 18)
ProjectAutoV2.ImageLabel_9.ZIndex = 3

ProjectAutoV2.UICorner_40.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_40.Parent = ProjectAutoV2.ImageLabel_9

ProjectAutoV2.SmallStoresToggle.Name = "SmallStoresToggle"
ProjectAutoV2.SmallStoresToggle.Parent = ProjectAutoV2.LocationsTab
ProjectAutoV2.SmallStoresToggle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.SmallStoresToggle.LayoutOrder = 10
ProjectAutoV2.SmallStoresToggle.Position = UDim2.new(0, 10, 0, 10)
ProjectAutoV2.SmallStoresToggle.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.SmallStoresToggle.ZIndex = 2
ProjectAutoV2.SmallStoresToggle.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.SmallStoresToggle.Text = "Small Stores (NOT ADDED)"
ProjectAutoV2.SmallStoresToggle.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.SmallStoresToggle.TextSize = 15.000

ProjectAutoV2.UICorner_41.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_41.Parent = ProjectAutoV2.SmallStoresToggle

ProjectAutoV2.Border_11.Name = "Border"
ProjectAutoV2.Border_11.Parent = ProjectAutoV2.SmallStoresToggle
ProjectAutoV2.Border_11.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.Border_11.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.Border_11.Size = UDim2.new(0, 281, 0, 27)
ProjectAutoV2.Border_11.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Border_11.Text = ""
ProjectAutoV2.Border_11.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Border_11.TextSize = 15.000

ProjectAutoV2.UICorner_42.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_42.Parent = ProjectAutoV2.Border_11

ProjectAutoV2.SmallStoresToggleButton.Name = "SmallStoresToggleButton"
ProjectAutoV2.SmallStoresToggleButton.Parent = ProjectAutoV2.SmallStoresToggle
ProjectAutoV2.SmallStoresToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.SmallStoresToggleButton.Position = UDim2.new(0, 5, 0, 5)
ProjectAutoV2.SmallStoresToggleButton.Size = UDim2.new(0, 16, 0, 16)
ProjectAutoV2.SmallStoresToggleButton.ZIndex = 4

ProjectAutoV2.UICorner_43.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_43.Parent = ProjectAutoV2.SmallStoresToggleButton

ProjectAutoV2.ImageLabel_10.Parent = ProjectAutoV2.SmallStoresToggleButton
ProjectAutoV2.ImageLabel_10.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.ImageLabel_10.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.ImageLabel_10.Size = UDim2.new(0, 18, 0, 18)
ProjectAutoV2.ImageLabel_10.ZIndex = 3

ProjectAutoV2.UICorner_44.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_44.Parent = ProjectAutoV2.ImageLabel_10

ProjectAutoV2.DropToggle.Name = "DropToggle"
ProjectAutoV2.DropToggle.Parent = ProjectAutoV2.LocationsTab
ProjectAutoV2.DropToggle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.DropToggle.LayoutOrder = 11
ProjectAutoV2.DropToggle.Position = UDim2.new(0, 10, 0, 45)
ProjectAutoV2.DropToggle.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.DropToggle.ZIndex = 2
ProjectAutoV2.DropToggle.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.DropToggle.Text = "Air Drop"
ProjectAutoV2.DropToggle.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.DropToggle.TextSize = 15.000

ProjectAutoV2.UICorner_45.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_45.Parent = ProjectAutoV2.DropToggle

ProjectAutoV2.Border_12.Name = "Border"
ProjectAutoV2.Border_12.Parent = ProjectAutoV2.DropToggle
ProjectAutoV2.Border_12.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.Border_12.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.Border_12.Size = UDim2.new(0, 281, 0, 27)
ProjectAutoV2.Border_12.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Border_12.Text = ""
ProjectAutoV2.Border_12.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Border_12.TextSize = 15.000

ProjectAutoV2.UICorner_46.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_46.Parent = ProjectAutoV2.Border_12

ProjectAutoV2.DropToggleButton.Name = "DropToggleButton"
ProjectAutoV2.DropToggleButton.Parent = ProjectAutoV2.DropToggle
ProjectAutoV2.DropToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.DropToggleButton.Position = UDim2.new(0, 5, 0, 5)
ProjectAutoV2.DropToggleButton.Size = UDim2.new(0, 16, 0, 16)
ProjectAutoV2.DropToggleButton.ZIndex = 4

ProjectAutoV2.UICorner_47.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_47.Parent = ProjectAutoV2.DropToggleButton

ProjectAutoV2.ImageLabel_11.Parent = ProjectAutoV2.DropToggleButton
ProjectAutoV2.ImageLabel_11.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.ImageLabel_11.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.ImageLabel_11.Size = UDim2.new(0, 18, 0, 18)
ProjectAutoV2.ImageLabel_11.ZIndex = 3

ProjectAutoV2.UICorner_48.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_48.Parent = ProjectAutoV2.ImageLabel_11

ProjectAutoV2.BankToggle.Name = "BankToggle"
ProjectAutoV2.BankToggle.Parent = ProjectAutoV2.LocationsTab
ProjectAutoV2.BankToggle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.BankToggle.LayoutOrder = 2
ProjectAutoV2.BankToggle.Position = UDim2.new(0, 10, 0, 45)
ProjectAutoV2.BankToggle.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.BankToggle.ZIndex = 2
ProjectAutoV2.BankToggle.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.BankToggle.Text = "Bank"
ProjectAutoV2.BankToggle.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.BankToggle.TextSize = 15.000

ProjectAutoV2.UICorner_49.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_49.Parent = ProjectAutoV2.BankToggle

ProjectAutoV2.Border_13.Name = "Border"
ProjectAutoV2.Border_13.Parent = ProjectAutoV2.BankToggle
ProjectAutoV2.Border_13.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.Border_13.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.Border_13.Size = UDim2.new(0, 281, 0, 27)
ProjectAutoV2.Border_13.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Border_13.Text = ""
ProjectAutoV2.Border_13.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Border_13.TextSize = 15.000

ProjectAutoV2.UICorner_50.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_50.Parent = ProjectAutoV2.Border_13

ProjectAutoV2.BankToggleButton.Name = "BankToggleButton"
ProjectAutoV2.BankToggleButton.Parent = ProjectAutoV2.BankToggle
ProjectAutoV2.BankToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.BankToggleButton.Position = UDim2.new(0, 5, 0, 5)
ProjectAutoV2.BankToggleButton.Size = UDim2.new(0, 16, 0, 16)
ProjectAutoV2.BankToggleButton.ZIndex = 4

ProjectAutoV2.UICorner_51.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_51.Parent = ProjectAutoV2.BankToggleButton

ProjectAutoV2.ImageLabel_12.Parent = ProjectAutoV2.BankToggleButton
ProjectAutoV2.ImageLabel_12.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.ImageLabel_12.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.ImageLabel_12.Size = UDim2.new(0, 18, 0, 18)
ProjectAutoV2.ImageLabel_12.ZIndex = 3

ProjectAutoV2.UICorner_52.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_52.Parent = ProjectAutoV2.ImageLabel_12

ProjectAutoV2.Gap.Name = "Gap"
ProjectAutoV2.Gap.Parent = ProjectAutoV2.LocationsTab
ProjectAutoV2.Gap.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.Gap.BackgroundTransparency = 1.000
ProjectAutoV2.Gap.BorderSizePixel = 0
ProjectAutoV2.Gap.LayoutOrder = -1
ProjectAutoV2.Gap.Font = Enum.Font.SourceSans
ProjectAutoV2.Gap.Text = ""
ProjectAutoV2.Gap.TextColor3 = Color3.fromRGB(0, 0, 0)
ProjectAutoV2.Gap.TextSize = 14.000
ProjectAutoV2.Gap.TextTransparency = 1.000

ProjectAutoV2.SettingsTab.Name = "SettingsTab"
ProjectAutoV2.SettingsTab.Parent = ProjectAutoV2.BackGround
ProjectAutoV2.SettingsTab.Active = true
ProjectAutoV2.SettingsTab.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
ProjectAutoV2.SettingsTab.BorderSizePixel = 0
ProjectAutoV2.SettingsTab.Position = UDim2.new(0, 101, 0, 51)
ProjectAutoV2.SettingsTab.Size = UDim2.new(0, 299, 0, 399)
ProjectAutoV2.SettingsTab.AutomaticCanvasSize = "Y"
ProjectAutoV2.SettingsTab.CanvasSize = UDim2.new(0, 0, 0.790000021, 0)
ProjectAutoV2.SettingsTab.ScrollBarThickness = 5

ProjectAutoV2.UIListLayout_3.Parent = ProjectAutoV2.SettingsTab
ProjectAutoV2.UIListLayout_3.HorizontalAlignment = Enum.HorizontalAlignment.Center
ProjectAutoV2.UIListLayout_3.SortOrder = Enum.SortOrder.LayoutOrder
ProjectAutoV2.UIListLayout_3.Padding = UDim.new(0, 10)

ProjectAutoV2.MainSection.Name = "MainSection"
ProjectAutoV2.MainSection.Parent = ProjectAutoV2.SettingsTab
ProjectAutoV2.MainSection.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
ProjectAutoV2.MainSection.LayoutOrder = 2
ProjectAutoV2.MainSection.Position = UDim2.new(0, 10, 0, 10)
ProjectAutoV2.MainSection.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.MainSection.ZIndex = 2
ProjectAutoV2.MainSection.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.MainSection.Text = ""
ProjectAutoV2.MainSection.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.MainSection.TextSize = 15.000

ProjectAutoV2.UICorner_53.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_53.Parent = ProjectAutoV2.MainSection

ProjectAutoV2.Border_14.Name = "Border"
ProjectAutoV2.Border_14.Parent = ProjectAutoV2.MainSection
ProjectAutoV2.Border_14.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.Border_14.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.Border_14.Size = UDim2.new(0, 281, 0, 27)
ProjectAutoV2.Border_14.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Border_14.Text = ""
ProjectAutoV2.Border_14.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Border_14.TextSize = 15.000

ProjectAutoV2.UICorner_54.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_54.Parent = ProjectAutoV2.Border_14

ProjectAutoV2.Title.Name = "Title"
ProjectAutoV2.Title.Parent = ProjectAutoV2.MainSection
ProjectAutoV2.Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.Title.BackgroundTransparency = 1.000
ProjectAutoV2.Title.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.Title.ZIndex = 3
ProjectAutoV2.Title.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Title.Text = "Main"
ProjectAutoV2.Title.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Title.TextSize = 15.000
ProjectAutoV2.Title.TextStrokeTransparency = 0.000

ProjectAutoV2.TeleportToggle.Name = "TeleportToggle"
ProjectAutoV2.TeleportToggle.Parent = ProjectAutoV2.MainSection
ProjectAutoV2.TeleportToggle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.TeleportToggle.LayoutOrder = 2
ProjectAutoV2.TeleportToggle.Position = UDim2.new(0, 0, 0, 25)
ProjectAutoV2.TeleportToggle.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.TeleportToggle.Visible = false
ProjectAutoV2.TeleportToggle.ZIndex = 3
ProjectAutoV2.TeleportToggle.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.TeleportToggle.Text = "Teleport"
ProjectAutoV2.TeleportToggle.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.TeleportToggle.TextSize = 15.000

ProjectAutoV2.UICorner_55.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_55.Parent = ProjectAutoV2.TeleportToggle

ProjectAutoV2.TeleportToggleButton.Name = "TeleportToggleButton"
ProjectAutoV2.TeleportToggleButton.Parent = ProjectAutoV2.TeleportToggle
ProjectAutoV2.TeleportToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.TeleportToggleButton.Position = UDim2.new(0, 5, 0, 5)
ProjectAutoV2.TeleportToggleButton.Size = UDim2.new(0, 16, 0, 16)
ProjectAutoV2.TeleportToggleButton.ZIndex = 5

ProjectAutoV2.UICorner_56.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_56.Parent = ProjectAutoV2.TeleportToggleButton

ProjectAutoV2.ImageLabel_13.Parent = ProjectAutoV2.TeleportToggleButton
ProjectAutoV2.ImageLabel_13.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.ImageLabel_13.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.ImageLabel_13.Size = UDim2.new(0, 18, 0, 18)
ProjectAutoV2.ImageLabel_13.ZIndex = 4

ProjectAutoV2.UICorner_57.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_57.Parent = ProjectAutoV2.ImageLabel_13

ProjectAutoV2.WaitToggle.Name = "WaitToggle"
ProjectAutoV2.WaitToggle.Parent = ProjectAutoV2.MainSection
ProjectAutoV2.WaitToggle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.WaitToggle.LayoutOrder = 2
ProjectAutoV2.WaitToggle.Position = UDim2.new(0, 0, 0, 55)
ProjectAutoV2.WaitToggle.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.WaitToggle.Visible = false
ProjectAutoV2.WaitToggle.ZIndex = 3
ProjectAutoV2.WaitToggle.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.WaitToggle.Text = "Wait"
ProjectAutoV2.WaitToggle.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.WaitToggle.TextSize = 15.000

ProjectAutoV2.UICorner_58.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_58.Parent = ProjectAutoV2.WaitToggle

ProjectAutoV2.WaitToggleButton.Name = "WaitToggleButton"
ProjectAutoV2.WaitToggleButton.Parent = ProjectAutoV2.WaitToggle
ProjectAutoV2.WaitToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.WaitToggleButton.Position = UDim2.new(0, 5, 0, 5)
ProjectAutoV2.WaitToggleButton.Size = UDim2.new(0, 16, 0, 16)
ProjectAutoV2.WaitToggleButton.ZIndex = 5

ProjectAutoV2.UICorner_59.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_59.Parent = ProjectAutoV2.WaitToggleButton

ProjectAutoV2.ImageLabel_14.Parent = ProjectAutoV2.WaitToggleButton
ProjectAutoV2.ImageLabel_14.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.ImageLabel_14.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.ImageLabel_14.Size = UDim2.new(0, 18, 0, 18)
ProjectAutoV2.ImageLabel_14.ZIndex = 4

ProjectAutoV2.UICorner_60.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_60.Parent = ProjectAutoV2.ImageLabel_14

ProjectAutoV2.BotSpeedSlider.Name = "BotSpeedSlider"
ProjectAutoV2.BotSpeedSlider.Parent = ProjectAutoV2.MainSection
ProjectAutoV2.BotSpeedSlider.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
ProjectAutoV2.BotSpeedSlider.BorderColor3 = Color3.fromRGB(200, 0, 0)
ProjectAutoV2.BotSpeedSlider.BorderSizePixel = 0
ProjectAutoV2.BotSpeedSlider.Position = UDim2.new(0, 10, 0, 105)
ProjectAutoV2.BotSpeedSlider.Size = UDim2.new(0, 210, 0, 14)
ProjectAutoV2.BotSpeedSlider.Visible = false
ProjectAutoV2.BotSpeedSlider.ZIndex = 3

ProjectAutoV2.Handle.Name = "Handle"
ProjectAutoV2.Handle.Parent = ProjectAutoV2.BotSpeedSlider
ProjectAutoV2.Handle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.Handle.BorderColor3 = Color3.fromRGB(0, 255, 255)
ProjectAutoV2.Handle.Position = UDim2.new(0, 0, 0, -3)
ProjectAutoV2.Handle.Size = UDim2.new(0, 10, 0, 20)
ProjectAutoV2.Handle.ZIndex = 4

ProjectAutoV2.UICorner_61.CornerRadius = UDim.new(0, 3)
ProjectAutoV2.UICorner_61.Parent = ProjectAutoV2.Handle

ProjectAutoV2.BackGround_3.Name = "BackGround"
ProjectAutoV2.BackGround_3.Parent = ProjectAutoV2.Handle
ProjectAutoV2.BackGround_3.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.BackGround_3.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.BackGround_3.Size = UDim2.new(0, 12, 0, 22)
ProjectAutoV2.BackGround_3.ZIndex = 3

ProjectAutoV2.UICorner_62.CornerRadius = UDim.new(0, 3)
ProjectAutoV2.UICorner_62.Parent = ProjectAutoV2.BackGround_3

ProjectAutoV2.BotSpeedValue.Name = "BotSpeedValue"
ProjectAutoV2.BotSpeedValue.Parent = ProjectAutoV2.BotSpeedSlider
ProjectAutoV2.BotSpeedValue.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.BotSpeedValue.BackgroundTransparency = 1.000
ProjectAutoV2.BotSpeedValue.Position = UDim2.new(0, 215, 0, -3)
ProjectAutoV2.BotSpeedValue.Size = UDim2.new(0, 50, 0, 20)
ProjectAutoV2.BotSpeedValue.ZIndex = 3
ProjectAutoV2.BotSpeedValue.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.BotSpeedValue.Text = "0"
ProjectAutoV2.BotSpeedValue.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.BotSpeedValue.TextSize = 15.000
ProjectAutoV2.BotSpeedValue.TextStrokeTransparency = 0.000

ProjectAutoV2.Title_2.Name = "Title"
ProjectAutoV2.Title_2.Parent = ProjectAutoV2.BotSpeedSlider
ProjectAutoV2.Title_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.Title_2.BackgroundTransparency = 1.000
ProjectAutoV2.Title_2.Position = UDim2.new(0, -10, 0, -20)
ProjectAutoV2.Title_2.Size = UDim2.new(0, 279, 0, 15)
ProjectAutoV2.Title_2.ZIndex = 3
ProjectAutoV2.Title_2.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Title_2.Text = "Speed"
ProjectAutoV2.Title_2.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Title_2.TextSize = 15.000
ProjectAutoV2.Title_2.TextStrokeTransparency = 0.000

ProjectAutoV2.PathSpeedSlider.Name = "PathSpeedSlider"
ProjectAutoV2.PathSpeedSlider.Parent = ProjectAutoV2.MainSection
ProjectAutoV2.PathSpeedSlider.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
ProjectAutoV2.PathSpeedSlider.BorderColor3 = Color3.fromRGB(200, 0, 0)
ProjectAutoV2.PathSpeedSlider.BorderSizePixel = 0
ProjectAutoV2.PathSpeedSlider.Position = UDim2.new(0, 10, 0, 145)
ProjectAutoV2.PathSpeedSlider.Size = UDim2.new(0, 210, 0, 14)
ProjectAutoV2.PathSpeedSlider.Visible = false
ProjectAutoV2.PathSpeedSlider.ZIndex = 3

ProjectAutoV2.Handle_2.Name = "Handle"
ProjectAutoV2.Handle_2.Parent = ProjectAutoV2.PathSpeedSlider
ProjectAutoV2.Handle_2.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.Handle_2.BorderColor3 = Color3.fromRGB(0, 255, 255)
ProjectAutoV2.Handle_2.Position = UDim2.new(0, 0, 0, -3)
ProjectAutoV2.Handle_2.Size = UDim2.new(0, 10, 0, 20)
ProjectAutoV2.Handle_2.ZIndex = 4

ProjectAutoV2.UICorner_63.CornerRadius = UDim.new(0, 3)
ProjectAutoV2.UICorner_63.Parent = ProjectAutoV2.Handle_2

ProjectAutoV2.BackGround_4.Name = "BackGround"
ProjectAutoV2.BackGround_4.Parent = ProjectAutoV2.Handle_2
ProjectAutoV2.BackGround_4.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.BackGround_4.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.BackGround_4.Size = UDim2.new(0, 12, 0, 22)
ProjectAutoV2.BackGround_4.ZIndex = 3

ProjectAutoV2.UICorner_64.CornerRadius = UDim.new(0, 3)
ProjectAutoV2.UICorner_64.Parent = ProjectAutoV2.BackGround_4

ProjectAutoV2.PathSpeedValue.Name = "PathSpeedValue"
ProjectAutoV2.PathSpeedValue.Parent = ProjectAutoV2.PathSpeedSlider
ProjectAutoV2.PathSpeedValue.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.PathSpeedValue.BackgroundTransparency = 1.000
ProjectAutoV2.PathSpeedValue.Position = UDim2.new(0, 215, 0, -3)
ProjectAutoV2.PathSpeedValue.Size = UDim2.new(0, 50, 0, 20)
ProjectAutoV2.PathSpeedValue.ZIndex = 3
ProjectAutoV2.PathSpeedValue.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.PathSpeedValue.Text = "0"
ProjectAutoV2.PathSpeedValue.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.PathSpeedValue.TextSize = 15.000
ProjectAutoV2.PathSpeedValue.TextStrokeTransparency = 0.000

ProjectAutoV2.Title_3.Name = "Title"
ProjectAutoV2.Title_3.Parent = ProjectAutoV2.PathSpeedSlider
ProjectAutoV2.Title_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.Title_3.BackgroundTransparency = 1.000
ProjectAutoV2.Title_3.Position = UDim2.new(0, -10, 0, -20)
ProjectAutoV2.Title_3.Size = UDim2.new(0, 279, 0, 15)
ProjectAutoV2.Title_3.ZIndex = 3
ProjectAutoV2.Title_3.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Title_3.Text = "Path Speed"
ProjectAutoV2.Title_3.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Title_3.TextSize = 15.000
ProjectAutoV2.Title_3.TextStrokeTransparency = 0.000

ProjectAutoV2.Button.Name = "Button"
ProjectAutoV2.Button.Parent = ProjectAutoV2.MainSection
ProjectAutoV2.Button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.Button.BackgroundTransparency = 1.000
ProjectAutoV2.Button.Position = UDim2.new(0, 5, 0, 5)
ProjectAutoV2.Button.Rotation = 90.000
ProjectAutoV2.Button.Size = UDim2.new(0, 15, 0, 15)
ProjectAutoV2.Button.ZIndex = 3
ProjectAutoV2.Button.Image = "http://www.roblox.com/asset/?id=3173271667"

ProjectAutoV2.Gap_2.Name = "Gap"
ProjectAutoV2.Gap_2.Parent = ProjectAutoV2.SettingsTab
ProjectAutoV2.Gap_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.Gap_2.BackgroundTransparency = 1.000
ProjectAutoV2.Gap_2.BorderSizePixel = 0
ProjectAutoV2.Gap_2.LayoutOrder = -1
ProjectAutoV2.Gap_2.Font = Enum.Font.SourceSans
ProjectAutoV2.Gap_2.Text = ""
ProjectAutoV2.Gap_2.TextColor3 = Color3.fromRGB(0, 0, 0)
ProjectAutoV2.Gap_2.TextSize = 14.000
ProjectAutoV2.Gap_2.TextTransparency = 1.000

ProjectAutoV2.MenuToggle.Name = "MenuToggle"
ProjectAutoV2.MenuToggle.Parent = ProjectAutoV2.SettingsTab
ProjectAutoV2.MenuToggle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.MenuToggle.LayoutOrder = 6
ProjectAutoV2.MenuToggle.Position = UDim2.new(0, 10, 0, 45)
ProjectAutoV2.MenuToggle.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.MenuToggle.ZIndex = 2
ProjectAutoV2.MenuToggle.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.MenuToggle.Text = "Toggle Menu          "
ProjectAutoV2.MenuToggle.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.MenuToggle.TextSize = 15.000
ProjectAutoV2.MenuToggle.TextXAlignment = Enum.TextXAlignment.Right

ProjectAutoV2.UICorner_65.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_65.Parent = ProjectAutoV2.MenuToggle

ProjectAutoV2.Border_15.Name = "Border"
ProjectAutoV2.Border_15.Parent = ProjectAutoV2.MenuToggle
ProjectAutoV2.Border_15.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.Border_15.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.Border_15.Size = UDim2.new(0, 281, 0, 27)
ProjectAutoV2.Border_15.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Border_15.Text = ""
ProjectAutoV2.Border_15.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Border_15.TextSize = 15.000

ProjectAutoV2.UICorner_66.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_66.Parent = ProjectAutoV2.Border_15

ProjectAutoV2.MenuToggleKey.Name = "MenuToggleKey"
ProjectAutoV2.MenuToggleKey.Parent = ProjectAutoV2.MenuToggle
ProjectAutoV2.MenuToggleKey.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.MenuToggleKey.Position = UDim2.new(0, 5, 0, 5)
ProjectAutoV2.MenuToggleKey.Size = UDim2.new(0, 120, 0, 16)
ProjectAutoV2.MenuToggleKey.ZIndex = 4
ProjectAutoV2.MenuToggleKey.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.MenuToggleKey.Text = "RightShift"
ProjectAutoV2.MenuToggleKey.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.MenuToggleKey.TextSize = 15.000

ProjectAutoV2.UICorner_67.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_67.Parent = ProjectAutoV2.MenuToggleKey

ProjectAutoV2.ImageLabel_15.Parent = ProjectAutoV2.MenuToggleKey
ProjectAutoV2.ImageLabel_15.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.ImageLabel_15.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.ImageLabel_15.Size = UDim2.new(0, 122, 0, 18)
ProjectAutoV2.ImageLabel_15.ZIndex = 3

ProjectAutoV2.UICorner_68.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_68.Parent = ProjectAutoV2.ImageLabel_15

ProjectAutoV2.ResetButton.Name = "ResetButton"
ProjectAutoV2.ResetButton.Parent = ProjectAutoV2.SettingsTab
ProjectAutoV2.ResetButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.ResetButton.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.ResetButton.ZIndex = 2
ProjectAutoV2.ResetButton.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.ResetButton.Text = "Reset"
ProjectAutoV2.ResetButton.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.ResetButton.TextSize = 15.000
ProjectAutoV2.ResetButton.TextStrokeTransparency = 0.000

ProjectAutoV2.UICorner_69.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_69.Parent = ProjectAutoV2.ResetButton

ProjectAutoV2.Border_16.Name = "Border"
ProjectAutoV2.Border_16.Parent = ProjectAutoV2.ResetButton
ProjectAutoV2.Border_16.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.Border_16.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.Border_16.Size = UDim2.new(0, 281, 0, 27)
ProjectAutoV2.Border_16.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Border_16.Text = ""
ProjectAutoV2.Border_16.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Border_16.TextSize = 15.000

ProjectAutoV2.UICorner_70.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_70.Parent = ProjectAutoV2.Border_16

ProjectAutoV2.KillAuraSection.Name = "KillAuraSection"
ProjectAutoV2.KillAuraSection.Parent = ProjectAutoV2.SettingsTab
ProjectAutoV2.KillAuraSection.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
ProjectAutoV2.KillAuraSection.LayoutOrder = 3
ProjectAutoV2.KillAuraSection.Position = UDim2.new(0, 10, 0, 115)
ProjectAutoV2.KillAuraSection.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.KillAuraSection.ZIndex = 2
ProjectAutoV2.KillAuraSection.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.KillAuraSection.Text = ""
ProjectAutoV2.KillAuraSection.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.KillAuraSection.TextSize = 15.000

ProjectAutoV2.UICorner_71.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_71.Parent = ProjectAutoV2.KillAuraSection

ProjectAutoV2.Border_17.Name = "Border"
ProjectAutoV2.Border_17.Parent = ProjectAutoV2.KillAuraSection
ProjectAutoV2.Border_17.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.Border_17.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.Border_17.Size = UDim2.new(0, 281, 0, 27)
ProjectAutoV2.Border_17.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Border_17.Text = ""
ProjectAutoV2.Border_17.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Border_17.TextSize = 15.000

ProjectAutoV2.UICorner_72.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_72.Parent = ProjectAutoV2.Border_17

ProjectAutoV2.Title_4.Name = "Title"
ProjectAutoV2.Title_4.Parent = ProjectAutoV2.KillAuraSection
ProjectAutoV2.Title_4.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.Title_4.BackgroundTransparency = 1.000
ProjectAutoV2.Title_4.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.Title_4.ZIndex = 3
ProjectAutoV2.Title_4.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Title_4.Text = "Kill Aura"
ProjectAutoV2.Title_4.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Title_4.TextSize = 15.000
ProjectAutoV2.Title_4.TextStrokeTransparency = 0.000

ProjectAutoV2.KillAuraToggle.Name = "KillAuraToggle"
ProjectAutoV2.KillAuraToggle.Parent = ProjectAutoV2.KillAuraSection
ProjectAutoV2.KillAuraToggle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.KillAuraToggle.LayoutOrder = 2
ProjectAutoV2.KillAuraToggle.Position = UDim2.new(0, 0, 0, 25)
ProjectAutoV2.KillAuraToggle.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.KillAuraToggle.Visible = false
ProjectAutoV2.KillAuraToggle.ZIndex = 3
ProjectAutoV2.KillAuraToggle.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.KillAuraToggle.Text = "Enabled"
ProjectAutoV2.KillAuraToggle.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.KillAuraToggle.TextSize = 15.000

ProjectAutoV2.UICorner_73.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_73.Parent = ProjectAutoV2.KillAuraToggle

ProjectAutoV2.KillAuraToggleButton.Name = "KillAuraToggleButton"
ProjectAutoV2.KillAuraToggleButton.Parent = ProjectAutoV2.KillAuraToggle
ProjectAutoV2.KillAuraToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.KillAuraToggleButton.Position = UDim2.new(0, 5, 0, 5)
ProjectAutoV2.KillAuraToggleButton.Size = UDim2.new(0, 16, 0, 16)
ProjectAutoV2.KillAuraToggleButton.ZIndex = 5

ProjectAutoV2.UICorner_74.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_74.Parent = ProjectAutoV2.KillAuraToggleButton

ProjectAutoV2.ImageLabel_16.Parent = ProjectAutoV2.KillAuraToggleButton
ProjectAutoV2.ImageLabel_16.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.ImageLabel_16.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.ImageLabel_16.Size = UDim2.new(0, 18, 0, 18)
ProjectAutoV2.ImageLabel_16.ZIndex = 4

ProjectAutoV2.UICorner_75.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_75.Parent = ProjectAutoV2.ImageLabel_16

ProjectAutoV2.KillAuraSlider.Name = "KillAuraSlider"
ProjectAutoV2.KillAuraSlider.Parent = ProjectAutoV2.KillAuraSection
ProjectAutoV2.KillAuraSlider.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
ProjectAutoV2.KillAuraSlider.BorderColor3 = Color3.fromRGB(200, 0, 0)
ProjectAutoV2.KillAuraSlider.BorderSizePixel = 0
ProjectAutoV2.KillAuraSlider.Position = UDim2.new(0, 10, 0, 75)
ProjectAutoV2.KillAuraSlider.Size = UDim2.new(0, 210, 0, 14)
ProjectAutoV2.KillAuraSlider.Visible = false
ProjectAutoV2.KillAuraSlider.ZIndex = 3

ProjectAutoV2.Handle_3.Name = "Handle"
ProjectAutoV2.Handle_3.Parent = ProjectAutoV2.KillAuraSlider
ProjectAutoV2.Handle_3.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.Handle_3.BorderColor3 = Color3.fromRGB(0, 255, 255)
ProjectAutoV2.Handle_3.Position = UDim2.new(0, 0, 0, -3)
ProjectAutoV2.Handle_3.Size = UDim2.new(0, 10, 0, 20)
ProjectAutoV2.Handle_3.ZIndex = 4

ProjectAutoV2.UICorner_76.CornerRadius = UDim.new(0, 3)
ProjectAutoV2.UICorner_76.Parent = ProjectAutoV2.Handle_3

ProjectAutoV2.BackGround_5.Name = "BackGround"
ProjectAutoV2.BackGround_5.Parent = ProjectAutoV2.Handle_3
ProjectAutoV2.BackGround_5.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.BackGround_5.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.BackGround_5.Size = UDim2.new(0, 12, 0, 22)
ProjectAutoV2.BackGround_5.ZIndex = 3

ProjectAutoV2.UICorner_77.CornerRadius = UDim.new(0, 3)
ProjectAutoV2.UICorner_77.Parent = ProjectAutoV2.BackGround_5

ProjectAutoV2.KillAuraValue.Name = "KillAuraValue"
ProjectAutoV2.KillAuraValue.Parent = ProjectAutoV2.KillAuraSlider
ProjectAutoV2.KillAuraValue.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.KillAuraValue.BackgroundTransparency = 1.000
ProjectAutoV2.KillAuraValue.Position = UDim2.new(0, 215, 0, -3)
ProjectAutoV2.KillAuraValue.Size = UDim2.new(0, 50, 0, 20)
ProjectAutoV2.KillAuraValue.ZIndex = 3
ProjectAutoV2.KillAuraValue.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.KillAuraValue.Text = "0"
ProjectAutoV2.KillAuraValue.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.KillAuraValue.TextSize = 15.000
ProjectAutoV2.KillAuraValue.TextStrokeTransparency = 0.000

ProjectAutoV2.Title_5.Name = "Title"
ProjectAutoV2.Title_5.Parent = ProjectAutoV2.KillAuraSlider
ProjectAutoV2.Title_5.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.Title_5.BackgroundTransparency = 1.000
ProjectAutoV2.Title_5.Position = UDim2.new(0, -10, 0, -20)
ProjectAutoV2.Title_5.Size = UDim2.new(0, 279, 0, 15)
ProjectAutoV2.Title_5.ZIndex = 3
ProjectAutoV2.Title_5.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Title_5.Text = "Distance"
ProjectAutoV2.Title_5.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Title_5.TextSize = 15.000
ProjectAutoV2.Title_5.TextStrokeTransparency = 0.000

ProjectAutoV2.Button_2.Name = "Button"
ProjectAutoV2.Button_2.Parent = ProjectAutoV2.KillAuraSection
ProjectAutoV2.Button_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.Button_2.BackgroundTransparency = 1.000
ProjectAutoV2.Button_2.Position = UDim2.new(0, 5, 0, 5)
ProjectAutoV2.Button_2.Rotation = 90.000
ProjectAutoV2.Button_2.Size = UDim2.new(0, 15, 0, 15)
ProjectAutoV2.Button_2.ZIndex = 3
ProjectAutoV2.Button_2.Image = "http://www.roblox.com/asset/?id=3173271667"

ProjectAutoV2.AvoidCopSection.Name = "AvoidCopSection"
ProjectAutoV2.AvoidCopSection.Parent = ProjectAutoV2.SettingsTab
ProjectAutoV2.AvoidCopSection.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
ProjectAutoV2.AvoidCopSection.LayoutOrder = 4
ProjectAutoV2.AvoidCopSection.Position = UDim2.new(0, 10, 0, 115)
ProjectAutoV2.AvoidCopSection.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.AvoidCopSection.ZIndex = 2
ProjectAutoV2.AvoidCopSection.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.AvoidCopSection.Text = ""
ProjectAutoV2.AvoidCopSection.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.AvoidCopSection.TextSize = 15.000

ProjectAutoV2.UICorner_78.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_78.Parent = ProjectAutoV2.AvoidCopSection

ProjectAutoV2.Border_18.Name = "Border"
ProjectAutoV2.Border_18.Parent = ProjectAutoV2.AvoidCopSection
ProjectAutoV2.Border_18.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.Border_18.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.Border_18.Size = UDim2.new(0, 281, 0, 27)
ProjectAutoV2.Border_18.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Border_18.Text = ""
ProjectAutoV2.Border_18.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Border_18.TextSize = 15.000

ProjectAutoV2.UICorner_79.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_79.Parent = ProjectAutoV2.Border_18

ProjectAutoV2.Title_6.Name = "Title"
ProjectAutoV2.Title_6.Parent = ProjectAutoV2.AvoidCopSection
ProjectAutoV2.Title_6.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.Title_6.BackgroundTransparency = 1.000
ProjectAutoV2.Title_6.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.Title_6.ZIndex = 3
ProjectAutoV2.Title_6.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Title_6.Text = "Cop Avoid"
ProjectAutoV2.Title_6.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Title_6.TextSize = 15.000
ProjectAutoV2.Title_6.TextStrokeTransparency = 0.000

ProjectAutoV2.CopAvoidToggle.Name = "CopAvoidToggle"
ProjectAutoV2.CopAvoidToggle.Parent = ProjectAutoV2.AvoidCopSection
ProjectAutoV2.CopAvoidToggle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.CopAvoidToggle.LayoutOrder = 2
ProjectAutoV2.CopAvoidToggle.Position = UDim2.new(0, 0, 0, 25)
ProjectAutoV2.CopAvoidToggle.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.CopAvoidToggle.Visible = false
ProjectAutoV2.CopAvoidToggle.ZIndex = 3
ProjectAutoV2.CopAvoidToggle.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.CopAvoidToggle.Text = "Enabled"
ProjectAutoV2.CopAvoidToggle.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.CopAvoidToggle.TextSize = 15.000

ProjectAutoV2.UICorner_80.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_80.Parent = ProjectAutoV2.CopAvoidToggle

ProjectAutoV2.CopAvoidToggleButton.Name = "CopAvoidToggleButton"
ProjectAutoV2.CopAvoidToggleButton.Parent = ProjectAutoV2.CopAvoidToggle
ProjectAutoV2.CopAvoidToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.CopAvoidToggleButton.Position = UDim2.new(0, 5, 0, 5)
ProjectAutoV2.CopAvoidToggleButton.Size = UDim2.new(0, 16, 0, 16)
ProjectAutoV2.CopAvoidToggleButton.ZIndex = 5

ProjectAutoV2.UICorner_81.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_81.Parent = ProjectAutoV2.CopAvoidToggleButton

ProjectAutoV2.ImageLabel_17.Parent = ProjectAutoV2.CopAvoidToggleButton
ProjectAutoV2.ImageLabel_17.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.ImageLabel_17.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.ImageLabel_17.Size = UDim2.new(0, 18, 0, 18)
ProjectAutoV2.ImageLabel_17.ZIndex = 4

ProjectAutoV2.UICorner_82.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_82.Parent = ProjectAutoV2.ImageLabel_17

ProjectAutoV2.CopAvoidSlider.Name = "CopAvoidSlider"
ProjectAutoV2.CopAvoidSlider.Parent = ProjectAutoV2.AvoidCopSection
ProjectAutoV2.CopAvoidSlider.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
ProjectAutoV2.CopAvoidSlider.BorderColor3 = Color3.fromRGB(200, 0, 0)
ProjectAutoV2.CopAvoidSlider.BorderSizePixel = 0
ProjectAutoV2.CopAvoidSlider.Position = UDim2.new(0, 10, 0, 75)
ProjectAutoV2.CopAvoidSlider.Size = UDim2.new(0, 210, 0, 14)
ProjectAutoV2.CopAvoidSlider.Visible = false
ProjectAutoV2.CopAvoidSlider.ZIndex = 3

ProjectAutoV2.Handle_4.Name = "Handle"
ProjectAutoV2.Handle_4.Parent = ProjectAutoV2.CopAvoidSlider
ProjectAutoV2.Handle_4.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.Handle_4.BorderColor3 = Color3.fromRGB(0, 255, 255)
ProjectAutoV2.Handle_4.Position = UDim2.new(0, 0, 0, -3)
ProjectAutoV2.Handle_4.Size = UDim2.new(0, 10, 0, 20)
ProjectAutoV2.Handle_4.ZIndex = 4

ProjectAutoV2.UICorner_83.CornerRadius = UDim.new(0, 3)
ProjectAutoV2.UICorner_83.Parent = ProjectAutoV2.Handle_4

ProjectAutoV2.BackGround_6.Name = "BackGround"
ProjectAutoV2.BackGround_6.Parent = ProjectAutoV2.Handle_4
ProjectAutoV2.BackGround_6.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.BackGround_6.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.BackGround_6.Size = UDim2.new(0, 12, 0, 22)
ProjectAutoV2.BackGround_6.ZIndex = 3

ProjectAutoV2.UICorner_84.CornerRadius = UDim.new(0, 3)
ProjectAutoV2.UICorner_84.Parent = ProjectAutoV2.BackGround_6

ProjectAutoV2.CopAvoidValue.Name = "CopAvoidValue"
ProjectAutoV2.CopAvoidValue.Parent = ProjectAutoV2.CopAvoidSlider
ProjectAutoV2.CopAvoidValue.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.CopAvoidValue.BackgroundTransparency = 1.000
ProjectAutoV2.CopAvoidValue.Position = UDim2.new(0, 215, 0, -3)
ProjectAutoV2.CopAvoidValue.Size = UDim2.new(0, 50, 0, 20)
ProjectAutoV2.CopAvoidValue.ZIndex = 3
ProjectAutoV2.CopAvoidValue.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.CopAvoidValue.Text = "0"
ProjectAutoV2.CopAvoidValue.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.CopAvoidValue.TextSize = 15.000
ProjectAutoV2.CopAvoidValue.TextStrokeTransparency = 0.000

ProjectAutoV2.Title_7.Name = "Title"
ProjectAutoV2.Title_7.Parent = ProjectAutoV2.CopAvoidSlider
ProjectAutoV2.Title_7.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.Title_7.BackgroundTransparency = 1.000
ProjectAutoV2.Title_7.Position = UDim2.new(0, -10, 0, -20)
ProjectAutoV2.Title_7.Size = UDim2.new(0, 279, 0, 15)
ProjectAutoV2.Title_7.ZIndex = 3
ProjectAutoV2.Title_7.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Title_7.Text = "Distance"
ProjectAutoV2.Title_7.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Title_7.TextSize = 15.000
ProjectAutoV2.Title_7.TextStrokeTransparency = 0.000

ProjectAutoV2.Button_3.Name = "Button"
ProjectAutoV2.Button_3.Parent = ProjectAutoV2.AvoidCopSection
ProjectAutoV2.Button_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.Button_3.BackgroundTransparency = 1.000
ProjectAutoV2.Button_3.Position = UDim2.new(0, 5, 0, 5)
ProjectAutoV2.Button_3.Rotation = 90.000
ProjectAutoV2.Button_3.Size = UDim2.new(0, 15, 0, 15)
ProjectAutoV2.Button_3.ZIndex = 3
ProjectAutoV2.Button_3.Image = "http://www.roblox.com/asset/?id=3173271667"

ProjectAutoV2.ServerHopSection.Name = "ServerHopSection"
ProjectAutoV2.ServerHopSection.Parent = ProjectAutoV2.SettingsTab
ProjectAutoV2.ServerHopSection.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
ProjectAutoV2.ServerHopSection.LayoutOrder = 5
ProjectAutoV2.ServerHopSection.Position = UDim2.new(0, 10, 0, 185)
ProjectAutoV2.ServerHopSection.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.ServerHopSection.ZIndex = 2
ProjectAutoV2.ServerHopSection.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.ServerHopSection.Text = ""
ProjectAutoV2.ServerHopSection.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.ServerHopSection.TextSize = 15.000

ProjectAutoV2.UICorner_85.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_85.Parent = ProjectAutoV2.ServerHopSection

ProjectAutoV2.Border_19.Name = "Border"
ProjectAutoV2.Border_19.Parent = ProjectAutoV2.ServerHopSection
ProjectAutoV2.Border_19.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.Border_19.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.Border_19.Size = UDim2.new(0, 281, 0, 27)
ProjectAutoV2.Border_19.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Border_19.Text = ""
ProjectAutoV2.Border_19.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Border_19.TextSize = 15.000

ProjectAutoV2.UICorner_86.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_86.Parent = ProjectAutoV2.Border_19

ProjectAutoV2.Title_8.Name = "Title"
ProjectAutoV2.Title_8.Parent = ProjectAutoV2.ServerHopSection
ProjectAutoV2.Title_8.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.Title_8.BackgroundTransparency = 1.000
ProjectAutoV2.Title_8.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.Title_8.ZIndex = 3
ProjectAutoV2.Title_8.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Title_8.Text = "Server Hop"
ProjectAutoV2.Title_8.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Title_8.TextSize = 15.000
ProjectAutoV2.Title_8.TextStrokeTransparency = 0.000

ProjectAutoV2.ServerHopToggle.Name = "ServerHopToggle"
ProjectAutoV2.ServerHopToggle.Parent = ProjectAutoV2.ServerHopSection
ProjectAutoV2.ServerHopToggle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.ServerHopToggle.LayoutOrder = 2
ProjectAutoV2.ServerHopToggle.Position = UDim2.new(0, 0, 0, 25)
ProjectAutoV2.ServerHopToggle.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.ServerHopToggle.Visible = false
ProjectAutoV2.ServerHopToggle.ZIndex = 3
ProjectAutoV2.ServerHopToggle.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.ServerHopToggle.Text = "Enabled"
ProjectAutoV2.ServerHopToggle.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.ServerHopToggle.TextSize = 15.000

ProjectAutoV2.UICorner_87.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_87.Parent = ProjectAutoV2.ServerHopToggle

ProjectAutoV2.ServerHopToggleButton.Name = "ServerHopToggleButton"
ProjectAutoV2.ServerHopToggleButton.Parent = ProjectAutoV2.ServerHopToggle
ProjectAutoV2.ServerHopToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.ServerHopToggleButton.Position = UDim2.new(0, 5, 0, 5)
ProjectAutoV2.ServerHopToggleButton.Size = UDim2.new(0, 16, 0, 16)
ProjectAutoV2.ServerHopToggleButton.ZIndex = 5

ProjectAutoV2.UICorner_88.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_88.Parent = ProjectAutoV2.ServerHopToggleButton

ProjectAutoV2.ImageLabel_18.Parent = ProjectAutoV2.ServerHopToggleButton
ProjectAutoV2.ImageLabel_18.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.ImageLabel_18.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.ImageLabel_18.Size = UDim2.new(0, 18, 0, 18)
ProjectAutoV2.ImageLabel_18.ZIndex = 4

ProjectAutoV2.UICorner_89.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_89.Parent = ProjectAutoV2.ImageLabel_18

ProjectAutoV2.MinPlayersSlider.Name = "MinPlayersSlider"
ProjectAutoV2.MinPlayersSlider.Parent = ProjectAutoV2.ServerHopSection
ProjectAutoV2.MinPlayersSlider.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
ProjectAutoV2.MinPlayersSlider.BorderColor3 = Color3.fromRGB(200, 0, 0)
ProjectAutoV2.MinPlayersSlider.BorderSizePixel = 0
ProjectAutoV2.MinPlayersSlider.Position = UDim2.new(0, 10, 0, 75)
ProjectAutoV2.MinPlayersSlider.Size = UDim2.new(0, 210, 0, 14)
ProjectAutoV2.MinPlayersSlider.Visible = false
ProjectAutoV2.MinPlayersSlider.ZIndex = 3

ProjectAutoV2.Handle_5.Name = "Handle"
ProjectAutoV2.Handle_5.Parent = ProjectAutoV2.MinPlayersSlider
ProjectAutoV2.Handle_5.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.Handle_5.BorderColor3 = Color3.fromRGB(0, 255, 255)
ProjectAutoV2.Handle_5.Position = UDim2.new(0, 0, 0, -3)
ProjectAutoV2.Handle_5.Size = UDim2.new(0, 10, 0, 20)
ProjectAutoV2.Handle_5.ZIndex = 4

ProjectAutoV2.UICorner_90.CornerRadius = UDim.new(0, 3)
ProjectAutoV2.UICorner_90.Parent = ProjectAutoV2.Handle_5

ProjectAutoV2.BackGround_7.Name = "BackGround"
ProjectAutoV2.BackGround_7.Parent = ProjectAutoV2.Handle_5
ProjectAutoV2.BackGround_7.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.BackGround_7.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.BackGround_7.Size = UDim2.new(0, 12, 0, 22)
ProjectAutoV2.BackGround_7.ZIndex = 3

ProjectAutoV2.UICorner_91.CornerRadius = UDim.new(0, 3)
ProjectAutoV2.UICorner_91.Parent = ProjectAutoV2.BackGround_7

ProjectAutoV2.MinPlayersValue.Name = "MinPlayersValue"
ProjectAutoV2.MinPlayersValue.Parent = ProjectAutoV2.MinPlayersSlider
ProjectAutoV2.MinPlayersValue.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.MinPlayersValue.BackgroundTransparency = 1.000
ProjectAutoV2.MinPlayersValue.Position = UDim2.new(0, 215, 0, -3)
ProjectAutoV2.MinPlayersValue.Size = UDim2.new(0, 50, 0, 20)
ProjectAutoV2.MinPlayersValue.ZIndex = 3
ProjectAutoV2.MinPlayersValue.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.MinPlayersValue.Text = "0"
ProjectAutoV2.MinPlayersValue.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.MinPlayersValue.TextSize = 15.000
ProjectAutoV2.MinPlayersValue.TextStrokeTransparency = 0.000

ProjectAutoV2.Title_9.Name = "Title"
ProjectAutoV2.Title_9.Parent = ProjectAutoV2.MinPlayersSlider
ProjectAutoV2.Title_9.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.Title_9.BackgroundTransparency = 1.000
ProjectAutoV2.Title_9.Position = UDim2.new(0, -10, 0, -20)
ProjectAutoV2.Title_9.Size = UDim2.new(0, 279, 0, 15)
ProjectAutoV2.Title_9.ZIndex = 3
ProjectAutoV2.Title_9.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Title_9.Text = "Min Players"
ProjectAutoV2.Title_9.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Title_9.TextSize = 15.000
ProjectAutoV2.Title_9.TextStrokeTransparency = 0.000

ProjectAutoV2.Button_4.Name = "Button"
ProjectAutoV2.Button_4.Parent = ProjectAutoV2.ServerHopSection
ProjectAutoV2.Button_4.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.Button_4.BackgroundTransparency = 1.000
ProjectAutoV2.Button_4.Position = UDim2.new(0, 5, 0, 5)
ProjectAutoV2.Button_4.Rotation = 90.000
ProjectAutoV2.Button_4.Size = UDim2.new(0, 15, 0, 15)
ProjectAutoV2.Button_4.ZIndex = 3
ProjectAutoV2.Button_4.Image = "http://www.roblox.com/asset/?id=3173271667"

ProjectAutoV2.MaxPingSlider.Name = "MaxPingSlider"
ProjectAutoV2.MaxPingSlider.Parent = ProjectAutoV2.ServerHopSection
ProjectAutoV2.MaxPingSlider.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
ProjectAutoV2.MaxPingSlider.BorderColor3 = Color3.fromRGB(200, 0, 0)
ProjectAutoV2.MaxPingSlider.BorderSizePixel = 0
ProjectAutoV2.MaxPingSlider.Position = UDim2.new(0, 10, 0, 115)
ProjectAutoV2.MaxPingSlider.Size = UDim2.new(0, 210, 0, 14)
ProjectAutoV2.MaxPingSlider.Visible = false
ProjectAutoV2.MaxPingSlider.ZIndex = 3

ProjectAutoV2.Handle_6.Name = "Handle"
ProjectAutoV2.Handle_6.Parent = ProjectAutoV2.MaxPingSlider
ProjectAutoV2.Handle_6.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.Handle_6.BorderColor3 = Color3.fromRGB(0, 255, 255)
ProjectAutoV2.Handle_6.Position = UDim2.new(0, 0, 0, -3)
ProjectAutoV2.Handle_6.Size = UDim2.new(0, 10, 0, 20)
ProjectAutoV2.Handle_6.ZIndex = 4

ProjectAutoV2.UICorner_92.CornerRadius = UDim.new(0, 3)
ProjectAutoV2.UICorner_92.Parent = ProjectAutoV2.Handle_6

ProjectAutoV2.BackGround_8.Name = "BackGround"
ProjectAutoV2.BackGround_8.Parent = ProjectAutoV2.Handle_6
ProjectAutoV2.BackGround_8.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.BackGround_8.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.BackGround_8.Size = UDim2.new(0, 12, 0, 22)
ProjectAutoV2.BackGround_8.ZIndex = 3

ProjectAutoV2.UICorner_93.CornerRadius = UDim.new(0, 3)
ProjectAutoV2.UICorner_93.Parent = ProjectAutoV2.BackGround_8

ProjectAutoV2.MaxPingValue.Name = "MaxPingValue"
ProjectAutoV2.MaxPingValue.Parent = ProjectAutoV2.MaxPingSlider
ProjectAutoV2.MaxPingValue.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.MaxPingValue.BackgroundTransparency = 1.000
ProjectAutoV2.MaxPingValue.Position = UDim2.new(0, 215, 0, -3)
ProjectAutoV2.MaxPingValue.Size = UDim2.new(0, 50, 0, 20)
ProjectAutoV2.MaxPingValue.ZIndex = 3
ProjectAutoV2.MaxPingValue.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.MaxPingValue.Text = "0"
ProjectAutoV2.MaxPingValue.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.MaxPingValue.TextSize = 15.000
ProjectAutoV2.MaxPingValue.TextStrokeTransparency = 0.000

ProjectAutoV2.Title_10.Name = "Title"
ProjectAutoV2.Title_10.Parent = ProjectAutoV2.MaxPingSlider
ProjectAutoV2.Title_10.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.Title_10.BackgroundTransparency = 1.000
ProjectAutoV2.Title_10.Position = UDim2.new(0, -10, 0, -20)
ProjectAutoV2.Title_10.Size = UDim2.new(0, 279, 0, 15)
ProjectAutoV2.Title_10.ZIndex = 3
ProjectAutoV2.Title_10.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Title_10.Text = "Max Ping"
ProjectAutoV2.Title_10.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Title_10.TextSize = 15.000
ProjectAutoV2.Title_10.TextStrokeTransparency = 0.000

ProjectAutoV2.ServerHopWaitTimeSlider.Name = "ServerHopWaitTimeSlider"
ProjectAutoV2.ServerHopWaitTimeSlider.Parent = ProjectAutoV2.ServerHopSection
ProjectAutoV2.ServerHopWaitTimeSlider.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
ProjectAutoV2.ServerHopWaitTimeSlider.BorderColor3 = Color3.fromRGB(200, 0, 0)
ProjectAutoV2.ServerHopWaitTimeSlider.BorderSizePixel = 0
ProjectAutoV2.ServerHopWaitTimeSlider.Position = UDim2.new(0, 10, 0, 155)
ProjectAutoV2.ServerHopWaitTimeSlider.Size = UDim2.new(0, 210, 0, 14)
ProjectAutoV2.ServerHopWaitTimeSlider.Visible = false
ProjectAutoV2.ServerHopWaitTimeSlider.ZIndex = 3

ProjectAutoV2.Handle_7.Name = "Handle"
ProjectAutoV2.Handle_7.Parent = ProjectAutoV2.ServerHopWaitTimeSlider
ProjectAutoV2.Handle_7.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.Handle_7.BorderColor3 = Color3.fromRGB(0, 255, 255)
ProjectAutoV2.Handle_7.Position = UDim2.new(0, 0, 0, -3)
ProjectAutoV2.Handle_7.Size = UDim2.new(0, 10, 0, 20)
ProjectAutoV2.Handle_7.ZIndex = 4

ProjectAutoV2.UICorner_94.CornerRadius = UDim.new(0, 3)
ProjectAutoV2.UICorner_94.Parent = ProjectAutoV2.Handle_7

ProjectAutoV2.BackGround_9.Name = "BackGround"
ProjectAutoV2.BackGround_9.Parent = ProjectAutoV2.Handle_7
ProjectAutoV2.BackGround_9.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.BackGround_9.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.BackGround_9.Size = UDim2.new(0, 12, 0, 22)
ProjectAutoV2.BackGround_9.ZIndex = 3

ProjectAutoV2.UICorner_95.CornerRadius = UDim.new(0, 3)
ProjectAutoV2.UICorner_95.Parent = ProjectAutoV2.BackGround_9

ProjectAutoV2.ServerHopWaitTimeValue.Name = "ServerHopWaitTimeValue"
ProjectAutoV2.ServerHopWaitTimeValue.Parent = ProjectAutoV2.ServerHopWaitTimeSlider
ProjectAutoV2.ServerHopWaitTimeValue.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.ServerHopWaitTimeValue.BackgroundTransparency = 1.000
ProjectAutoV2.ServerHopWaitTimeValue.Position = UDim2.new(0, 215, 0, -3)
ProjectAutoV2.ServerHopWaitTimeValue.Size = UDim2.new(0, 50, 0, 20)
ProjectAutoV2.ServerHopWaitTimeValue.ZIndex = 3
ProjectAutoV2.ServerHopWaitTimeValue.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.ServerHopWaitTimeValue.Text = "0"
ProjectAutoV2.ServerHopWaitTimeValue.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.ServerHopWaitTimeValue.TextSize = 15.000
ProjectAutoV2.ServerHopWaitTimeValue.TextStrokeTransparency = 0.000

ProjectAutoV2.Title_11.Name = "Title"
ProjectAutoV2.Title_11.Parent = ProjectAutoV2.ServerHopWaitTimeSlider
ProjectAutoV2.Title_11.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.Title_11.BackgroundTransparency = 1.000
ProjectAutoV2.Title_11.Position = UDim2.new(0, -10, 0, -20)
ProjectAutoV2.Title_11.Size = UDim2.new(0, 279, 0, 15)
ProjectAutoV2.Title_11.ZIndex = 3
ProjectAutoV2.Title_11.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Title_11.Text = "Wait Time"
ProjectAutoV2.Title_11.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Title_11.TextSize = 15.000
ProjectAutoV2.Title_11.TextStrokeTransparency = 0.000

ProjectAutoV2.AutoRobToggle.Name = "AutoRobToggle"
ProjectAutoV2.AutoRobToggle.Parent = ProjectAutoV2.SettingsTab
ProjectAutoV2.AutoRobToggle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.AutoRobToggle.Position = UDim2.new(0, 10, 0, 45)
ProjectAutoV2.AutoRobToggle.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.AutoRobToggle.ZIndex = 2
ProjectAutoV2.AutoRobToggle.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.AutoRobToggle.Text = "Project Auto Enabled"
ProjectAutoV2.AutoRobToggle.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.AutoRobToggle.TextSize = 15.000

ProjectAutoV2.UICorner_96.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_96.Parent = ProjectAutoV2.AutoRobToggle

ProjectAutoV2.Border_20.Name = "Border"
ProjectAutoV2.Border_20.Parent = ProjectAutoV2.AutoRobToggle
ProjectAutoV2.Border_20.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.Border_20.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.Border_20.Size = UDim2.new(0, 281, 0, 27)
ProjectAutoV2.Border_20.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Border_20.Text = ""
ProjectAutoV2.Border_20.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Border_20.TextSize = 15.000

ProjectAutoV2.UICorner_97.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_97.Parent = ProjectAutoV2.Border_20

ProjectAutoV2.AutoRobToggleButton.Name = "AutoRobToggleButton"
ProjectAutoV2.AutoRobToggleButton.Parent = ProjectAutoV2.AutoRobToggle
ProjectAutoV2.AutoRobToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.AutoRobToggleButton.Position = UDim2.new(0, 5, 0, 5)
ProjectAutoV2.AutoRobToggleButton.Size = UDim2.new(0, 16, 0, 16)
ProjectAutoV2.AutoRobToggleButton.ZIndex = 4

ProjectAutoV2.UICorner_98.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_98.Parent = ProjectAutoV2.AutoRobToggleButton

ProjectAutoV2.ImageLabel_19.Parent = ProjectAutoV2.AutoRobToggleButton
ProjectAutoV2.ImageLabel_19.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.ImageLabel_19.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.ImageLabel_19.Size = UDim2.new(0, 18, 0, 18)
ProjectAutoV2.ImageLabel_19.ZIndex = 3

ProjectAutoV2.UICorner_99.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_99.Parent = ProjectAutoV2.ImageLabel_19

ProjectAutoV2.InfoTab.Name = "InfoTab"
ProjectAutoV2.InfoTab.Parent = ProjectAutoV2.BackGround
ProjectAutoV2.InfoTab.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
ProjectAutoV2.InfoTab.BorderSizePixel = 0
ProjectAutoV2.InfoTab.Position = UDim2.new(0, 101, 0, 51)
ProjectAutoV2.InfoTab.Size = UDim2.new(0, 299, 0, 399)

ProjectAutoV2.Creator.Name = "Creator"
ProjectAutoV2.Creator.Parent = ProjectAutoV2.InfoTab
ProjectAutoV2.Creator.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.Creator.LayoutOrder = 1
ProjectAutoV2.Creator.Position = UDim2.new(0, 10, 0, 8)
ProjectAutoV2.Creator.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.Creator.ZIndex = 2
ProjectAutoV2.Creator.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Creator.Text = "Made By Pxsta"
ProjectAutoV2.Creator.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Creator.TextSize = 15.000

ProjectAutoV2.UICorner_100.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_100.Parent = ProjectAutoV2.Creator

ProjectAutoV2.Border_21.Name = "Border"
ProjectAutoV2.Border_21.Parent = ProjectAutoV2.Creator
ProjectAutoV2.Border_21.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.Border_21.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.Border_21.Size = UDim2.new(0, 281, 0, 27)
ProjectAutoV2.Border_21.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Border_21.Text = ""
ProjectAutoV2.Border_21.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Border_21.TextSize = 15.000

ProjectAutoV2.UICorner_101.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_101.Parent = ProjectAutoV2.Border_21

ProjectAutoV2.UIListLayout_4.Parent = ProjectAutoV2.InfoTab
ProjectAutoV2.UIListLayout_4.HorizontalAlignment = Enum.HorizontalAlignment.Center
ProjectAutoV2.UIListLayout_4.SortOrder = Enum.SortOrder.LayoutOrder
ProjectAutoV2.UIListLayout_4.Padding = UDim.new(0, 10)

ProjectAutoV2.Gap_3.Name = "Gap"
ProjectAutoV2.Gap_3.Parent = ProjectAutoV2.InfoTab
ProjectAutoV2.Gap_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ProjectAutoV2.Gap_3.BackgroundTransparency = 1.000
ProjectAutoV2.Gap_3.BorderSizePixel = 0
ProjectAutoV2.Gap_3.LayoutOrder = -1
ProjectAutoV2.Gap_3.Font = Enum.Font.SourceSans
ProjectAutoV2.Gap_3.Text = ""
ProjectAutoV2.Gap_3.TextColor3 = Color3.fromRGB(0, 0, 0)
ProjectAutoV2.Gap_3.TextSize = 14.000
ProjectAutoV2.Gap_3.TextTransparency = 1.000

ProjectAutoV2.Version.Name = "Version"
ProjectAutoV2.Version.Parent = ProjectAutoV2.InfoTab
ProjectAutoV2.Version.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProjectAutoV2.Version.Position = UDim2.new(0, 10, 0, 8)
ProjectAutoV2.Version.Size = UDim2.new(0, 279, 0, 25)
ProjectAutoV2.Version.ZIndex = 2
ProjectAutoV2.Version.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Version.Text = "Version 0.6 beta"
ProjectAutoV2.Version.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Version.TextSize = 15.000

ProjectAutoV2.UICorner_102.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_102.Parent = ProjectAutoV2.Version

ProjectAutoV2.Border_22.Name = "Border"
ProjectAutoV2.Border_22.Parent = ProjectAutoV2.Version
ProjectAutoV2.Border_22.BackgroundColor3 = Color3.fromRGB(85, 85, 85)
ProjectAutoV2.Border_22.Position = UDim2.new(0, -1, 0, -1)
ProjectAutoV2.Border_22.Size = UDim2.new(0, 281, 0, 27)
ProjectAutoV2.Border_22.Font = Enum.Font.SourceSansSemibold
ProjectAutoV2.Border_22.Text = ""
ProjectAutoV2.Border_22.TextColor3 = Color3.fromRGB(200, 200, 200)
ProjectAutoV2.Border_22.TextSize = 15.000

ProjectAutoV2.UICorner_103.CornerRadius = UDim.new(0, 5)
ProjectAutoV2.UICorner_103.Parent = ProjectAutoV2.Border_22

-- Scripts:

local function IMWA_fake_script() -- ProjectAutoV2.Console.ScrollBarTransparency 
	local script = Instance.new('LocalScript', ProjectAutoV2.Console)

	local Tab = script.Parent
	local ScrollBarXPos = Tab.Position.X.Offset + Tab.Size.X.Offset + 5
	
	while true do 
		if math.abs(game:GetService("UserInputService"):GetMouseLocation().X - ScrollBarXPos) < 7 then
			Tab.ScrollBarImageTransparency = 0
		else
			Tab.ScrollBarImageTransparency = 1 
		end
		wait()
	end
end
coroutine.wrap(IMWA_fake_script)()
local function VNTI_fake_script() -- ProjectAutoV2.LocationsTab.ScrollBarTransparency 
	local script = Instance.new('LocalScript', ProjectAutoV2.LocationsTab)

	local Tab = script.Parent
	local ScrollBarXPos = Tab.Position.X.Offset + Tab.Size.X.Offset + 5
	
	while true do 
		if math.abs(game:GetService("UserInputService"):GetMouseLocation().X - ScrollBarXPos) < 7 then
			Tab.ScrollBarImageTransparency = 0
		else
			Tab.ScrollBarImageTransparency = 1 
		end
		wait()
	end
end
coroutine.wrap(VNTI_fake_script)()
local function NSHEL_fake_script() -- ProjectAutoV2.MainSection.SectionScript 
	local script = Instance.new('LocalScript', ProjectAutoV2.MainSection)

	local FullSize = 170
	
	local Section = script.Parent
	local SectionBorder = script.Parent:FindFirstChild("Border")
	local SectionButton = script.Parent:FindFirstChild("Button")
	local toggled = false
	
	SectionButton.MouseButton1Click:Connect(function()
		toggled = not toggled
		if toggled == false then
			for k, v in pairs(Section:GetChildren()) do
				if v:IsA("TextLabel") or v:IsA("ImageLabel") then
					if v.Name ~= "Border" and v.Name ~= "Title" then
						v.Visible = false
					end
				end
			end
	
			Section.Size = UDim2.new(0, Section.Size.X.Offset, 0, 25)
			SectionBorder.Size = UDim2.new(0, SectionBorder.Size.X.Offset, 0, 27)
			SectionButton.Rotation = 90
		else
			for k, v in pairs(Section:GetChildren()) do
				if v:IsA("TextLabel") or v:IsA("ImageLabel") then
					if v.Name ~= "Border" and v.Name ~= "Title" then
						v.Visible = true
					end
				end
			end
	
			Section.Size = UDim2.new(0, Section.Size.X.Offset, 0, FullSize)
			SectionBorder.Size = UDim2.new(0, SectionBorder.Size.X.Offset, 0, FullSize + 2)
			SectionButton.Rotation = 270
		end
	end)
end
coroutine.wrap(NSHEL_fake_script)()
local function OJVAN_fake_script() -- ProjectAutoV2.BotSpeedSlider.SliderScript 
	local script = Instance.new('LocalScript', ProjectAutoV2.BotSpeedSlider)

	local slider = script.Parent
	local handle = slider.Handle
	local held = false
	
	handle.MouseButton1Down:Connect(function()
		held = true
	end)
	
	game:GetService("UserInputService").InputEnded:Connect(function(input, proccesed)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			held = false
		end
	end) 
	
	while true do 
		if held then
			pos = game:GetService("UserInputService"):GetMouseLocation() - slider.AbsolutePosition
			handle.Position = UDim2.new(0, pos.X - (handle.Size.X.Offset / 2), 0, handle.Position.Y.Offset)
			if handle.Position.X.Offset < 0 then
				handle.Position = UDim2.new(0, 0, 0, handle.Position.Y.Offset)
			end
			if handle.Position.X.Offset + handle.Size.X.Offset > slider.Size.X.Offset then
				handle.Position = UDim2.new(0, slider.Size.X.Offset - handle.Size.X.Offset, 0, handle.Position.Y.Offset)
			end
		end
		wait()
	end
end
coroutine.wrap(OJVAN_fake_script)()
local function JGUJ_fake_script() -- ProjectAutoV2.PathSpeedSlider.SliderScript 
	local script = Instance.new('LocalScript', ProjectAutoV2.PathSpeedSlider)

	local slider = script.Parent
	local handle = slider.Handle
	local held = false
	
	handle.MouseButton1Down:Connect(function()
		held = true
	end)
	
	game:GetService("UserInputService").InputEnded:Connect(function(input, proccesed)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			held = false
		end
	end) 
	
	while true do 
		if held then
			pos = game:GetService("UserInputService"):GetMouseLocation() - slider.AbsolutePosition
			handle.Position = UDim2.new(0, pos.X - (handle.Size.X.Offset / 2), 0, handle.Position.Y.Offset)
			if handle.Position.X.Offset < 0 then
				handle.Position = UDim2.new(0, 0, 0, handle.Position.Y.Offset)
			end
			if handle.Position.X.Offset + handle.Size.X.Offset > slider.Size.X.Offset then
				handle.Position = UDim2.new(0, slider.Size.X.Offset - handle.Size.X.Offset, 0, handle.Position.Y.Offset)
			end
		end
		wait()
	end
end
coroutine.wrap(JGUJ_fake_script)()
local function NAMVDH_fake_script() -- ProjectAutoV2.SettingsTab.ScrollBarTransparency 
	local script = Instance.new('LocalScript', ProjectAutoV2.SettingsTab)

	local Tab = script.Parent
	local ScrollBarXPos = Tab.Position.X.Offset + Tab.Size.X.Offset + 5
	
	while true do 
		if math.abs(game:GetService("UserInputService"):GetMouseLocation().X - ScrollBarXPos) < 7 then
			Tab.ScrollBarImageTransparency = 0
		else
			Tab.ScrollBarImageTransparency = 1 
		end
		wait()
	end
end
coroutine.wrap(NAMVDH_fake_script)()
local function AGWH_fake_script() -- ProjectAutoV2.KillAuraSection.SectionScript 
	local script = Instance.new('LocalScript', ProjectAutoV2.KillAuraSection)

	local FullSize = 100
	
	local Section = script.Parent
	local SectionBorder = script.Parent:FindFirstChild("Border")
	local SectionButton = script.Parent:FindFirstChild("Button")
	local toggled = false
	
	SectionButton.MouseButton1Click:Connect(function()
		toggled = not toggled
		if toggled == false then
			for k, v in pairs(Section:GetChildren()) do
				if v:IsA("TextLabel") or v:IsA("ImageLabel") then
					if v.Name ~= "Border" and v.Name ~= "Title" then
						v.Visible = false
					end
				end
			end
	
			Section.Size = UDim2.new(0, Section.Size.X.Offset, 0, 25)
			SectionBorder.Size = UDim2.new(0, SectionBorder.Size.X.Offset, 0, 27)
			SectionButton.Rotation = 90
		else
			for k, v in pairs(Section:GetChildren()) do
				if v:IsA("TextLabel") or v:IsA("ImageLabel") then
					if v.Name ~= "Border" and v.Name ~= "Title" then
						v.Visible = true
					end
				end
			end
	
			Section.Size = UDim2.new(0, Section.Size.X.Offset, 0, FullSize)
			SectionBorder.Size = UDim2.new(0, SectionBorder.Size.X.Offset, 0, FullSize + 2)
			SectionButton.Rotation = 270
		end
	end)
end
coroutine.wrap(AGWH_fake_script)()
local function LIPAJO_fake_script() -- ProjectAutoV2.KillAuraSlider.SliderScript 
	local script = Instance.new('LocalScript', ProjectAutoV2.KillAuraSlider)

	local slider = script.Parent
	local handle = slider.Handle
	local held = false
	
	handle.MouseButton1Down:Connect(function()
		held = true
	end)
	
	game:GetService("UserInputService").InputEnded:Connect(function(input, proccesed)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			held = false
		end
	end) 
	
	while true do 
		if held then
			pos = game:GetService("UserInputService"):GetMouseLocation() - slider.AbsolutePosition
			handle.Position = UDim2.new(0, pos.X - (handle.Size.X.Offset / 2), 0, handle.Position.Y.Offset)
			if handle.Position.X.Offset < 0 then
				handle.Position = UDim2.new(0, 0, 0, handle.Position.Y.Offset)
			end
			if handle.Position.X.Offset + handle.Size.X.Offset > slider.Size.X.Offset then
				handle.Position = UDim2.new(0, slider.Size.X.Offset - handle.Size.X.Offset, 0, handle.Position.Y.Offset)
			end
		end
		wait()
	end
end
coroutine.wrap(LIPAJO_fake_script)()
local function YRKFKBI_fake_script() -- ProjectAutoV2.AvoidCopSection.SectionScript 
	local script = Instance.new('LocalScript', ProjectAutoV2.AvoidCopSection)

	local FullSize = 100
	
	local Section = script.Parent
	local SectionBorder = script.Parent:FindFirstChild("Border")
	local SectionButton = script.Parent:FindFirstChild("Button")
	local toggled = false
	
	SectionButton.MouseButton1Click:Connect(function()
		toggled = not toggled
		if toggled == false then
			for k, v in pairs(Section:GetChildren()) do
				if v:IsA("TextLabel") or v:IsA("ImageLabel") then
					if v.Name ~= "Border" and v.Name ~= "Title" then
						v.Visible = false
					end
				end
			end
	
			Section.Size = UDim2.new(0, Section.Size.X.Offset, 0, 25)
			SectionBorder.Size = UDim2.new(0, SectionBorder.Size.X.Offset, 0, 27)
			SectionButton.Rotation = 90
		else
			for k, v in pairs(Section:GetChildren()) do
				if v:IsA("TextLabel") or v:IsA("ImageLabel") then
					if v.Name ~= "Border" and v.Name ~= "Title" then
						v.Visible = true
					end
				end
			end
	
			Section.Size = UDim2.new(0, Section.Size.X.Offset, 0, FullSize)
			SectionBorder.Size = UDim2.new(0, SectionBorder.Size.X.Offset, 0, FullSize + 2)
			SectionButton.Rotation = 270
		end
	end)
end
coroutine.wrap(YRKFKBI_fake_script)()
local function OSLED_fake_script() -- ProjectAutoV2.CopAvoidSlider.SliderScript 
	local script = Instance.new('LocalScript', ProjectAutoV2.CopAvoidSlider)

	local slider = script.Parent
	local handle = slider.Handle
	local held = false
	
	handle.MouseButton1Down:Connect(function()
		held = true
	end)
	
	game:GetService("UserInputService").InputEnded:Connect(function(input, proccesed)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			held = false
		end
	end) 
	
	while true do 
		if held then
			pos = game:GetService("UserInputService"):GetMouseLocation() - slider.AbsolutePosition
			handle.Position = UDim2.new(0, pos.X - (handle.Size.X.Offset / 2), 0, handle.Position.Y.Offset)
			if handle.Position.X.Offset < 0 then
				handle.Position = UDim2.new(0, 0, 0, handle.Position.Y.Offset)
			end
			if handle.Position.X.Offset + handle.Size.X.Offset > slider.Size.X.Offset then
				handle.Position = UDim2.new(0, slider.Size.X.Offset - handle.Size.X.Offset, 0, handle.Position.Y.Offset)
			end
		end
		wait()
	end
end
coroutine.wrap(OSLED_fake_script)()
local function NHKAS_fake_script() -- ProjectAutoV2.ServerHopSection.SectionScript 
	local script = Instance.new('LocalScript', ProjectAutoV2.ServerHopSection)

	local FullSize = 180
	
	local Section = script.Parent
	local SectionBorder = script.Parent:FindFirstChild("Border")
	local SectionButton = script.Parent:FindFirstChild("Button")
	local toggled = false
	
	SectionButton.MouseButton1Click:Connect(function()
		toggled = not toggled
		if toggled == false then
			for k, v in pairs(Section:GetChildren()) do
				if v:IsA("TextLabel") or v:IsA("ImageLabel") then
					if v.Name ~= "Border" and v.Name ~= "Title" then
						v.Visible = false
					end
				end
			end
	
			Section.Size = UDim2.new(0, Section.Size.X.Offset, 0, 25)
			SectionBorder.Size = UDim2.new(0, SectionBorder.Size.X.Offset, 0, 27)
			SectionButton.Rotation = 90
		else
			for k, v in pairs(Section:GetChildren()) do
				if v:IsA("TextLabel") or v:IsA("ImageLabel") then
					if v.Name ~= "Border" and v.Name ~= "Title" then
						v.Visible = true
					end
				end
			end
	
			Section.Size = UDim2.new(0, Section.Size.X.Offset, 0, FullSize)
			SectionBorder.Size = UDim2.new(0, SectionBorder.Size.X.Offset, 0, FullSize + 2)
			SectionButton.Rotation = 270
		end
	end)
end
coroutine.wrap(NHKAS_fake_script)()
local function PJBZCFK_fake_script() -- ProjectAutoV2.MinPlayersSlider.SliderScript 
	local script = Instance.new('LocalScript', ProjectAutoV2.MinPlayersSlider)

	local slider = script.Parent
	local handle = slider.Handle
	local held = false
	
	handle.MouseButton1Down:Connect(function()
		held = true
	end)
	
	game:GetService("UserInputService").InputEnded:Connect(function(input, proccesed)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			held = false
		end
	end) 
	
	while true do 
		if held then
			pos = game:GetService("UserInputService"):GetMouseLocation() - slider.AbsolutePosition
			handle.Position = UDim2.new(0, pos.X - (handle.Size.X.Offset / 2), 0, handle.Position.Y.Offset)
			if handle.Position.X.Offset < 0 then
				handle.Position = UDim2.new(0, 0, 0, handle.Position.Y.Offset)
			end
			if handle.Position.X.Offset + handle.Size.X.Offset > slider.Size.X.Offset then
				handle.Position = UDim2.new(0, slider.Size.X.Offset - handle.Size.X.Offset, 0, handle.Position.Y.Offset)
			end
		end
		wait()
	end
end
coroutine.wrap(PJBZCFK_fake_script)()
local function BMKCI_fake_script() -- ProjectAutoV2.MaxPingSlider.SliderScript 
	local script = Instance.new('LocalScript', ProjectAutoV2.MaxPingSlider)

	local slider = script.Parent
	local handle = slider.Handle
	local held = false
	
	handle.MouseButton1Down:Connect(function()
		held = true
	end)
	
	game:GetService("UserInputService").InputEnded:Connect(function(input, proccesed)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			held = false
		end
	end) 
	
	while true do 
		if held then
			pos = game:GetService("UserInputService"):GetMouseLocation() - slider.AbsolutePosition
			handle.Position = UDim2.new(0, pos.X - (handle.Size.X.Offset / 2), 0, handle.Position.Y.Offset)
			if handle.Position.X.Offset < 0 then
				handle.Position = UDim2.new(0, 0, 0, handle.Position.Y.Offset)
			end
			if handle.Position.X.Offset + handle.Size.X.Offset > slider.Size.X.Offset then
				handle.Position = UDim2.new(0, slider.Size.X.Offset - handle.Size.X.Offset, 0, handle.Position.Y.Offset)
			end
		end
		wait()
	end
end
coroutine.wrap(BMKCI_fake_script)()
local function UPZVB_fake_script() -- ProjectAutoV2.ServerHopWaitTimeSlider.SliderScript 
	local script = Instance.new('LocalScript', ProjectAutoV2.ServerHopWaitTimeSlider)

	local slider = script.Parent
	local handle = slider.Handle
	local held = false
	
	handle.MouseButton1Down:Connect(function()
		held = true
	end)
	
	game:GetService("UserInputService").InputEnded:Connect(function(input, proccesed)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			held = false
		end
	end) 
	
	while true do 
		if held then
			pos = game:GetService("UserInputService"):GetMouseLocation() - slider.AbsolutePosition
			handle.Position = UDim2.new(0, pos.X - (handle.Size.X.Offset / 2), 0, handle.Position.Y.Offset)
			if handle.Position.X.Offset < 0 then
				handle.Position = UDim2.new(0, 0, 0, handle.Position.Y.Offset)
			end
			if handle.Position.X.Offset + handle.Size.X.Offset > slider.Size.X.Offset then
				handle.Position = UDim2.new(0, slider.Size.X.Offset - handle.Size.X.Offset, 0, handle.Position.Y.Offset)
			end
		end
		wait()
	end
end
coroutine.wrap(UPZVB_fake_script)()

----------------------------------------------------------------

ProjectAutoV2.Icon.Image = "http://www.roblox.com/thumbs/avatar.ashx?x=150&y=200&format=png&userid="..game.Players.localPlayer.UserId

local KEY = nil
if readfile and isfile then 
    if isfile("ProjectAutoKey.txt") then
        KEY = HttpService:JSONDecode(readfile("ProjectAutoKey.txt"))
    end
end

local VerifyString = KEY.." "..tostring(hwid)

local data = {['VERIFY'] = VerifyString}

Server = http.request({Url = "http://Pxsta.pythonanywhere.com", Method = "POST", Headers = data})

if string.sub(Server.Body, 1, 20) == "SET HWID - STATUS: " then
    ProjectAutoV2.Status.Text = string.sub(Server.Body, 21, #(Server.Body))
end

if string.sub(Server.Body, 1, 23) == "CORRECT HWID - STATUS: " then
    ProjectAutoV2.Status.Text = string.sub(Server.Body, 24, #(Server.Body))
end

if string.upper(string.sub(Server.Body, 24, #(Server.Body))) == "USER" then
    game.Players.localPlayer.PlayerGui.NotificationGui.ContainerNotification.Message.Text = "you need epic role or above to access beta, join discord to get beta - auto.projectbot.top"
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = true
    game.Players.localPlayer.PlayerGui.ProjectAuto:Destroy()
    _G.AutoRobLoaded = false
    wait(5)
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = false
    return
end

if Server.Body == "INCORRECT HWID" then
    game.Players.localPlayer.PlayerGui.NotificationGui.ContainerNotification.Message.Text = "Incorrect hwid, reset your hwid using our discord - auto.projectbot.top"
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = true
    game.Players.localPlayer.PlayerGui.ProjectAuto:Destroy()
    _G.AutoRobLoaded = false
    wait(5)
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = false
    return
end

if Server.Body == "NO KEY" then
    game.Players.localPlayer.PlayerGui.NotificationGui.ContainerNotification.Message.Text = "Incorrect or missing key, join our discord for a key - auto.projectbot.top"
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = true
    game.Players.localPlayer.PlayerGui.ProjectAuto:Destroy()
    _G.AutoRobLoaded = false
    wait(5)
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = false
    return
end

data = {['DISCORD'] = KEY}

Server = http.request({Url = "http://Pxsta.pythonanywhere.com", Method = "POST", Headers = data})
if Server.Body == "INVALID KEY" then
    game.Players.localPlayer.PlayerGui.NotificationGui.ContainerNotification.Message.Text = "Key not activated, activate key in our discord - auto.projectbot.top"
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = true
    game.Players.localPlayer.PlayerGui.ProjectAuto:Destroy()
    _G.AutoRobLoaded = false
    wait(5)
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = false
    return
end

wait(1)

ProjectAutoV2.User.Text = string.sub(Server.Body, 10, #(Server.Body))

----------------------------------------------------------------

local config = {
    teleport = true,
    wait = true,
    copAvoid = true,
    avoidCopRange = 100,
    killAura = false,
    killAuraRange = 150,
    CarSpeed = -100,
    FlySpeed = -50,
    GroundSpeed = 1,
    MansionToggled = true,
    MuseumToggled = true,
    BankToggled = true,
    JewelToggled = true,
    CasinoToggled = true,
    DropToggled = true,
    TrainToggled = true,
    StoresToggled = true,
    TombToggled = true,
    PowerToggled = true,
    BoatToggled = true,
    PlaneToggled = true,
    ServerHop = true,
    MinPlayers = 10,
    MaxPing = 100,
    ServerHopWaitTime = 30,
    ToggleKey = Enum.KeyCode.RightShift
}

local ToggleMenuButtonHold = false

game:GetService("UserInputService").InputBegan:Connect(function(input, proccesed)
    if not ToggleMenuButtonHold then
        if input.KeyCode == config.ToggleKey then
            if not ProjectAutoV2.BackGround.Visible then
                ProjectAutoV2.BackGround.Visible = true
            else
                ProjectAutoV2.BackGround.Visible = false
            end
        end
    else
        config.ToggleKey = input.KeyCode
        ProjectAutoV2.MenuToggleKey.Text = string.upper(input.KeyCode.Name)
        ToggleMenuButtonHold = false
    end
end)

ProjectAutoV2.MenuToggleKey.MouseButton1Click:Connect(function()
    ToggleMenuButtonHold = true
    ProjectAutoV2.MenuToggleKey.Text = ""
end)

----------------------------------------------------------------

ProjectAutoV2.BackGround.Active = true
ProjectAutoV2.BackGround.Draggable = true
ProjectAutoV2.ConsoleTab.Visible = true
ProjectAutoV2.SettingsTab.Visible = false
ProjectAutoV2.LocationsTab.Visible = false
ProjectAutoV2.InfoTab.Visible = false

ProjectAutoV2.ConsoleButton.MouseButton1Click:Connect(function()
    ProjectAutoV2.ConsoleTab.Visible = true
    ProjectAutoV2.SettingsTab.Visible = false
    ProjectAutoV2.LocationsTab.Visible = false
    ProjectAutoV2.InfoTab.Visible = false
end)

ProjectAutoV2.SettingsButton.MouseButton1Click:Connect(function()
    ProjectAutoV2.ConsoleTab.Visible = false
    ProjectAutoV2.SettingsTab.Visible = true
    ProjectAutoV2.LocationsTab.Visible = false
    ProjectAutoV2.InfoTab.Visible = false
end)

ProjectAutoV2.LocationsButton.MouseButton1Click:Connect(function()
    ProjectAutoV2.ConsoleTab.Visible = false
    ProjectAutoV2.SettingsTab.Visible = false
    ProjectAutoV2.LocationsTab.Visible = true
    ProjectAutoV2.InfoTab.Visible = false
end)

ProjectAutoV2.InfoButton.MouseButton1Click:Connect(function()
    ProjectAutoV2.ConsoleTab.Visible = false
    ProjectAutoV2.SettingsTab.Visible = false
    ProjectAutoV2.LocationsTab.Visible = false
    ProjectAutoV2.InfoTab.Visible = true
end)
----------------------------------------------------------------

local MessagePostion = 25
function CreateMessage(message)
    local NewMessage = Instance.new("TextLabel")

    NewMessage.Name = "NewMessage"
    NewMessage.Parent = ProjectAutoV2.Console
    NewMessage.Position = UDim2.new(0, 0, 0, MessagePostion)
    NewMessage.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    NewMessage.BackgroundTransparency = 1.000
    NewMessage.BorderColor3 = Color3.fromRGB(85, 85, 85)
    NewMessage.BorderSizePixel = 0
    NewMessage.Size = UDim2.new(0, 279, 0, 25)
    NewMessage.Font = Enum.Font.SourceSansSemibold
    NewMessage.Text = message
    NewMessage.TextColor3 = Color3.fromRGB(200, 200, 200)
    NewMessage.TextSize = 15.000
end

local CharPerLine = 55

function LogMessage(message)
    if message == nil then
        return
    end
    local lines = math.floor(#(message) / CharPerLine)

    for i = 0, lines, 1 do
        if i < lines then
            CreateMessage(string.sub(message, i * CharPerLine, ((i + 1) * CharPerLine) - 1))
        else
            CreateMessage(string.sub(message, i * CharPerLine, #(message)))
        end
        MessagePostion += 25
    end
end

function UpdateLog(message)
    ProjectAutoV2.Log.Text = message
end

----------------------------------------------------------------

local Bot = game.Players.localPlayer
local serverHopTime = 0
local platform = nil
local RobbingLocation = false
local toggled = true -- TRUE = ON  | FALSE = OFF
local reset = false
local exitCar = require(game:GetService("ReplicatedStorage").Game.CharacterUtil)
local network = getupvalue(require(game.ReplicatedStorage.Module.AlexChassis).SetEvent, 1)
local punchHash = "vrnj128w" -- Y
local hash = 'icsfdqe3'  -- Y

local session
if _G.CurrentSession == nil then
    _G.CurrentSession = math.random(1, 1000)
end

local ScriptTime = {
    TotalMoneyEarned = 0,
    seconds = 0,
    minutes = 0,
    hours = 0,
    secondsStr = "00",
    minutesStr = "00",
    hoursStr = "00",
    TotalMoneyEarnedStr = "00,000,000",
}

local LastSession
if readfile and isfile then 
    if isfile("ProjectAutoSession.txt") then
        LastSession = HttpService:JSONDecode(readfile("ProjectAutoSession.txt"))
    end
end

if _G.CurrentSession == LastSession then
    if readfile and isfile then 
        if isfile("ProjectAutoSessionStats.txt") then
            ScriptTime = HttpService:JSONDecode(readfile("ProjectAutoSessionStats.txt"))
        end
    end
end

local json
if writefile then 
    json = HttpService:JSONEncode(CurrentSession)
    writefile("ProjectAutoSession.txt", json)
end

function saveStats()
    if writefile then 
        json = HttpService:JSONEncode(ScriptTime)
        writefile("ProjectAutoSessionStats.txt", json)
    end
end

----------------------------------------------------------------

ProjectAutoV2.TeleportToggleButton.MouseButton1Click:Connect(function()
    config.teleport = not config.teleport

    if not config.teleport then
        ProjectAutoV2.TeleportToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    else
        ProjectAutoV2.TeleportToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    end
end)

ProjectAutoV2.WaitToggleButton.MouseButton1Click:Connect(function()
    config.wait = not config.wait

    if not config.wait then
        ProjectAutoV2.WaitToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    else
        ProjectAutoV2.WaitToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    end
end)

ProjectAutoV2.CopAvoidToggleButton.MouseButton1Click:Connect(function()
    config.copAvoid = not config.copAvoid

    if not config.copAvoid then
        ProjectAutoV2.CopAvoidToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    else
        ProjectAutoV2.CopAvoidToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    end
end)

ProjectAutoV2.KillAuraToggleButton.MouseButton1Click:Connect(function()
    config.killAura = not config.killAura

    if not config.killAura then
        ProjectAutoV2.KillAuraToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    else
        ProjectAutoV2.KillAuraToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    end
end)

ProjectAutoV2.AutoRobToggleButton.MouseButton1Click:Connect(function()
    toggled = not toggled

    if not toggled then
        ProjectAutoV2.AutoRobToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    else
        ProjectAutoV2.AutoRobToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    end
end)

ProjectAutoV2.ServerHopToggleButton.MouseButton1Click:Connect(function()
    config.ServerHop = not config.ServerHop

    if not config.ServerHop then
        ProjectAutoV2.ServerHopToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    else
        ProjectAutoV2.ServerHopToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    end
end)

ProjectAutoV2.ResetButton.MouseButton1Click:Connect(function()
    Bot.Character.Humanoid.Health = 0
    exitCar.OnJump()
    LogMessage("ressetting bot")
end)

ProjectAutoV2.MansionToggleButton.MouseButton1Click:Connect(function()
    config.MansionToggled = not config.MansionToggled

    if not config.MansionToggled then
        ProjectAutoV2.MansionToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    else
        ProjectAutoV2.MansionToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    end
end)

ProjectAutoV2.MuseumToggleButton.MouseButton1Click:Connect(function()
    config.MuseumToggled = not config.MuseumToggled

    if not config.MuseumToggled then
        ProjectAutoV2.MuseumToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    else
        ProjectAutoV2.MuseumToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    end
end)

ProjectAutoV2.BankToggleButton.MouseButton1Click:Connect(function()
    config.BankToggled = not config.BankToggled

    if not config.BankToggled then
        ProjectAutoV2.BankToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    else
        ProjectAutoV2.BankToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    end
end)

ProjectAutoV2.JewelryToggleButton.MouseButton1Click:Connect(function()
    config.JewelToggled = not config.JewelToggled

    if not config.JewelToggled then
        ProjectAutoV2.JewelryToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    else
        ProjectAutoV2.JewelryToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    end
end)

ProjectAutoV2.CasinoToggleButton.MouseButton1Click:Connect(function()
    config.CasinoToggled = not config.CasinoToggled

    if not config.CasinoToggled then
        ProjectAutoV2.CasinoToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    else
        ProjectAutoV2.CasinoToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    end
end)

ProjectAutoV2.DropToggleButton.MouseButton1Click:Connect(function()
    config.DropToggled = not config.DropToggled

    if not config.DropToggled then
        ProjectAutoV2.DropToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    else
        ProjectAutoV2.DropToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    end
end)

ProjectAutoV2.TrainToggleButton.MouseButton1Click:Connect(function()
    config.TrainToggled = not config.TrainToggled

    if not config.TrainToggled then
        ProjectAutoV2.TrainToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    else
        ProjectAutoV2.TrainToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    end
end)

ProjectAutoV2.SmallStoresToggleButton.MouseButton1Click:Connect(function()
    if true then return end -- remove when location added

    config.StoresToggled = not config.StoresToggled

    if not config.StoresToggled then
        ProjectAutoV2.SmallStoresToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    else
        ProjectAutoV2.SmallStoresToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    end
end)

ProjectAutoV2.TombToggleButton.MouseButton1Click:Connect(function()
    config.TombToggled = not config.TombToggled

    if not config.TombToggled then
        ProjectAutoV2.TombToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    else
        ProjectAutoV2.TombToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    end
end)

ProjectAutoV2.PlaneToggleButton.MouseButton1Click:Connect(function()
    config.PlaneToggled = not config.PlaneToggled

    if not config.PlaneToggled then
        ProjectAutoV2.PlaneToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    else
        ProjectAutoV2.PlaneToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    end
end)

ProjectAutoV2.PowerPlantToggleButton.MouseButton1Click:Connect(function()
    if true then return end -- remove when location added
    config.PowerToggled = not config.PowerToggled

    if not config.PowerToggled then
        ProjectAutoV2.PowerPlantToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    else
        ProjectAutoV2.PowerPlantToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    end
end)

ProjectAutoV2.BoatToggleButton.MouseButton1Click:Connect(function()
    if true then return end -- remove when location added
    config.BoatToggled = not config.BoatToggled

    if not config.BoatToggled then
        ProjectAutoV2.BoatToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    else
        ProjectAutoV2.BoatToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    end
end)

----------------------------------------------------------------


function load()
    local HttpService = game:GetService("HttpService")
    if readfile and isfile then 
        if isfile("autorob.txt") then
            config = HttpService:JSONDecode(readfile("autorob.txt"))
        end
    end
end

function save()
    local json
    local HttpService = game:GetService("HttpService")
    if writefile then 
        json = HttpService:JSONEncode(config)
        writefile("autorob.txt", json)
    end
end

load()

if config.ServerHop == nil then
    config.ServerHop = false
end
if config.MinPlayers == nil then
    config.MinPlayers = 10
end
if config.MaxPing == nil then
    config.MaxPing = 100
end
if config.ServerHopWaitTime == nil then
    config.ServerHopWaitTime = 30
end
if config.teleport == nil then
    config.teleport = true
end
if config.wait == nil then
    config.wait = true
end
if config.avoidCopRange == nil then
    config.avoidCopRange = 50
end
if config.copAvoid == nil then
    config.copAvoid = true
end
if config.killAura == nil then
    config.killAura = true
end
if config.killAuraRange == nil then
    config.killAuraRange = 150
end
if config.CarSpeed == nil then
    config.CarSpeed = -600
end
if config.FlySpeed == nil then
    config.FlySpeed = -150
end
if config.GroundSpeed == nil then
    config.GroundSpeed = 9
end
if config.MansionToggled == nil then
    config.MansionToggled = true
end
if config.MuseumToggled == nil then
    config.MuseumToggled = true
end
if config.BankToggled == nil then
    config.BankToggled = true
end
if config.JewelToggled == nil then
    config.JewelToggled = true
end
if config.CasinoToggled == nil then
    config.CasinoToggled = true
end
if config.DropToggled == nil then
    config.DropToggled = true
end
if config.TrainToggled == nil then
    config.TrainToggled = true
end
if config.StoresToggled == nil then
    config.StoresToggled = true
end
if config.TombToggled == nil then
    config.TombToggled = true
end
if config.PlaneToggled == nil then
    config.PlaneToggled = true
end
if config.PowerToggled == nil then
    config.PowerToggled = true
end
if config.BoatToggled == nil then
    config.BoatToggled = true
end
if config.toggleKey == nil then
    config.toggleKey = Enum.KeyCode.RightShift
end

if not config.MansionToggled then
    ProjectAutoV2.MansionToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
else
    ProjectAutoV2.MansionToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
end
if not config.MuseumToggled then
    ProjectAutoV2.MuseumToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
else
    ProjectAutoV2.MuseumToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
end
if not config.BankToggled then
    ProjectAutoV2.BankToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
else
    ProjectAutoV2.BankToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
end
if not config.JewelToggled then
    ProjectAutoV2.JewelryToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
else
    ProjectAutoV2.JewelryToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
end
if not config.CasinoToggled then
    ProjectAutoV2.CasinoToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
else
    ProjectAutoV2.CasinoToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
end
if not config.DropToggled then
    ProjectAutoV2.DropToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
else
    ProjectAutoV2.DropToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
end
if not config.TrainToggled then
    ProjectAutoV2.TrainToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
else
    ProjectAutoV2.TrainToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
end
if not config.StoresToggled then
    ProjectAutoV2.SmallStoresToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
else
    ProjectAutoV2.SmallStoresToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
end
if not config.TombToggled then
    ProjectAutoV2.TombToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
else
    ProjectAutoV2.TombToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
end
if not config.PlaneToggled then
    ProjectAutoV2.PlaneToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
else
    ProjectAutoV2.PlaneToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
end
if not config.PowerToggled then
    ProjectAutoV2.PowerPlantToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
else
    ProjectAutoV2.PowerPlantToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
end
if not config.BoatToggled then
    ProjectAutoV2.BoatToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
else
    ProjectAutoV2.BoatToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
end
if not config.teleport then
    ProjectAutoV2.TeleportToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
else
    ProjectAutoV2.TeleportToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
end
if not config.wait then
    ProjectAutoV2.WaitToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
else
    ProjectAutoV2.WaitToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
end
if not config.copAvoid then
    ProjectAutoV2.CopAvoidToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
else
    ProjectAutoV2.CopAvoidToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
end
if not config.killAura then
    ProjectAutoV2.KillAuraToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
else
    ProjectAutoV2.KillAuraToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
end
if not config.ServerHop then
    ProjectAutoV2.ServerHopToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
else
    ProjectAutoV2.ServerHopToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
end
if not toggled then
    ProjectAutoV2.AutoRobToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
else
    ProjectAutoV2.AutoRobToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
end

-- for locations not added yet

ProjectAutoV2.SmallStoresToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)

ProjectAutoV2.PowerPlantToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)

ProjectAutoV2.BoatToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)

-- (MAX + MIN) / NUM = 200, (MAX + MIN) / 200 = NUM
ProjectAutoV2.BotSpeedSlider:FindFirstChild("Handle").Position = UDim2.new(0, (config.FlySpeed + 50) / -0.5, ProjectAutoV2.BotSpeedSlider:FindFirstChild("Handle").Position.Y.Scale, ProjectAutoV2.BotSpeedSlider:FindFirstChild("Handle").Position.Y.Offset)
ProjectAutoV2.PathSpeedSlider:FindFirstChild("Handle").Position = UDim2.new(0, (config.GroundSpeed - 1) / 0.04, ProjectAutoV2.PathSpeedSlider:FindFirstChild("Handle").Position.Y.Scale, ProjectAutoV2.PathSpeedSlider:FindFirstChild("Handle").Position.Y.Offset)
ProjectAutoV2.BotSpeedSlider:FindFirstChild("Handle").Position = UDim2.new(0, (config.CarSpeed + 100) / -2.5, ProjectAutoV2.BotSpeedSlider:FindFirstChild("Handle").Position.Y.Scale, ProjectAutoV2.BotSpeedSlider:FindFirstChild("Handle").Position.Y.Offset)
ProjectAutoV2.KillAuraSlider:FindFirstChild("Handle").Position = UDim2.new(0, (config.killAuraRange - 50) / 2.75, ProjectAutoV2.KillAuraSlider:FindFirstChild("Handle").Position.Y.Scale, ProjectAutoV2.KillAuraSlider:FindFirstChild("Handle").Position.Y.Offset)
ProjectAutoV2.CopAvoidSlider:FindFirstChild("Handle").Position = UDim2.new(0, (config.avoidCopRange - 100) / 2.5, ProjectAutoV2.CopAvoidSlider:FindFirstChild("Handle").Position.Y.Scale, ProjectAutoV2.CopAvoidSlider:FindFirstChild("Handle").Position.Y.Offset)
ProjectAutoV2.MinPlayersSlider:FindFirstChild("Handle").Position = UDim2.new(0, (config.MinPlayers - 1) / 0.12, ProjectAutoV2.MinPlayersSlider:FindFirstChild("Handle").Position.Y.Scale, ProjectAutoV2.MinPlayersSlider:FindFirstChild("Handle").Position.Y.Offset)
ProjectAutoV2.MaxPingSlider:FindFirstChild("Handle").Position = UDim2.new(0, (config.MaxPing - 50) / 0.5, ProjectAutoV2.MaxPingSlider:FindFirstChild("Handle").Position.Y.Scale, ProjectAutoV2.MaxPingSlider:FindFirstChild("Handle").Position.Y.Offset)
ProjectAutoV2.ServerHopWaitTimeSlider:FindFirstChild("Handle").Position = UDim2.new(0, (config.ServerHopWaitTime) / 0.3, ProjectAutoV2.ServerHopWaitTimeSlider:FindFirstChild("Handle").Position.Y.Scale, ProjectAutoV2.ServerHopWaitTimeSlider:FindFirstChild("Handle").Position.Y.Offset)
coroutine.wrap(function() -- 200 * NUM + MIN = MAX, (MAX - MIN) / 200 = NUM
    while true do
        config.FlySpeed = ProjectAutoV2.BotSpeedSlider:FindFirstChild("Handle").Position.X.Offset * -0.5 - 50
        ProjectAutoV2.BotSpeedValue.Text = tostring(math.round((ProjectAutoV2.BotSpeedSlider:FindFirstChild("Handle").Position.X.Offset / 200) * 100)).."%"
        config.avoidCopRange = ProjectAutoV2.CopAvoidSlider:FindFirstChild("Handle").Position.X.Offset * 2.5 + 100
        ProjectAutoV2.CopAvoidValue.Text = math.round(config.avoidCopRange * 100) / 100
        config.GroundSpeed = ProjectAutoV2.PathSpeedSlider:FindFirstChild("Handle").Position.X.Offset * 0.04 + 1
         ProjectAutoV2.PathSpeedValue.Text = tostring(math.round((ProjectAutoV2.PathSpeedSlider:FindFirstChild("Handle").Position.X.Offset / 200) * 100)).."%"
        config.CarSpeed = ProjectAutoV2.BotSpeedSlider:FindFirstChild("Handle").Position.X.Offset * -2.5 - 100
        config.killAuraRange = ProjectAutoV2.KillAuraSlider:FindFirstChild("Handle").Position.X.Offset * 2.75 + 50
        ProjectAutoV2.KillAuraValue.Text = math.round(config.killAuraRange * 100) / 100
        config.MinPlayers = math.round(ProjectAutoV2.MinPlayersSlider:FindFirstChild("Handle").Position.X.Offset * 0.12 + 1)
        ProjectAutoV2.MinPlayersValue.Text = config.MinPlayers
        config.MaxPing = ProjectAutoV2.MaxPingSlider:FindFirstChild("Handle").Position.X.Offset * 0.5 + 50
        ProjectAutoV2.MaxPingValue.Text = math.round(config.MaxPing * 100) / 100
        config.ServerHopWaitTime = ProjectAutoV2.ServerHopWaitTimeSlider:FindFirstChild("Handle").Position.X.Offset * 0.3
        ProjectAutoV2.ServerHopWaitTimeValue.Text = math.round(config.ServerHopWaitTime * 100) / 100
        wait()
    end
end)()

coroutine.wrap(function()
    while true do
        save()
        wait(1)
    end
end)()
        

local rayDirection = Vector3.new(0, -3000, 0)
local rayDirection1 = Vector3.new(0, 3000, 0)

local Positions = {
    Vector3.new(740, 500, 1062),
}

function GetTombStatus()
    local Wall = nil
    if game.Workspace.RobberyTomb.Entrance.Doors:FindFirstChild("Door") then
        Wall = game.Workspace.RobberyTomb.Entrance.Doors:GetChildren()[2].InnerModel.Wall
    else
        return false
    end

    if Wall.Position.X < 535 then
        return true
    else
        return false
    end
end

function GetMansionStatus()
    local Door = game:GetService("Workspace").MansionRobbery.Lobby.EntranceElevator.Floors:GetChildren()[1].DoorLeft.InnerModel.Door

    if Door.Position.X > 3201 then
        return true
    else
        return false
    end
end

function GetBankStatus()
    local BankStatus = nil
    if #(game.Workspace.Banks:GetChildren()) > 0 then
        BankStatus = game:GetService("Workspace").Banks:GetChildren()[1].Extra.Sign.Decal
    else
        return false
    end
    if BankStatus.Transparency == 0 then
        return false
    else
        return true
    end
end

function GetJewelStatus()
    local JewelryStatus = nil
    if #(game.Workspace.Jewelrys:GetChildren()) > 0 then
        JewelryStatus = game.Workspace.Jewelrys:GetChildren()[1].Extras.Sign.Decal
    else
        return false
    end
    if JewelryStatus.Transparency == 0 then
        return false
    else
        return true
    end
end

function GetRobbingJewel()
    local Wall = game:GetService("Workspace"):FindFirstChild("Jewelrys"):GetChildren()[1].Wall.SecurityWall
    if Wall.Position.Y < 50 then
        return true
    else
        return false
    end
end

function GetMuseumStatus(parameters)
    local RoofPart = game.Workspace.Museum.Roof.Hole.RoofPart

    if RoofPart.Transparency > 0.5 then
        return true
    else
        return false
    end
end

function GetCasinoStatus()

    if not game.Workspace:FindFirstChild("Casino") then
        return false
    end
    local codes = {}
    local open = false

    for k, v in pairs(game.Workspace.Casino.RobberyDoor.Codes:GetChildren()) do
        codes[k] = v
    end
    

    for k, v in pairs(codes) do
        local CodeKids = codes[k]:GetChildren()


        local Label = CodeKids[1]:GetChildren()[1]:GetChildren()[1]

        local MinX = -99999
        local MinZ = -99999
        local Pos = {}

        if Label.Text ~= "" then
            open = true
            break
        end
    end

    if open then
        return true
    else
        return false
    end
end

function respawn(prisoner)

    if respawning then
        return
    end

    respawning = true

    while not Bot.Character or (Bot.Character and Bot.Character.Humanoid and Bot.Character.Humanoid.Health == 0) do
        wait(0.1)
    end

    wait(1)

    if not prisoner then
        if Bot.Character:FindFirstChild("HumanoidRootPart") and (Vector3.new(2009, 20, -2538) - Bot.Character.HumanoidRootPart.Position).magnitude < 5 then
            pathMove(Vector3.new(2102, 20, -2556))
            if reset then return end
            pathMove(Vector3.new(2214, 20, -2459))
            if reset then return end
            pathMove(Vector3.new(2282, 20, -2065))
            if reset then return end
        end

        if Bot.Character:FindFirstChild("HumanoidRootPart") and (Vector3.new(2141, 20, -2527) - Bot.Character.HumanoidRootPart.Position).magnitude < 5 then
            pathMove(Vector3.new(2211, 20, -2459))
            if reset then return end
            pathMove(Vector3.new(2282, 20, -2065))
            if reset then return end
        end

        if Bot.Character:FindFirstChild("HumanoidRootPart") and (Vector3.new(-234, 20, 1575) - Bot.Character.HumanoidRootPart.Position).magnitude < 5 then
            pathMove(Vector3.new(-246, 20, 1621))
            if reset then return end
        end

        if Bot.Character:FindFirstChild("HumanoidRootPart") and (Vector3.new(-246, 20, 1579) - Bot.Character.HumanoidRootPart.Position).magnitude < 5 then
            pathMove(Vector3.new(-246, 20, 1621))
            if reset then return end
        end

        if Bot.Character:FindFirstChild("HumanoidRootPart") and (Vector3.new(2213, 20, -2658) - Bot.Character.HumanoidRootPart.Position).magnitude < 5 then
            pathMove(Vector3.new(2176, 20, -2690))
            if reset then return end
            pathMove(Vector3.new(2069, 20, -3174))
            if reset then return end
        end

        if Bot.Character:FindFirstChild("HumanoidRootPart") and (Vector3.new(2135, 20, -2651) - Bot.Character.HumanoidRootPart.Position).magnitude < 5 then
            pathMove(Vector3.new(2176, 20, -2690))
            if reset then return end
            pathMove(Vector3.new(2069, 20, -3174))
            if reset then return end
        end

        if Bot.Character:FindFirstChild("HumanoidRootPart") and (Vector3.new(2103, 20, -2606) - Bot.Character.HumanoidRootPart.Position).magnitude < 5 then
            pathMove(Vector3.new(2211, 20, -2459))
            if reset then return end
            pathMove(Vector3.new(2282, 20, -2065))
            if reset then return end
        end

        if Bot.Character:FindFirstChild("HumanoidRootPart") and (Vector3.new(2073, 20, -2551) - Bot.Character.HumanoidRootPart.Position).magnitude < 5 then
            pathMove(Vector3.new(2211, 20, -2459))
            if reset then return end
            pathMove(Vector3.new(2282, 20, -2065))
            if reset then return end
        end

        if Bot.Character:FindFirstChild("HumanoidRootPart") and (Vector3.new(733, 39, 1113) - Bot.Character.HumanoidRootPart.Position).magnitude < 5 then
            pathMove(Vector3.new(722, 39, 1077))
            if reset then return end
        end

        if Bot.Character:FindFirstChild("HumanoidRootPart") and (Vector3.new(733, 39, 1113) - Bot.Character.HumanoidRootPart.Position).magnitude < 5 then
            pathMove(Vector3.new(722, 39, 1077))
            if reset then return end
        end

        if Bot.Character:FindFirstChild("HumanoidRootPart") and (Vector3.new(227, 63, 1132) - Bot.Character.HumanoidRootPart.Position).magnitude < 5 then
            pathMove(Vector3.new(215, 63, 1116))
            if reset then return end
            pathMove(Vector3.new(175, 63, 1113))
            if reset then return end
        end

        if Bot.Character:FindFirstChild("HumanoidRootPart") and (Vector3.new(-1164, 19, -1593) - Bot.Character.HumanoidRootPart.Position).magnitude < 5 then
            pathMove(Vector3.new(-1193, 19, -1597))
            if reset then return end
            pathMove(Vector3.new(-1192, 19, -1617))
            if reset then return end
        end

        if Bot.Character:FindFirstChild("HumanoidRootPart") and (Vector3.new(-1402, 20, -1759) - Bot.Character.HumanoidRootPart.Position).magnitude < 5 then
            pathMove(Vector3.new(-1363, 20, -1759))
            if reset then return end
        end

        if Bot.Character:FindFirstChild("HumanoidRootPart") and (Vector3.new(-1375, 20, -1757) - Bot.Character.HumanoidRootPart.Position).magnitude < 5 then
            pathMove(Vector3.new(-1363, 20, -1759))
            if reset then return end
        end
    else
        if Bot.Character:FindFirstChild("HumanoidRootPart") and (Bot.Character.HumanoidRootPart.Position - Vector3.new(-2946, -50, 2440)).magnitude < 50 then
            pathFind(Vector3.new(-2957, -48, 2406))
            pathMove(Vector3.new(-2953, -53, 2363))
            pathMove(Vector3.new(-2956, -70, 2358))
            pathMove(Vector3.new(-2951, -65, 2329))
            pathMove(Vector3.new(-2949, -82, 2329))
            pathMove(Vector3.new(-2947, -75, 2301))
            pathMove(Vector3.new(-2946, -71, 2300))
            pathMove(Vector3.new(-2940, -63, 2258))
        else
            if Bot.Character:FindFirstChild("HumanoidRootPart") and Bot.Character.HumanoidRootPart.Position.Y < -20 then
                pathFind(Vector3.new(-1395, -25, -1947))
                if reset then return end
                pathMove(Vector3.new(-1396, -24, -1931))
                if reset then return end
                pathMove(Vector3.new(-1453, 0, -1930))
                if reset then return end
                pathMove(Vector3.new(-1453, 0, -1952))
                if reset then return end
                pathMove(Vector3.new(-1483, 0, -1952))
                if reset then return end
            else
                pathFind(Vector3.new(-1482, -1, -1948))
                if reset then return end
            end


            pathMove(Vector3.new(-1484, 19, -1908))
            if reset then return end
            pathMove(Vector3.new(-1485, 19, -1756))
            if reset then return end
            pathMove(Vector3.new(-1448, 19, -1730))
            if reset then return end
            pathMove(Vector3.new(-1351, 19, -1732))
            if reset then return end
        end
    end

    wait(1)
    
    RobbingLocation = false
    respawning = false

    local plrUtils = game:GetService("ReplicatedStorage").Game.PlayerUtils
    local oldHasKey = require(plrUtils).hasKey
    require(plrUtils).hasKey = function() 
        return true
    end
end

local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
function TPReturner()
    local Site;
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end
    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end
    local num = 0;
    for i,v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        if tonumber(v.maxPlayers) > tonumber(v.playing) and tonumber(v.playing) > config.MinPlayers and tonumber(v.ping) < config.MaxPing then
            for _,Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        local delFile = pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = {}
                            table.insert(AllIDs, actualHour)
                        end)
                    end
                end
                num = num + 1
            end
            if Possible == true then
                table.insert(AllIDs, ID)
                wait()
                pcall(function()
                    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                    wait()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                end)
                wait(4)
            end
        end
    end
end
 
function Teleport()
   while wait() do
       pcall(function()
           TPReturner()
           if foundAnything ~= "" then
               TPReturner()
           end
       end)
   end
end

function GetPos(location)
    local ClosestDistance = nil
    local MinDistance = math.huge
    for k, v in pairs(Positions) do
        if (v - location).Magnitude + 5 <= MinDistance then
            local IgnorePos = false
            for k, l in pairs(game:GetService("Workspace").Vehicles:GetChildren()) do
                if l.Name == "Jeep" or l.Name == "Camaro" then
                    if (Vector3.new(l.Engine.Position.X, 500, l.Engine.Position.Z) - v).magnitude < 50 then
                        if (Vector3.new(l.Engine.Position.X, 500, l.Engine.Position.Z) - v).magnitude > 5 then
                            IgnorePos = true
                        end
                    end
                end
            end
            if not IgnorePos then
                MinDistance = (v - location).Magnitude
                ClosestDistance = v
            end
        end
    end
    for k, v in pairs(game:GetService("Workspace").Vehicles:GetChildren()) do
        if v.Name == "Jeep" or v.Name == "Camaro" then
            if v.Seat.PlayerName.Value == "" then

                local rayOrigin = v.Seat.Position + Vector3.new(0, 5, 0)
                local ray = Ray.new(rayOrigin, rayDirection1)
                local rain = game:GetService("Workspace"):FindFirstChild("Rain")
                if rain ~= nil then
                    local ignoreStuff = {rain.RainDroplets, rain.RainFall}
                    if platform ~= nil then
                        table.insert(ignoreStuff, #(ignoreStuff), platform)
                    end
                    for k, v in pairs(Bot:GetDescendants()) do
                        table.insert(ignoreStuff, #(ignoreStuff), v)
                    end
                    hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
                else
                    local ignoreStuff = {}
                    if platform ~= nil then
                        table.insert(ignoreStuff, #(ignoreStuff), platform)
                    end
                    for k, v in pairs(Bot:GetDescendants()) do
                        table.insert(ignoreStuff, #(ignoreStuff), v)
                    end
                    hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
                end
                
                if hit == nil then
                    if (v.Seat.Position - location).Magnitude + 5 <= MinDistance then
                        MinDistance = (v.Seat.Position - location).Magnitude
                        ClosestDistance = v.Seat.Position
                    end
                end
            end
        end
    end
    return ClosestDistance
end

function BotMove(location, LocationName, teleporting)

    Car = nil

    for i,v in pairs(game:GetService("Workspace").Vehicles:GetChildren()) do
        if pcall(function() return v.Seat.PlayerName end) then
            if v.Seat.PlayerName.Value == Bot.Name then
                Car = v
            end
        end
    end

    if platform ~= nil then
        platform:Destroy()
    end

    wait(0.1)

    if Car == nil and Bot.Team.Name ~= "Prisoner" then
        if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
        local rayOrigin = Bot.Character.HumanoidRootPart.Position + Vector3.new(0, -2, 0)
        local ray = Ray.new(rayOrigin, rayDirection)
        local rain = game:GetService("Workspace"):FindFirstChild("Rain")
        if rain ~= nil then
            local ignoreStuff = {rain.RainDroplets, rain.RainFall}
            if platform ~= nil then
                table.insert(ignoreStuff, #(ignoreStuff), platform)
            end
            for k, v in pairs(Bot:GetDescendants()) do
                table.insert(ignoreStuff, #(ignoreStuff), v)
            end
            hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
        else
            local ignoreStuff = {}
            if platform ~= nil then
                table.insert(ignoreStuff, #(ignoreStuff), platform)
            end
            for k, v in pairs(Bot:GetDescendants()) do
                table.insert(ignoreStuff, #(ignoreStuff), v)
            end
            hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
        end
        if hit ~= nil then
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.CFrame.X, pos.Y, Bot.Character.HumanoidRootPart.CFrame.Z)
            wait(0.5)
        else
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.CFrame.X, 300, Bot.Character.HumanoidRootPart.CFrame.Z)
            local rayDirection2 = Vector3.new(0, -1, 0)
            while hit == nil do
                if reset then return end
                rayOrigin = Bot.Character.HumanoidRootPart.Position + Vector3.new(0, -2, 0)
                ray = Ray.new(rayOrigin, rayDirection2)
                rain = game:GetService("Workspace"):FindFirstChild("Rain")
                if rain ~= nil then
                    ignoreStuff = {rain.RainDroplets, rain.RainFall}
                    if platform ~= nil then
                        table.insert(ignoreStuff, #(ignoreStuff), platform)
                    end
                    for k, v in pairs(Bot:GetDescendants()) do
                        table.insert(ignoreStuff, #(ignoreStuff), v)
                    end
                    hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
                else
                    local ignoreStuff = {}
                    if platform ~= nil then
                        table.insert(ignoreStuff, #(ignoreStuff), platform)
                    end
                    for k, v in pairs(Bot:GetDescendants()) do
                        table.insert(ignoreStuff, #(ignoreStuff), v)
                    end
                    hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
                end
                wait()
            end
        end
        if reset then return end
        Bot.Character.HumanoidRootPart.Velocity = Vector3.new()

        local args = {
        [1] = "Chassis",
        [2] = "Jeep"
        }
        game:GetService("ReplicatedStorage").GarageSpawnVehicle:FireServer(unpack(args))
    end

    wait(2)

    if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
    for i,v in pairs(game:GetService("Workspace").Vehicles:GetChildren()) do
        if pcall(function() return v.Seat.PlayerName end) then
            if v.Seat.PlayerName.Value == Bot.Name then
                Car = v
            end
        end
    end
    if reset then return end

    while Car == nil do
        if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.CFrame.X, 500, Bot.Character.HumanoidRootPart.CFrame.Z)
        wait(1)
        if reset then return end
        if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
        move(GetPos(Bot.Character.HumanoidRootPart.Position))
        if reset then return end

        local rayOrigin = Bot.Character.HumanoidRootPart.Position + Vector3.new(0, -2, 0)
        local ray = Ray.new(rayOrigin, rayDirection)
        local rain = game:GetService("Workspace"):FindFirstChild("Rain")
        if rain ~= nil then
            ignoreStuff = {rain.RainDroplets, rain.RainFall}
            if platform ~= nil then
                table.insert(ignoreStuff, #(ignoreStuff), platform)
            end
            for k, v in pairs(Bot:GetDescendants()) do
                table.insert(ignoreStuff, #(ignoreStuff), v)
            end
            hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
        else
            local ignoreStuff = {}
            if platform ~= nil then
                table.insert(ignoreStuff, #(ignoreStuff), platform)
            end
            for k, v in pairs(Bot:GetDescendants()) do
                table.insert(ignoreStuff, #(ignoreStuff), v)
            end
            hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
        end

        if reset then return end
        if hit ~= nil then
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.CFrame.X, pos.Y, Bot.Character.HumanoidRootPart.CFrame.Z)
            wait(0.5)
        else
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.CFrame.X, 300, Bot.Character.HumanoidRootPart.CFrame.Z)
            local rayDirection2 = Vector3.new(0, -1, 0)
            while hit == nil do
                if reset then return end
                rayOrigin = Bot.Character.HumanoidRootPart.Position + Vector3.new(0, -2, 0)
                ray = Ray.new(rayOrigin, rayDirection2)
                rain = game:GetService("Workspace"):FindFirstChild("Rain")
                if rain ~= nil then
                    ignoreStuff = {rain.RainDroplets, rain.RainFall}
                    if platform ~= nil then
                        table.insert(ignoreStuff, #(ignoreStuff), platform)
                    end
                    for k, v in pairs(Bot:GetDescendants()) do
                        table.insert(ignoreStuff, #(ignoreStuff), v)
                    end
                    hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
                else
                    local ignoreStuff = {}
                    if platform ~= nil then
                        table.insert(ignoreStuff, #(ignoreStuff), platform)
                    end
                    for k, v in pairs(Bot:GetDescendants()) do
                        table.insert(ignoreStuff, #(ignoreStuff), v)
                    end
                    hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
                end
                wait()
            end
        end
        if reset then return end
        if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
        Bot.Character.HumanoidRootPart.Velocity = Vector3.new()

        local UI = require(game:GetService("ReplicatedStorage").Module:WaitForChild("UI"));
        for i,v in pairs (UI.CircleAction.Specs) do
            if v.Name == "Hijack" then
                if v.Part.Parent.Name == "Camaro" or v.Part.Parent.Name == "Jeep" then
                    v.Duration = 0
                    v.Timed = true
                    v:Callback(v, true)
                end
            end
        end

        wait(0.5)
        if reset then return end

        local UI = require(game:GetService("ReplicatedStorage").Module:WaitForChild("UI"));
        for i,v in pairs (UI.CircleAction.Specs) do
            if v.Name == "Enter Driver" then
                if reset then return end
                if v.Part.Parent.Name == "Camaro" or v.Part.Parent.Name == "Jeep" then
                    local rayOrigin = v.Part.Position + Vector3.new(0, 10, 0)
                    local ray = Ray.new(rayOrigin, rayDirection1)
                    local rain = game:GetService("Workspace"):FindFirstChild("Rain")
                    if rain ~= nil then
                        local ignoreStuff = {rain.RainDroplets, rain.RainFall}
                        if platform ~= nil then
                            table.insert(ignoreStuff, #(ignoreStuff), platform)
                        end
                        for k, v in pairs(Bot:GetDescendants()) do
                            table.insert(ignoreStuff, #(ignoreStuff), v)
                        end
                        hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
                    else
                        local ignoreStuff = {}
                        if platform ~= nil then
                            table.insert(ignoreStuff, #(ignoreStuff), platform)
                        end
                        for k, v in pairs(Bot:GetDescendants()) do
                            table.insert(ignoreStuff, #(ignoreStuff), v)
                        end
                        hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
                    end
                    if hit == nil then
                        v:Callback(v, true)
                    end
                end
            end
        end

        wait(1)
        if reset then return end
        
        for i,v in pairs(game:GetService("Workspace").Vehicles:GetChildren()) do
            if pcall(function() return v.Seat.PlayerName end) then
                if v.Seat.PlayerName.Value == Bot.Name then
                    Car = v
                end
            end
        end

        if reset then return end
    end

    local position = Vector3.new(0, 0, 0)
    local distance = 100

    if teleporting then
        while (game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position - position).magnitude > distance do
            if LocationName == "museum" then
                while Car.Seat.PlayerName.Value == game:GetService("Players").LocalPlayer.Name do
                    if reset then return end
                    Car.Engine:PivotTo(CFrame.new(1121, 116, 1296))
                    wait()
                end
                position = Vector3.new(1121, 116, 1296)
                distance = 500
            end
            if LocationName == "bank" then
                while Car.Seat.PlayerName.Value == game:GetService("Players").LocalPlayer.Name do
                    if reset then return end
                    Car.Engine:PivotTo(CFrame.new(37, 25, 864))
                    wait()
                end
                position = Vector3.new(37, 25, 864)
            end
            if LocationName == "mansion" then
                while Car.Seat.PlayerName.Value == game:GetService("Players").LocalPlayer.Name do
                    if reset then return end
                    Car.Engine:PivotTo(CFrame.new(3197, 63, -4655))
                    wait()
                end
                position = Vector3.new(3197, 63, -4655)
            end
            if LocationName == "jewelry store" then
                while Car.Seat.PlayerName.Value == game:GetService("Players").LocalPlayer.Name do
                    if reset then return end
                    Car.Engine:PivotTo(CFrame.new(131, 19, 1304))
                    wait()
                end
                position = Vector3.new(131, 19, 1304)
            end
            if LocationName == "tomb" then
                while Car.Seat.PlayerName.Value == game:GetService("Players").LocalPlayer.Name do
                    if reset then return end
                    Car.Engine:PivotTo(CFrame.new(544, 27, -501))
                    wait()
                end 
                position = Vector3.new(544, 26, -522)
            end
            if LocationName == "casino vault" then
                while Car.Seat.PlayerName.Value == game:GetService("Players").LocalPlayer.Name do
                    if reset then return end
                    Car.Engine:PivotTo(CFrame.new(250, -74, -4527))
                    wait()
                end
                position = Vector3.new(250, -74, -4527)
            end
            if LocationName == "casino security" then
                while Car.Seat.PlayerName.Value == game:GetService("Players").LocalPlayer.Name do
                    if reset then return end
                    Car.Engine:PivotTo(CFrame.new(-99, 71, -4707))
                    wait()
                end
                position = Vector3.new(-99, 71, -4707)
            end
            wait()
            if reset then return end
        end
        return
    end
    if reset then return end
    Car.Engine.CFrame = CFrame.new(Car.Engine.CFrame.X, 500, Car.Engine.CFrame.Z)
    wait(1)
    if reset then return end
    if LocationName ~= "Train" then
        while (Vector3.new(Car.Engine.Position.X, 500, Car.Engine.Position.Z) - location).magnitude > 11 do 
            if reset then return end
            move(location)
            if reset then return end
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            wait()
        end
    else
        for k, v in pairs(game.Workspace.Trains:GetChildren()) do
            if string.sub(v.Name, 1, 6) == "BoxCar" then
                location = v
                break
            end
        end
        if reset then return end
        if location == nil then return end
        local rayOrigin = location.Model.Rob.Gold.Position + Vector3.new(0, 10, 0)
        local rayDirection2 = Vector3.new(0, 300, 0)
        local ray = Ray.new(rayOrigin, rayDirection2)
        local rain = game:GetService("Workspace"):FindFirstChild("Rain")
        if rain ~= nil then
            local ignoreStuff = {rain.RainDroplets, rain.RainFall}
            if platform ~= nil then
                table.insert(ignoreStuff, #(ignoreStuff), platform)
            end
            for k, v in pairs(Bot:GetDescendants()) do
                table.insert(ignoreStuff, #(ignoreStuff), v)
            end
            for k, v in pairs(Car:GetDescendants()) do
                table.insert(ignoreStuff, #(ignoreStuff), v)
            end
            hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
        else
            local ignoreStuff = {}
            if platform ~= nil then
                table.insert(ignoreStuff, #(ignoreStuff), platform)
            end
            for k, v in pairs(Bot:GetDescendants()) do
                table.insert(ignoreStuff, #(ignoreStuff), v)
            end
            for k, v in pairs(Car:GetDescendants()) do
                table.insert(ignoreStuff, #(ignoreStuff), v)
            end
            hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
        end
        while location and location:FindFirstChild("Model") and (hit ~= nil or (Vector3.new(Car.Engine.Position.X, 500, Car.Engine.Position.Z) - Vector3.new(location.Model.Rob.Gold.Position.X, 500, location.Model.Rob.Gold.Position.Z)).magnitude > 11) do 
            if not location then return end
            if not location:FindFirstChild("Model") then return end
            if reset then return end
            move(Vector3.new(0, 0, 0), location.Model.Rob.Gold)
            if not location then return end
            if not location:FindFirstChild("Model") then return end
            rayOrigin = location.Model.Rob.Gold.Position + Vector3.new(0, 10, 0)
            ray = Ray.new(rayOrigin, rayDirection2)
            rain = game:GetService("Workspace"):FindFirstChild("Rain")
            if rain ~= nil then
                ignoreStuff = {rain.RainDroplets, rain.RainFall}
                if platform ~= nil then
                    table.insert(ignoreStuff, #(ignoreStuff), platform)
                end
                for k, v in pairs(Bot:GetDescendants()) do
                    table.insert(ignoreStuff, #(ignoreStuff), v)
                end
                for k, v in pairs(Car:GetDescendants()) do
                    table.insert(ignoreStuff, #(ignoreStuff), v)
                end
                hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
            else
                local ignoreStuff = {}
                if platform ~= nil then
                    table.insert(ignoreStuff, #(ignoreStuff), platform)
                end
                for k, v in pairs(Bot:GetDescendants()) do
                    table.insert(ignoreStuff, #(ignoreStuff), v)
                end
                for k, v in pairs(Car:GetDescendants()) do
                    table.insert(ignoreStuff, #(ignoreStuff), v)
                end
                hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
            end
            if reset then return end
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            wait()
        end
    end
    if reset then return end
    if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
    local rayOrigin = Bot.Character.HumanoidRootPart.Position + Vector3.new(0, -5, 0)
    local ray = Ray.new(rayOrigin, rayDirection)
    local rain = game:GetService("Workspace"):FindFirstChild("Rain")
    if rain ~= nil then
        ignoreStuff = {rain.RainDroplets, rain.RainFall}
        if platform ~= nil then
            table.insert(ignoreStuff, #(ignoreStuff), platform)
        end
        for k, v in pairs(Bot:GetDescendants()) do
            table.insert(ignoreStuff, #(ignoreStuff), v)
        end
        hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
    else
        local ignoreStuff = {}
        if platform ~= nil then
            table.insert(ignoreStuff, #(ignoreStuff), platform)
        end
        for k, v in pairs(Bot:GetDescendants()) do
            table.insert(ignoreStuff, #(ignoreStuff), v)
        end
        hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
    end
    if reset then return end
    if hit ~= nil then
        Car.Engine.CFrame = CFrame.new(Car.Engine.CFrame.X, pos.Y, Car.Engine.CFrame.Z)
    else
        Car.Engine.CFrame = CFrame.new(Car.Engine.CFrame.X, 300, Car.Engine.CFrame.Z)
        local rayDirection2 = Vector3.new(0, -1, 0)
        while hit == nil do
            if reset then return end
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            rayOrigin = Bot.Character.HumanoidRootPart.Position + Vector3.new(0, -3, 0)
            ray = Ray.new(rayOrigin, rayDirection2)
            rain = game:GetService("Workspace"):FindFirstChild("Rain")
            if rain ~= nil then
                ignoreStuff = {rain.RainDroplets, rain.RainFall}
                if platform ~= nil then
                    table.insert(ignoreStuff, #(ignoreStuff), platform)
                end
                for k, v in pairs(Bot:GetDescendants()) do
                    table.insert(ignoreStuff, #(ignoreStuff), v)
                end
                hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
            else
                local ignoreStuff = {}
                if platform ~= nil then
                    table.insert(ignoreStuff, #(ignoreStuff), platform)
                end
                for k, v in pairs(Bot:GetDescendants()) do
                    table.insert(ignoreStuff, #(ignoreStuff), v)
                end
                hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
            end
            wait()
        end
    end

    Car.Engine.Velocity = Vector3.new()
    

    if LocationName == "volcano base" then
        wait(0.5)
        pathMove(Vector3.new(2275, 25, -2024))
        if reset then return end
        pathMove(Vector3.new(2204, 25, -2479))
        if reset then return end
        pathMove(Vector3.new(2289, 25, -2584))
        if reset then return end
        wait(1)
        if reset then return end
        pathMove(Vector3.new(2204, 25, -2479))
        if reset then return end
        pathMove(Vector3.new(2275, 25, -2024))
        if reset then return end
    end

    wait(0.5)
end

function move(pos, object)

    local Car = nil
    for i,v in pairs(game:GetService("Workspace").Vehicles:GetChildren()) do
        if pcall(function() return v.Seat.PlayerName end) then
            if v.Seat.PlayerName.Value == Bot.Name then
                Car = v
            end
        end
    end

    local moveTime = 0
    if object == nil then
        if Car == nil then
            pos = Vector3.new(pos.X, 500, pos.Z)
            if reset then return end
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.Position.X, 500, Bot.Character.HumanoidRootPart.Position.Z)
            while Bot.Character:FindFirstChild("HumanoidRootPart") and (Vector3.new(Bot.Character.HumanoidRootPart.Position.X, 500, Bot.Character.HumanoidRootPart.Position.Z) - pos).magnitude > 5 do
                if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
                local amount = (Bot.Character.HumanoidRootPart.Position - pos).magnitude
                local velocity = (Bot.Character.HumanoidRootPart.Position - pos) / amount
                Bot.Character.HumanoidRootPart.Velocity = Vector3.new(velocity.X * config.FlySpeed, 0.1, velocity.Z * config.FlySpeed)
                Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.Position.X, 500, Bot.Character.HumanoidRootPart.Position.Z)
                wait()
                moveTime += 0.03
                if moveTime > 30 then
                    LogMessage("possibly stuck, ressetting")
                    Bot.Character.Humanoid.Health = 0
                    exitCar.OnJump()
                    return
                end
                if reset then return end
            end
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Bot.Character.HumanoidRootPart.CFrame = CFrame.new(pos)
            Bot.Character.HumanoidRootPart.Velocity = Vector3.new()
        else
            pos = Vector3.new(pos.X, 500, pos.Z)
            if reset then return end
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Car.Engine.CFrame = CFrame.new(Car.Engine.Position.X, 500, Car.Engine.Position.Z)
            while (Vector3.new(Car.Engine.Position.X, 500, Car.Engine.Position.Z) - pos).magnitude > 10 do
                if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
                local amount = (Car.Engine.Position - pos).magnitude
                local velocity = (Car.Engine.Position - pos) / amount
                Car.Engine.Velocity = Vector3.new(velocity.X * config.CarSpeed, 0.1, velocity.Z * config.CarSpeed)
                Car.Engine.CFrame = CFrame.new(Car.Engine.Position.X, 500, Car.Engine.Position.Z)
                wait()
                moveTime += 0.03
                if moveTime > 30 then
                    LogMessage("possibly stuck, ressetting")
                    Bot.Character.Humanoid.Health = 0
                    exitCar.OnJump()
                    return
                end
                if reset then return end
            end
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Car.Engine.CFrame = CFrame.new(pos)
            Car.Engine.Velocity = Vector3.new()
        end
    else
        if Car == nil then
            if reset then return end
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.Position.X, 500, Bot.Character.HumanoidRootPart.Position.Z)
            while Bot.Character:FindFirstChild("HumanoidRootPart") and (Vector3.new(Bot.Character.HumanoidRootPart.Position.X, 500, Bot.Character.HumanoidRootPart.Position.Z) - Vector3.new(object.Position.X, 500, object.Position.Z)).magnitude > 5 do
                if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
                local amount = (Bot.Character.HumanoidRootPart.Position - Vector3.new(object.Position.X, 500, object.Position.Z)).magnitude
                local velocity = (Bot.Character.HumanoidRootPart.Position - Vector3.new(object.Position.X, 500, object.Position.Z)) / amount
                Bot.Character.HumanoidRootPart.Velocity = Vector3.new(velocity.X * config.FlySpeed, 0.1, velocity.Z * config.FlySpeed)
                Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.Position.X, 500, Bot.Character.HumanoidRootPart.Position.Z)
                wait()
                moveTime += 0.03
                if moveTime > 30 then
                    LogMessage("possibly stuck, ressetting")
                    Bot.Character.Humanoid.Health = 0
                    exitCar.OnJump()
                    return
                end
                if reset then return end
            end
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(object.Position.X, 500, object.Position.Z))
            Bot.Character.HumanoidRootPart.Velocity = Vector3.new()
        else
            if reset then return end
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Car.Engine.CFrame = CFrame.new(Car.Engine.Position.X, 500, Car.Engine.Position.Z)
            while (Vector3.new(Car.Engine.Position.X, 500, Car.Engine.Position.Z) - Vector3.new(object.Position.X, 500, object.Position.Z)).magnitude > 10 do
                if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
                local amount = (Car.Engine.Position - Vector3.new(object.Position.X, 500, object.Position.Z)).magnitude
                local velocity = (Car.Engine.Position - Vector3.new(object.Position.X, 500, object.Position.Z)) / amount
                Car.Engine.Velocity = Vector3.new(velocity.X * config.CarSpeed, 0.1, velocity.Z * config.CarSpeed)
                Car.Engine.CFrame = CFrame.new(Car.Engine.Position.X, 500, Car.Engine.Position.Z)
                wait()
                moveTime += 0.03
                if moveTime > 30 then
                    LogMessage("possibly stuck, ressetting")
                    Bot.Character.Humanoid.Health = 0
                    exitCar.OnJump()
                    return
                end
                if reset then return end
            end
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Car.Engine.CFrame = CFrame.new(Vector3.new(object.Position.X, 500, object.Position.Z))
            Car.Engine.Velocity = Vector3.new()
        end
    end
end

function pathFind(pos)

    local PathFindingService = game:GetService("PathfindingService")
    local human = game.Players.LocalPlayer.Character.Humanoid
    local torso = game.Players.LocalPlayer.Character.HumanoidRootPart

    local path = PathFindingService:CreatePath()
    path:ComputeAsync(torso.Position, pos)
    local Waypoints = path:GetWaypoints()

    for i, Waypoint in pairs(Waypoints) do
        pathFindMove(Waypoint.Position + Vector3.new(0, 2, 0))
    end
end

function pathFindMove(pos)

    if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
    while Bot.Character:FindFirstChild("HumanoidRootPart") and (Bot.Character.HumanoidRootPart.Position - pos).magnitude > 1 do
        if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
        local amount = (Bot.Character.HumanoidRootPart.Position - pos).magnitude
        local MoveDist = (Bot.Character.HumanoidRootPart.Position - pos) / amount
        for i = 1, amount, 1 do
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.Position - MoveDist)
            Bot.Character.HumanoidRootPart.Velocity = Vector3.new(0,1.005,0)
            wait()
            if reset then return end
        end
        wait(0.1)
    end
    if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
    Bot.Character.HumanoidRootPart.CFrame = CFrame.new(pos)
end

function pathMove(pos)

    local Car = nil
    if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
    for i,v in pairs(game:GetService("Workspace").Vehicles:GetChildren()) do
        if pcall(function() return v.Seat.PlayerName end) then
            if v.Seat.PlayerName.Value == Bot.Name then
                Car = v
            end
        end
    end

    local moveTime = 0
    if Car == nil then
        if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
        while Bot.Character:FindFirstChild("HumanoidRootPart") and (Bot.Character.HumanoidRootPart.Position - pos).magnitude > 5 do
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            local amount = (Bot.Character.HumanoidRootPart.Position - pos).magnitude / (config.GroundSpeed / 2)
            local MoveDist = (Bot.Character.HumanoidRootPart.Position - pos) / amount
            for i = 1, amount, 1 do
                if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
                Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.Position - MoveDist)
                Bot.Character.HumanoidRootPart.Velocity = Vector3.new(0,1.005,0)
                wait()
                moveTime += 0.03
                if moveTime > 15 then
                    LogMessage("possibly stuck, ressetting")
                    Bot.Character.Humanoid.Health = 0
                    exitCar.OnJump()
                    return
                end
                if reset then return end
            end
            wait(0.1)
            moveTime += 0.1
        end
        if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(pos)
    else
        if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
        while (Car.Engine.Position - pos).magnitude > 5 do
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            local amount = (Car.Engine.Position - pos).magnitude / (config.GroundSpeed / 2)
            local MoveDist = (Car.Engine.Position - pos) / amount
            for i = 1, amount, 1 do
                if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
                Car.Engine.CFrame = CFrame.new(Car.Engine.Position - MoveDist)
                Car.Engine.Velocity = Vector3.new(0,1.005,0)
                wait()
                moveTime += 0.03
                if moveTime > 15 then
                    LogMessage("possibly stuck, ressetting")
                    Bot.Character.Humanoid.Health = 0
                    exitCar.OnJump()
                    return
                end
                if reset then return end
            end
            wait(0.1)
            moveTime += 0.1
        end
        if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
        Car.Engine.CFrame = CFrame.new(pos)
    end
end

coroutine.wrap(function()
    while true do
        if GetMansionStatus() then
            ProjectAutoV2.MansionToggle.Text = "Mansion -- OPEN"
        else
            ProjectAutoV2.MansionToggle.Text = "Mansion -- CLOSED OR IN PROGRESS"
        end
        if GetMuseumStatus() then
            ProjectAutoV2.MuseumToggle.Text = "Museum -- OPEN"
        else
            ProjectAutoV2.MuseumToggle.Text = "Museum -- CLOSED"
        end
        if GetBankStatus() then
            ProjectAutoV2.BankToggle.Text = "Bank -- OPEN"
        else
            ProjectAutoV2.BankToggle.Text = "Bank -- CLOSED"
        end
        if GetJewelStatus() then
            ProjectAutoV2.JewelryToggle.Text = "Jewelry -- OPEN"
        else
            ProjectAutoV2.JewelryToggle.Text = "Jewelry -- CLOSED"
        end
        if GetCasinoStatus() then
            ProjectAutoV2.CasinoToggle.Text = "Casino -- OPEN"
        else
            ProjectAutoV2.CasinoToggle.Text = "Casino -- CLOSED"
        end
        if GetTombStatus() then
            ProjectAutoV2.TombToggle.Text = "Tomb -- OPEN"
        else
            ProjectAutoV2.TombToggle.Text = "Tomb -- CLOSED"
        end

        local robPlane = false
        if game.Workspace:FindFirstChild("Plane") then
            robPlane = true
        end

        if robPlane then
            ProjectAutoV2.PlaneToggle.Text = "Plane -- YES"
        else
            ProjectAutoV2.PlaneToggle.Text = "Plane -- NO"
        end

        if game.Workspace:FindFirstChild("Drop") then
            ProjectAutoV2.DropToggle.Text = "Air Drop -- YES"
        else
            ProjectAutoV2.DropToggle.Text = "Air Drop -- NO"
        end

        local robTrain = false
        for k, v in pairs(game.Workspace.Trains:GetChildren()) do
            if string.sub(v.Name, 1, 6) == "BoxCar" then
                robTrain = true
                break
            end
        end

        if robTrain then
            ProjectAutoV2.TrainToggle.Text = "Train -- YES"
        else
            ProjectAutoV2.TrainToggle.Text = "Train -- NO"
        end
        wait(0.1)
    end
end)()

local robbedMuseum = false
local robbedBank = false
local robbedJewel = false
local robbedCasino = false
local robbedTomb = false
local robbedPlane = false
local robbedTrain = false

function robLocation()
    if RobbingLocation then
        return
    end

    if config.DropToggled then
        if game.Workspace:FindFirstChild("Drop") then
            local pos = nil
            local ClosestDistance = math.huge
            local Drop = nil
            for k, v in pairs(game:GetService("Workspace"):GetChildren()) do
                if v.Name == "Drop" and v:FindFirstChild("Root") then
                    if Bot.Character:FindFirstChild("HumanoidRootPart") and (v.Root.Position - Bot.Character.HumanoidRootPart.Position).magnitude < ClosestDistance then
                        if not v:FindFirstChild("Root") then return end

                        ClosestDistance = (v.Root.Position - Bot.Character.HumanoidRootPart.Position).magnitude
                        local rayOrigin = v.Root.Position + Vector3.new(0, -2, 0)
                        local rayDirection2 = Vector3.new(0, -1, 0)
                        local ray = Ray.new(rayOrigin, rayDirection2)
                        local rain = game:GetService("Workspace"):FindFirstChild("Rain")
                        if rain ~= nil then
                            local ignoreStuff = {rain.RainDroplets, rain.RainFall}
                            if not v:FindFirstChild("Root") then return end
                            for k, l in pairs(v:GetDescendants()) do
                                if not v:FindFirstChild("Root") then return end
                                table.insert(ignoreStuff, #(ignoreStuff), l)
                            end
                            hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
                        else
                            local ignoreStuff = {}
                            if not v:FindFirstChild("Root") then return end
                            for k, l in pairs(v:GetDescendants()) do
                                if not v:FindFirstChild("Root") then return end
                                table.insert(ignoreStuff, #(ignoreStuff), l)
                            end
                            hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
                        end
                        if hit ~= nil then
                            pos = Vector3.new(v.Root.Position.X, 500, v.Root.Position.Z) + Vector3.new(5, 0, 5)
                            if not v:FindFirstChild("Root") then return end
                            Drop = v
                        end
                    end
                end
            end
            if Drop then
                LogMessage("collecting an airdrop")
                RobbingLocation = true
                RobDrop(Drop, pos)
                return
            end
        end
    end

    local robPlane = false
    if config.PlaneToggled then
        if game.Workspace:FindFirstChild("Plane") and config.teleport then
            if game.Workspace.Plane:FindFirstChild("CargoPlane") then
                if game.Workspace.Plane.CargoPlane.Position.X > 0 then
                    for k, v in pairs(game.Workspace.Plane.Crates:GetChildren()) do
                        if v:GetChildren()[1].Transparency < 1 then
                            robPlane = true
                        end
                    end
                end
            end
        elseif game.Workspace:FindFirstChild("Plane") and not config.teleport then
            if game.Workspace.Plane:FindFirstChild("CargoPlane") then
                if game.Workspace.Plane.CargoPlane.Position.X < -1150 then
                    robPlane = true
                end
            end
        end
    end

    if robPlane then
        if not robbedPlane then
            RobbingLocation = true
            LogMessage("robbing cargo plane")
            RobPlane()
            return
        end
    else
        robbedPlane = false
    end

    local robTrain = false
    for k, v in pairs(game.Workspace.Trains:GetChildren()) do
        if string.sub(v.Name, 1, 6) == "BoxCar" then
            robTrain = true
            break
        end
    end

    if robTrain then
        if not robbedTrain and config.TrainToggled then
            RobbingLocation = true
            LogMessage("robbing cargo train")
            RobTrain()
            return
        end
    else
        robbedTrain = false
    end

    if config.MansionToggled then
        if GetMansionStatus() and Bot.Folder:FindFirstChild("MansionInvite") then
            RobbingLocation = true
            LogMessage("robbing mansion")
            RobMansion()
            return
        end
    end

    if config.MuseumToggled then
        if GetMuseumStatus() then
            if not robbedMuseum then
                RobbingLocation = true
                LogMessage("robbing museum")
                RobMuseum()
                return
            end
        else
            robbedMuseum = false
        end
    end

    if config.TombToggled then
        if GetTombStatus() then
            if not robbedTomb then
                RobbingLocation = true
                LogMessage("robbing tomb")
                RobTomb()
                return
            end
        else
            robbedTomb = false
        end
    end

    if config.BankToggled then
        if GetBankStatus() then
            if not robbedBank then
                RobbingLocation = true
                LogMessage("robbing bank")
                RobBank()
                return
            end
        else
            robbedBank = false
        end
    end

    if config.JewelToggled then
        if GetJewelStatus() then
            if not robbedJewel then
                RobbingLocation = true
                LogMessage("robbing jewelry store")
                RobJewel()
                return
            end
        else
            robbedJewel = false
        end
    end

    if config.CasinoToggled then
        if GetCasinoStatus() then
            if not robbedCasino then
                RobbingLocation = true
                LogMessage("robbing casino")
                RobCasino()
                return
            end
        else
            robbedCasino = false
        end
    end

    UpdateLog("waiting for locations to open")

    if config.ServerHop then
        serverHopTime += 1
        if serverHopTime > config.ServerHopWaitTime then
            UpdateLog("changing servers")
            saveStats()
            wait(0.1)
            if syn then
                syn.queue_on_teleport([[
                    repeat wait() until game:IsLoaded()
                    local session
                    local HttpService = game:GetService("HttpService")
                    if readfile and isfile then 
                        if isfile("ProjectAutoSession.txt") then
                            session = HttpService:JSONDecode(readfile("ProjectAutoSession.txt"))
                        end
                    end
                    _G.CurrentSession = session
                    repeat
                        local network = getupvalue(require(game.ReplicatedStorage.Module.AlexChassis).SetEvent, 1)
                        local teamHash = 'tomm5a8a'
                        network:FireServer(teamHash, "Prisoner")
                        wait(3)
                    until game.Players.localPlayer.PlayerGui.TeamGui.Enabled = false
                    wait(0.5)
                    loadstring(game:HttpGet("https://raw.githubusercontent.com/piggycacti/g35v2/main/45ggb3"))()
                ]])
            elseif queue_on_teleport then
                queue_on_teleport([[
                    repeat wait() until game:IsLoaded()
                    local session
                    local HttpService = game:GetService("HttpService")
                    if readfile and isfile then 
                        if isfile("ProjectAutoSession.txt") then
                            session = HttpService:JSONDecode(readfile("ProjectAutoSession.txt"))
                        end
                    end
                    _G.CurrentSession = session
                    wait(3)
                    repeat
                        local network = getupvalue(require(game.ReplicatedStorage.Module.AlexChassis).SetEvent, 1)
                        local teamHash = 'tomm5a8a'
                        network:FireServer(teamHash, "Prisoner")
                        wait(3)
                    until game.Players.localPlayer.PlayerGui.TeamGui.Enabled = false
                    wait(0.5)
                    loadstring(game:HttpGet("https://raw.githubusercontent.com/piggycacti/g35v2/main/45ggb3"))()
                ]])
            elseif fluxus then
                fluxus.queue_on_teleport([[
                    repeat wait() until game:IsLoaded()
                    local session
                    local HttpService = game:GetService("HttpService")
                    if readfile and isfile then 
                        if isfile("ProjectAutoSession.txt") then
                            session = HttpService:JSONDecode(readfile("ProjectAutoSession.txt"))
                        end
                    end
                    _G.CurrentSession = session
                    wait(3)
                    repeat
                        local network = getupvalue(require(game.ReplicatedStorage.Module.AlexChassis).SetEvent, 1)
                        local teamHash = 'tomm5a8a'
                        network:FireServer(teamHash, "Prisoner")
                        wait(3)
                    until game.Players.localPlayer.PlayerGui.TeamGui.Enabled = false
                    wait(0.5)
                    loadstring(game:HttpGet("https://raw.githubusercontent.com/piggycacti/g35v2/main/45ggb3"))()
                ]])
            end
            Teleport()
        end
    end
end

function RobBank()
    UpdateLog("going to bank")
    if reset then return end
    BotMove(Vector3.new(-1, 500, 865), "bank", config.teleport)
    if reset then return end
    wait(1)
    exitCar.OnJump()
    wait(0.5)

    if not GetBankStatus() then
        RobbingLocation = false
        return
    end

    UpdateLog("entering bank")

    if not config.teleport then
        pathMove(Vector3.new(-1, 25, 865))
        if reset then return end
        pathMove(Vector3.new(37, 25, 864))
        if reset then return end
    end
    
    pathMove(Vector3.new(40, 20, 924))
    if reset then return end

    local oldPosition = Bot.Character.HumanoidRootPart.Position
    Bot.Character.HumanoidRootPart.CFrame = CFrame.new(40, 20, 907) 
    wait(0.5)
    Bot.Character.HumanoidRootPart.CFrame = CFrame.new(oldPosition)
    wait(0.1)
    pathMove(Vector3.new(40, 20, 924))
    if reset then return end
    
    UpdateLog("going to vault")

    if game.Workspace.Banks:GetChildren()[1].Layout:FindFirstChild("02Basement") then
        
        pathMove(Vector3.new(73, 10, 919))
        if reset then return end
        pathMove(Vector3.new(86, 10, 918))
        if reset then return end
        pathMove(Vector3.new(93, 0, 964))
        if reset then return end
        pathMove(Vector3.new(47, -7, 951))
        if reset then return end
        pathMove(Vector3.new(1, -7, 959))
        if reset then return end

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end

        UpdateLog("collecting money")

        local oldPos = Bot.Character.HumanoidRootPart.Position
        if reset then return end
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(game.Workspace.Banks:GetChildren()[1].Layout:GetChildren()[1].TriggerDoor.Position)
        wait(0.5)
        if reset then return end
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(oldPos)
        wait(0.1)
        pathMove(Vector3.new(1, -7, 959))
        if reset then return end

        repeat 
            wait(0.1)
            local run = false
            if config.copAvoid then
                for k, v in pairs(game.Players:GetChildren()) do
                    if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                        if Bot.Character:FindFirstChild("HumanoidRootPart") and (v.Character.HumanoidRootPart.Position - Bot.Character.HumanoidRootPart.Position).magnitude < config.avoidCopRange and v.Team ~= Bot.Team then
                            run = true
                        end
                    end
                end
            end
            if run then
                break
            end
            if not GetBankStatus() then
                RobbingLocation = false
                return
            end
            if reset then return end
        until Bot.PlayerGui.RobberyMoneyGui.Enabled

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end
        
        
        repeat 
            wait(0.1)
            local run = false
            if config.copAvoid then
                for k, v in pairs(game.Players:GetChildren()) do
                    if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                        if Bot.Character:FindFirstChild("HumanoidRootPart") and (v.Character.HumanoidRootPart.Position - Bot.Character.HumanoidRootPart.Position).magnitude < config.avoidCopRange and v.Team ~= Bot.Team then
                            run = true
                        end
                    end
                end
            end
            if run then
                break
            end
            if not GetBankStatus() then
                RobbingLocation = false
                return
            end
            if reset then return end
        until string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 6) == string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 10, 15)

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end

        if config.wait then
            UpdateLog("waiting")
            wait(config.GroundSpeed * 1.5)
        end

        UpdateLog("exiting bank")

        pathMove(Vector3.new(1, -7, 959))
        if reset then return end
        pathMove(Vector3.new(47, -7, 951))
        if reset then return end
        pathMove(Vector3.new(93, 0, 964))
        if reset then return end
        pathMove(Vector3.new(86, 10, 918))
        if reset then return end
        pathMove(Vector3.new(73, 10, 919))
        if reset then return end

    end
    if game.Workspace.Banks:GetChildren()[1].Layout:FindFirstChild("03Corridor") then
        
        pathMove(Vector3.new(57, 19, 923))
        if reset then return end
        pathMove(Vector3.new(57, -7, 923))
        if reset then return end
        pathMove(Vector3.new(63, -7, 917))
        if reset then return end
        pathMove(Vector3.new(202, -7, 897))
        if reset then return end

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end

        UpdateLog("collecting money")

        local oldPos = Bot.Character.HumanoidRootPart.Position
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(game.Workspace.Banks:GetChildren()[1].Layout:GetChildren()[1].TriggerDoor.Position)
        wait(0.5)
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(oldPos)
        wait(0.1)
        pathMove(Vector3.new(202, -7, 897))
        if reset then return end

        repeat 
            wait(0.1)
            local run = false
            if config.copAvoid then
                for k, v in pairs(game.Players:GetChildren()) do
                    if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                        if Bot.Character:FindFirstChild("HumanoidRootPart") and (v.Character.HumanoidRootPart.Position - Bot.Character.HumanoidRootPart.Position).magnitude < config.avoidCopRange and v.Team ~= Bot.Team then
                            run = true
                        end
                    end
                end
            end
            if run then
                break
            end
            if not GetBankStatus() then
                RobbingLocation = false
                return
            end
            if reset then return end
        until Bot.PlayerGui.RobberyMoneyGui.Enabled

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end
        
        repeat 
            wait(0.1)
            local run = false
            if config.copAvoid then
                for k, v in pairs(game.Players:GetChildren()) do
                    if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                        if Bot.Character:FindFirstChild("HumanoidRootPart") and (v.Character.HumanoidRootPart.Position - Bot.Character.HumanoidRootPart.Position).magnitude < config.avoidCopRange and v.Team ~= Bot.Team then
                            run = true
                        end
                    end
                end
            end
            if run then
                break
            end
            if not GetBankStatus() then
                RobbingLocation = false
                return
            end
            if reset then return end
        until string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 6) == string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 10, 15)

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end

        if config.wait then
            UpdateLog("waiting")
            wait(config.GroundSpeed * 1.5)
        end

        UpdateLog("exiting bank")
        
        pathMove(Vector3.new(202, -7, 897))
        if reset then return end
        pathMove(Vector3.new(63, -7, 917))
        if reset then return end
        pathMove(Vector3.new(57, -7, 923))
        if reset then return end
        pathMove(Vector3.new(57, 19, 923))
        if reset then return end
    end
    if game.Workspace.Banks:GetChildren()[1].Layout:FindFirstChild("01UpperManagement") then

        pathMove(Vector3.new(84, 28, 916))
        if reset then return end
        pathMove(Vector3.new(70, 61, 835))
        if reset then return end
        pathMove(Vector3.new(27, 65, 841))
        if reset then return end
        pathMove(Vector3.new(58, 65, 882))
        if reset then return end
        pathMove(Vector3.new(38, 65, 920))
        if reset then return end
        pathMove(Vector3.new(83, 61, 920))
        if reset then return end

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end

        UpdateLog("collecting money")

        local oldPos = Bot.Character.HumanoidRootPart.Position
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(game.Workspace.Banks:GetChildren()[1].Layout:GetChildren()[1].TriggerDoor.Position)
        wait(0.5)
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(oldPos)
        wait(0.1)
        pathMove(Vector3.new(83, 61, 920))
        if reset then return end

        repeat 
            wait(0.1)
            local run = false
            if config.copAvoid then
                for k, v in pairs(game.Players:GetChildren()) do
                    if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                        if Bot.Character:FindFirstChild("HumanoidRootPart") and (v.Character.HumanoidRootPart.Position - Bot.Character.HumanoidRootPart.Position).magnitude < config.avoidCopRange and v.Team ~= Bot.Team then
                            run = true
                        end
                    end
                end
            end
            if run then
                break
            end
            if not GetBankStatus() then
                RobbingLocation = false
                return
            end
            if reset then return end
        until Bot.PlayerGui.RobberyMoneyGui.Enabled

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end
        
        repeat 
            wait(0.1)
            local run = false
            if config.copAvoid then
                for k, v in pairs(game.Players:GetChildren()) do
                    if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                        if Bot.Character:FindFirstChild("HumanoidRootPart") and (v.Character.HumanoidRootPart.Position - Bot.Character.HumanoidRootPart.Position).magnitude < config.avoidCopRange and v.Team ~= Bot.Team then
                            run = true
                        end
                    end
                end
            end
            if run then
                break
            end
            if not GetBankStatus() then
                RobbingLocation = false
                return
            end
            if reset then return end
        until string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 6) == string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 10, 15)

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end
        
        if config.wait then
            UpdateLog("waiting")
            wait(config.GroundSpeed * 1.5)
        end

        UpdateLog("exiting bank")

        pathMove(Vector3.new(83, 61, 920))
        if reset then return end
        pathMove(Vector3.new(38, 65, 920))
        if reset then return end
        pathMove(Vector3.new(58, 65, 882))
        if reset then return end
        pathMove(Vector3.new(27, 65, 841))
        if reset then return end
        pathMove(Vector3.new(70, 61, 835))
        if reset then return end
        pathMove(Vector3.new(84, 28, 916))
        if reset then return end
    end
    if game.Workspace.Banks:GetChildren()[1].Layout:FindFirstChild("07TheMint") then

        pathMove(Vector3.new(61, 19, 921))
        if reset then return end
        pathMove(Vector3.new(102, 3, 914))
        if reset then return end
        pathMove(Vector3.new(92, 5, 850))
        if reset then return end
        pathMove(Vector3.new(50, 5, 821))
        if reset then return end
        pathMove(Vector3.new(47, 5, 800))
        if reset then return end

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end

        UpdateLog("collecting money")

        local oldPos = Bot.Character.HumanoidRootPart.Position
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(game.Workspace.Banks:GetChildren()[1].Layout:GetChildren()[1].TriggerDoor.Position)
        wait(0.5)
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(oldPos)
        wait(0.1)
        
        pathMove(Vector3.new(47, 5, 800))
        if reset then return end

        repeat 
            wait(0.1)
            local run = false
            if config.copAvoid then
                for k, v in pairs(game.Players:GetChildren()) do
                    if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                        if Bot.Character:FindFirstChild("HumanoidRootPart") and (v.Character.HumanoidRootPart.Position - Bot.Character.HumanoidRootPart.Position).magnitude < config.avoidCopRange and v.Team ~= Bot.Team then
                            run = true
                        end
                    end
                end
            end
            if run then
                break
            end
            if not GetBankStatus() then
                RobbingLocation = false
                return
            end
            if reset then return end
        until Bot.PlayerGui.RobberyMoneyGui.Enabled

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end
        
        repeat 
            wait(0.1)
            local run = false
            if config.copAvoid then
                for k, v in pairs(game.Players:GetChildren()) do
                    if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                        if Bot.Character:FindFirstChild("HumanoidRootPart") and (v.Character.HumanoidRootPart.Position - Bot.Character.HumanoidRootPart.Position).magnitude < config.avoidCopRange and v.Team ~= Bot.Team then
                            run = true
                        end
                    end
                end
            end
            if run then
                break
            end 
            if not GetBankStatus() then
                RobbingLocation = false
                return
            end
            if reset then return end
        until string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 6) == string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 10, 15)

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end

        if config.wait then
            UpdateLog("waiting")
            wait(config.GroundSpeed * 1.5)
        end

        UpdateLog("exiting bank")

        pathMove(Vector3.new(47, 5, 800))
        if reset then return end
        pathMove(Vector3.new(50, 5, 821))
        if reset then return end
        pathMove(Vector3.new(92, 5, 850))
        if reset then return end
        pathMove(Vector3.new(102, 3, 914))
        if reset then return end
        pathMove(Vector3.new(61, 19, 921))
        if reset then return end
    end
    if game.Workspace.Banks:GetChildren()[1].Layout:FindFirstChild("08Deductions") then
        
        pathMove(Vector3.new(59, 19, 922))
        if reset then return end
        pathMove(Vector3.new(102, 3, 914))
        if reset then return end
        pathMove(Vector3.new(111, 3, 973))
        if reset then return end
        pathMove(Vector3.new(63, 3, 958))
        if reset then return end
        pathMove(Vector3.new(50, 3, 962))
        if reset then return end
        pathMove(Vector3.new(39, 3, 964))
        if reset then return end

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end 

        UpdateLog("collecting money")

        local oldPos = Bot.Character.HumanoidRootPart.Position
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(game.Workspace.Banks:GetChildren()[1].Layout:GetChildren()[1].TriggerDoor.Position)
        wait(0.5)
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(oldPos)
        wait(0.1)

        pathMove(Vector3.new(39, 3, 964))
        if reset then return end

        repeat 
            wait(0.1)
            local run = false
            if config.copAvoid then
                for k, v in pairs(game.Players:GetChildren()) do
                    if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                        if Bot.Character:FindFirstChild("HumanoidRootPart") and (v.Character.HumanoidRootPart.Position - Bot.Character.HumanoidRootPart.Position).magnitude < config.avoidCopRange and v.Team ~= Bot.Team then
                            run = true
                        end
                    end
                end
            end
            if run then
                break
            end
            if not GetBankStatus() then
                RobbingLocation = false
                return
            end
            if reset then return end
        until Bot.PlayerGui.RobberyMoneyGui.Enabled

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end
        
        repeat 
            wait(0.1)
            local run = false
            if config.copAvoid then
                for k, v in pairs(game.Players:GetChildren()) do
                    if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                        if Bot.Character:FindFirstChild("HumanoidRootPart") and (v.Character.HumanoidRootPart.Position - Bot.Character.HumanoidRootPart.Position).magnitude < config.avoidCopRange and v.Team ~= Bot.Team then
                            run = true
                        end
                    end
                end
            end
            if run then
                break
            end
            if not GetBankStatus() then
                RobbingLocation = false
                return
            end
            if reset then return end
        until string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 6) == string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 10, 15)

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end

        if config.wait then
            UpdateLog("waiting")
            wait(config.GroundSpeed * 1.5)
        end

        UpdateLog("exiting bank")

        pathMove(Vector3.new(39, 3, 964))
        if reset then return end
        pathMove(Vector3.new(63, 3, 958))
        if reset then return end
        pathMove(Vector3.new(111, 3, 973))
        if reset then return end
        pathMove(Vector3.new(102, 3, 914))
        if reset then return end
        pathMove(Vector3.new(59, 19, 922))
        if reset then return end
    end
    if game.Workspace.Banks:GetChildren()[1].Layout:FindFirstChild("05Underwater") then

        pathMove(Vector3.new(60, 19, 922))
        if reset then return end
        pathMove(Vector3.new(103, 3, 914))
        if reset then return end
        pathMove(Vector3.new(96, -13, 878))
        if reset then return end
        pathMove(Vector3.new(93, -13, 856))
        if reset then return end
        pathMove(Vector3.new(128, -13, 850))
        if reset then return end
        pathMove(Vector3.new(139, -7, 847))
        if reset then return end
        pathMove(Vector3.new(159, -7, 843))
        if reset then return end

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end

        UpdateLog("collecting money")

        local oldPos = Bot.Character.HumanoidRootPart.Position
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(game.Workspace.Banks:GetChildren()[1].Layout:GetChildren()[1].TriggerDoor.Position)
        wait(0.5)
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(oldPos)
        wait(0.1)

        pathMove(Vector3.new(159, -7, 843))
        if reset then return end

        repeat 
            wait(0.1)
            local run = false
            if config.copAvoid then
                for k, v in pairs(game.Players:GetChildren()) do
                    if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                        if Bot.Character:FindFirstChild("HumanoidRootPart") and (v.Character.HumanoidRootPart.Position - Bot.Character.HumanoidRootPart.Position).magnitude < config.avoidCopRange and v.Team ~= Bot.Team then
                            run = true
                        end
                    end
                end
            end
            if run then
                break
            end
            if not GetBankStatus() then
                RobbingLocation = false
                return
            end
            if reset then return end
        until Bot.PlayerGui.RobberyMoneyGui.Enabled

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end
        
        repeat 
            wait(0.1)
            local run = false
            if config.copAvoid then
                for k, v in pairs(game.Players:GetChildren()) do
                    if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                        if Bot.Character:FindFirstChild("HumanoidRootPart") and (v.Character.HumanoidRootPart.Position - Bot.Character.HumanoidRootPart.Position).magnitude < config.avoidCopRange and v.Team ~= Bot.Team then
                            run = true
                        end
                    end
                end
            end
            if run then
                break
            end
            if not GetBankStatus() then
                RobbingLocation = false
                return
            end
            if reset then return end
        until string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 6) == string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 10, 15)

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end

        if config.wait then
            UpdateLog("waiting")
            wait(config.GroundSpeed * 1.5)
        end

        UpdateLog("exiting bank")

        pathMove(Vector3.new(159, -7, 843))
        if reset then return end
        pathMove(Vector3.new(139, -7, 847))
        if reset then return end
        pathMove(Vector3.new(128, -13, 850))
        if reset then return end
        pathMove(Vector3.new(93, -13, 856))
        if reset then return end
        pathMove(Vector3.new(96, -13, 878))
        if reset then return end
        pathMove(Vector3.new(103, 3, 914))
        if reset then return end
        pathMove(Vector3.new(60, 19, 922))
        if reset then return end
    end
    if game.Workspace.Banks:GetChildren()[1].Layout:FindFirstChild("04Remastered") then

        pathMove(Vector3.new(60, 19, 922))
        if reset then return end
        pathMove(Vector3.new(101, 2, 914))
        if reset then return end
        pathMove(Vector3.new(95, 2, 876))
        if reset then return end
        pathMove(Vector3.new(19, 2, 888))
        if reset then return end

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end

        UpdateLog("collecting money")

        local oldPos = Bot.Character.HumanoidRootPart.Position
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(game.Workspace.Banks:GetChildren()[1].Layout:GetChildren()[1].TriggerDoor.Position)
        wait(0.5)
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(oldPos)
        wait(0.1)

        pathMove(Vector3.new(19, 2, 888))
        if reset then return end

        repeat 
            wait(0.1)
            local run = false
            if config.copAvoid then
                for k, v in pairs(game.Players:GetChildren()) do
                    if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                        if Bot.Character:FindFirstChild("HumanoidRootPart") and (v.Character.HumanoidRootPart.Position - Bot.Character.HumanoidRootPart.Position).magnitude < config.avoidCopRange and v.Team ~= Bot.Team then
                            run = true
                        end
                    end
                end
            end
            if run then
                break
            end
            if not GetBankStatus() then
                RobbingLocation = false
                return
            end
            if reset then return end
        until Bot.PlayerGui.RobberyMoneyGui.Enabled

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end
        
        repeat 
            wait(0.1)
            local run = false
            if config.copAvoid then
                for k, v in pairs(game.Players:GetChildren()) do
                    if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                        if Bot.Character:FindFirstChild("HumanoidRootPart") and (v.Character.HumanoidRootPart.Position - Bot.Character.HumanoidRootPart.Position).magnitude < config.avoidCopRange and v.Team ~= Bot.Team then
                            run = true
                        end
                    end
                end
            end
            if run then
                break
            end
            if not GetBankStatus() then
                RobbingLocation = false
                return
            end
            if reset then return end
        until string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 6) == string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 10, 15)

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end

        if config.wait then
            UpdateLog("waiting")
            wait(config.GroundSpeed * 1.5)
        end

        UpdateLog("exiting bank")

        pathMove(Vector3.new(19, 2, 888))
        if reset then return end
        pathMove(Vector3.new(95, 2, 876))
        if reset then return end
        pathMove(Vector3.new(101, 2, 914))
        if reset then return end
        pathMove(Vector3.new(60, 19, 922))
        if reset then return end
    end
    if game.Workspace.Banks:GetChildren()[1].Layout:FindFirstChild("06TheBlueRoom") then

        pathMove(Vector3.new(57, 19, 922))
        if reset then return end
        pathMove(Vector3.new(57, 1, 922))
        if reset then return end
        pathMove(Vector3.new(-49, 1, 941))
        if reset then return end

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end

        UpdateLog("collecting money")

        local oldPos = Bot.Character.HumanoidRootPart.Position
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(game.Workspace.Banks:GetChildren()[1].Layout:GetChildren()[1].TriggerDoor.Position)
        wait(0.5)
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(oldPos)
        wait(0.1)

        pathMove(Vector3.new(-49, 1, 941))
        if reset then return end

        repeat 
            wait(0.1)
            local run = false
            if config.copAvoid then
                for k, v in pairs(game.Players:GetChildren()) do
                    if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                        if Bot.Character:FindFirstChild("HumanoidRootPart") and (v.Character.HumanoidRootPart.Position - Bot.Character.HumanoidRootPart.Position).magnitude < config.avoidCopRange and v.Team ~= Bot.Team then
                            run = true
                        end
                    end
                end
            end
            if run then
                break
            end
            if not GetBankStatus() then
                RobbingLocation = false
                return
            end
            if reset then return end
        until Bot.PlayerGui.RobberyMoneyGui.Enabled

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end
        
        repeat 
            wait(0.1)
            local run = false
            if config.copAvoid then
                for k, v in pairs(game.Players:GetChildren()) do
                    if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                        if Bot.Character:FindFirstChild("HumanoidRootPart") and (v.Character.HumanoidRootPart.Position - Bot.Character.HumanoidRootPart.Position).magnitude < config.avoidCopRange and v.Team ~= Bot.Team then
                            run = true
                        end
                    end
                end
            end
            if run then
                break
            end
            if not GetBankStatus() then
                RobbingLocation = false
                return
            end
            if reset then return end
        until string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 6) == string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 10, 15)

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end

        if config.wait then
            UpdateLog("waiting")
            wait(config.GroundSpeed * 1.5)
        end

        UpdateLog("exiting bank")

        pathMove(Vector3.new(-49, 1, 941))
        if reset then return end
        pathMove(Vector3.new(57, 1, 922))
        if reset then return end
        pathMove(Vector3.new(57, 19, 922))
        if reset then return end
    end
    if game.Workspace.Banks:GetChildren()[1].Layout:FindFirstChild("09Presidential") then

        pathMove(Vector3.new(57, 20, 923))
        if reset then return end
        pathMove(Vector3.new(57, -7, 923))
        if reset then return end
        pathMove(Vector3.new(85, -7, 918))
        if reset then return end
        pathMove(Vector3.new(96, -7, 991))
        if reset then return end
        pathMove(Vector3.new(57, -7, 999))
        if reset then return end
        pathMove(Vector3.new(49, -7, 956))
        if reset then return end

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end

        UpdateLog("collecting money")

        local oldPos = Bot.Character.HumanoidRootPart.Position
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(game.Workspace.Banks:GetChildren()[1].Layout:GetChildren()[1].TriggerDoor.Position)
        wait(0.5)
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(oldPos)
        wait(0.1)

        pathMove(Vector3.new(49, -7, 956))
        if reset then return end

        repeat 
            wait(0.1)
            local run = false
            if config.copAvoid then
                for k, v in pairs(game.Players:GetChildren()) do
                    if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                        if Bot.Character:FindFirstChild("HumanoidRootPart") and (v.Character.HumanoidRootPart.Position - Bot.Character.HumanoidRootPart.Position).magnitude < config.avoidCopRange and v.Team ~= Bot.Team then
                            run = true
                        end
                    end
                end
            end
            if run then
                break
            end
            if not GetBankStatus() then
                RobbingLocation = false
                return
            end
            if reset then return end
        until Bot.PlayerGui.RobberyMoneyGui.Enabled

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end
        
        repeat 
            wait(0.1)
            local run = false
            if config.copAvoid then
                for k, v in pairs(game.Players:GetChildren()) do
                    if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                        if Bot.Character:FindFirstChild("HumanoidRootPart") and (v.Character.HumanoidRootPart.Position - Bot.Character.HumanoidRootPart.Position).magnitude < config.avoidCopRange and v.Team ~= Bot.Team then
                            run = true
                        end
                    end
                end
            end
            if run then
                break
            end
            if not GetBankStatus() then
                RobbingLocation = false
                return
            end
            if reset then return end
        until string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 6) == string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 10, 15)

        if not GetBankStatus() then
            RobbingLocation = false
            return
        end

        if config.wait then
            UpdateLog("waiting")
            wait(config.GroundSpeed * 1.5)
        end

        UpdateLog("exiting bank")

        pathMove(Vector3.new(49, -7, 956))
        if reset then return end
        pathMove(Vector3.new(57, -7, 999))
        if reset then return end
        pathMove(Vector3.new(96, -7, 991))
        if reset then return end
        pathMove(Vector3.new(85, -7, 918))
        if reset then return end
        pathMove(Vector3.new(57, -7, 923))
        if reset then return end
        pathMove(Vector3.new(57, 20, 923))
        if reset then return end
    end

    pathMove(Vector3.new(40, 20, 924))
    if reset then return end
    pathMove(Vector3.new(27, 19, 860))
    if reset then return end
    pathMove(Vector3.new(1, 25, 865))
    if reset then return end

    wait(1)
    RobbingLocation = false
    robbedBank = true
    local bankMoney = string.gsub(string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 2, 6), " ", "")
    bankMoney = string.gsub(bankMoney, "/", "")
    bankMoney = string.gsub(bankMoney, "kg", "")
    LogMessage("robbed bank for $"..bankMoney)
    bankMoney = string.gsub(bankMoney, ",", "")
    if tonumber(bankMoney) ~= nil then
        ScriptTime.TotalMoneyEarned += tonumber(bankMoney)
    end
end

function GetBoxPos()
    local MinDist = math.huge
    local ClosestPos = nil
    for k, v in pairs(game.Workspace.Jewelrys:GetChildren()[1].Boxes:GetChildren()) do
        if Bot.Character:FindFirstChild("HumanoidRootPart") and (v.Position - Bot.Character.HumanoidRootPart.Position).magnitude < MinDist then
            MinDist = (v.Position - Bot.Character.HumanoidRootPart.Position).magnitude
            ClosestPos = v.Position
        end
    end

    return ClosestPos
end

local jewelPositions = {
    Vector3.new(116, 20, 1326),
    Vector3.new(114, 20, 1316),
    Vector3.new(112, 20, 1306),
    Vector3.new(104, 20, 1285),
    Vector3.new(115, 20, 1284),
    Vector3.new(126, 20, 1281),
    Vector3.new(136, 20, 1279),
    Vector3.new(150, 20, 1292),
    Vector3.new(153, 20, 1308),
    Vector3.new(142, 21, 1310),
    Vector3.new(140, 21, 1301),
    Vector3.new(134, 21, 1283),
    Vector3.new(130, 21, 1300),
    Vector3.new(132, 21, 1312),
    -- floor 1
}

local jewelPositions1 = {
    Vector3.new(112, 38, 1318),
    Vector3.new(111, 38, 1310),
    Vector3.new(109, 38, 1300),
    Vector3.new(116, 38, 1283),
    Vector3.new(126, 38, 1281),
    Vector3.new(138, 38, 1279),
    Vector3.new(142, 39, 1310),
    Vector3.new(140, 39, 1301),
    Vector3.new(134, 39, 1283),
    Vector3.new(130, 39, 1300),
    Vector3.new(132, 39, 1312),
    -- floor 2
}

function RobJewel()
    if not GetJewelStatus() then
        RobbingLocation = false
        return
    end
    UpdateLog("going to jewelry store")
    BotMove(Vector3.new(155, 500, 1369), "jewelry store", config.teleport)
    wait(1)
    exitCar.OnJump()
    wait(0.5)
    if reset then return end
    if not config.teleport and GetRobbingJewel() then
        UpdateLog("entering jewelry store")
        if not GetJewelStatus() then
            RobbingLocation = false
            return
        end

        pathMove(Vector3.new(155, 120, 1369))
        if reset then return end
        pathMove(Vector3.new(105, 120, 1342))
        if reset then return end
        pathMove(Vector3.new(95, 120, 1284))
        if reset then return end

        pathMove(Vector3.new(112, 119, 1282))
        if reset then return end
        pathMove(Vector3.new(125, 102, 1341))
        if reset then return end
        pathMove(Vector3.new(137, 103, 1338))
        if reset then return end
        pathMove(Vector3.new(137, 103, 1278))
        if reset then return end

        if game.Workspace.Jewelrys:GetChildren()[1].Floors:FindFirstChild("1_Classic") then
            if not GetJewelStatus() then
                RobbingLocation = false
                return
            end

            pathMove(Vector3.new(152, 102, 1273))
            if reset then return end
            pathMove(Vector3.new(162, 85, 1331))
            if reset then return end
            pathMove(Vector3.new(133, 80, 1336))
            if reset then return end
            pathMove(Vector3.new(124, 80, 1277))
            if reset then return end
            pathMove(Vector3.new(153, 80, 1273))
            if reset then return end
            pathMove(Vector3.new(163, 63, 1332))
            if reset then return end
            pathMove(Vector3.new(125, 70, 1337))
            if reset then return end
            pathMove(Vector3.new(105, 70, 1281))
            if reset then return end
            pathMove(Vector3.new(105, 55, 1281))
            if reset then return end
        end
        if game.Workspace.Jewelrys:GetChildren()[1].Floors:FindFirstChild("6_LaserRooms") then
            if not GetJewelStatus() then
                RobbingLocation = false
                return
            end

            pathMove(Vector3.new(152, 103, 1273))
            if reset then return end
            pathMove(Vector3.new(162, 86, 1332))
            if reset then return end
            pathMove(Vector3.new(134, 79, 1337))
            if reset then return end
            pathMove(Vector3.new(124, 79, 1278))
            if reset then return end
            pathMove(Vector3.new(152, 79, 1274))
            if reset then return end
            pathMove(Vector3.new(163, 62, 1332))
            if reset then return end
            pathMove(Vector3.new(129, 55, 1339))
            if reset then return end
            pathMove(Vector3.new(135, 55, 1303))
            if reset then return end
            pathMove(Vector3.new(117, 55, 1278))
            if reset then return end
        end
        if game.Workspace.Jewelrys:GetChildren()[1].Floors:FindFirstChild("5_TheCEO") then
            if not GetJewelStatus() then
                RobbingLocation = false
                return
            end

            pathMove(Vector3.new(153, 103, 1274))
            if reset then return end
            pathMove(Vector3.new(162, 88, 1333))
            if reset then return end
            pathMove(Vector3.new(132, 80, 1338))
            if reset then return end
            pathMove(Vector3.new(100, 80, 1295))
            if reset then return end
            pathMove(Vector3.new(127, 80, 1292))
            if reset then return end
            pathMove(Vector3.new(153, 80, 1274))
            if reset then return end
            pathMove(Vector3.new(162, 63, 1333))
            if reset then return end
            pathMove(Vector3.new(135, 65, 1338))
            if reset then return end
            pathMove(Vector3.new(126, 65, 1282))
            if reset then return end
            pathMove(Vector3.new(105, 65, 1281))
            if reset then return end
            pathMove(Vector3.new(105, 55, 1281))
            if reset then return end
        end
        if game.Workspace.Jewelrys:GetChildren()[1].Floors:FindFirstChild("4_CameraFloors") then
            if not GetJewelStatus() then
                RobbingLocation = false
                return
            end

            pathMove(Vector3.new(153, 103, 1273))
            if reset then return end
            pathMove(Vector3.new(163, 85, 1333))
            if reset then return end
            pathMove(Vector3.new(136, 80, 1337))
            if reset then return end
            pathMove(Vector3.new(134, 80, 1277))
            if reset then return end
            pathMove(Vector3.new(153, 80, 1273))
            if reset then return end
            pathMove(Vector3.new(163, 62, 1332))
            if reset then return end
            pathMove(Vector3.new(120, 71, 1340))
            if reset then return end
            pathMove(Vector3.new(106, 71, 1282))
            if reset then return end
            pathMove(Vector3.new(106, 55, 1282))
            if reset then return end
        end
        if game.Workspace.Jewelrys:GetChildren()[1].Floors:FindFirstChild("3_ExpandedStore") then
            if not GetJewelStatus() then
                RobbingLocation = false
                return
            end

            pathMove(Vector3.new(153, 103, 1274))
            if reset then return end
            pathMove(Vector3.new(163, 88, 1332))
            if reset then return end
            pathMove(Vector3.new(132, 95, 1339))
            if reset then return end
            pathMove(Vector3.new(140, 95, 1276))
            if reset then return end
            pathMove(Vector3.new(153, 80, 1274))
            if reset then return end
            pathMove(Vector3.new(162, 63, 1332))
            if reset then return end
            pathMove(Vector3.new(136, 60, 1337))
            if reset then return end
            pathMove(Vector3.new(96, 60, 1285))
            if reset then return end
        end     
        if game.Workspace.Jewelrys:GetChildren()[1].Floors:FindFirstChild("2_StorageAndMeeting") then
            if not GetJewelStatus() then
                RobbingLocation = false
                return
            end

            pathMove(Vector3.new(153, 103, 1273))
            if reset then return end
            pathMove(Vector3.new(162, 85, 1331))
            if reset then return end
            pathMove(Vector3.new(101, 85, 1340))
            if reset then return end
            pathMove(Vector3.new(126, 80, 1294))
            if reset then return end
            pathMove(Vector3.new(153, 80, 1274))
            if reset then return end
            pathMove(Vector3.new(163, 63, 1333))
            if reset then return end
            pathMove(Vector3.new(118, 55, 1332))
            if reset then return end
            pathMove(Vector3.new(111, 55, 1310))
            if reset then return end
            pathMove(Vector3.new(140, 55, 1301))
            if reset then return end
            pathMove(Vector3.new(137, 55, 1284))
            if reset then return end
        end

        if not GetJewelStatus() then
            RobbingLocation = false
            return
        end
        pathMove(Vector3.new(97, 55, 1285))
            if reset then return end
        pathMove(Vector3.new(107, 37, 1343))
            if reset then return end
        pathMove(Vector3.new(130, 37, 1309))
            if reset then return end
        pathMove(Vector3.new(97, 36, 1283))
            if reset then return end
        pathMove(Vector3.new(105, 19, 1341))
            if reset then return end
    end
    pathMove(Vector3.new(135, 22, 1343))
    wait(1)

    UpdateLog("collecting money")

    for k, v in pairs(jewelPositions) do
        if not GetJewelStatus() then
            RobbingLocation = false
            return
        end
        pathMove(v)
        if reset then return end
        
        if Bot.Character:FindFirstChild("HumanoidRootPart") and (GetBoxPos() - Bot.Character.HumanoidRootPart.Position).magnitude < 5 and ((string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 6) ~= string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 10, 15) and Bot.PlayerGui.RobberyMoneyGui.Enabled) or Bot.PlayerGui.RobberyMoneyGui.Enabled == false) then
            Bot.Character:PivotTo(CFrame.lookAt(Bot.Character.HumanoidRootPart.Position, GetBoxPos()))
            for i = 1, 5, 1 do
                network:FireServer(punchHash)
                if reset then return end
                wait(0.5)
            end
        end
    end

    pathMove(Vector3.new(107, 22, 1343))
    pathMove(Vector3.new(96, 38, 1285))
    pathMove(Vector3.new(129, 42, 1306))

    if (string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 6) ~= string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 10, 15) and Bot.PlayerGui.RobberyMoneyGui.Enabled) or Bot.PlayerGui.RobberyMoneyGui.Enabled == false then
        for k, v in pairs(jewelPositions1) do
            if not GetJewelStatus() then
                RobbingLocation = false
                return
            end
            pathMove(v)
            if reset then return end

            if Bot.Character:FindFirstChild("HumanoidRootPart") and (GetBoxPos() - Bot.Character.HumanoidRootPart.Position).magnitude < 5 and ((string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 6) ~= string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 10, 15) and Bot.PlayerGui.RobberyMoneyGui.Enabled) or Bot.PlayerGui.RobberyMoneyGui.Enabled == false) then
                Bot.Character:PivotTo(CFrame.lookAt(Bot.Character.HumanoidRootPart.Position, GetBoxPos()))
                for i = 1, 5, 1 do
                    network:FireServer(punchHash)
                    if reset then return end
                    wait(0.5)
                end
            end
        end
    end
    
    pathMove(Vector3.new(107, 42, 1343))
    pathMove(Vector3.new(96, 55, 1285))

    if not GetJewelStatus() then
        RobbingLocation = false
        return
    end

    if config.wait then
        UpdateLog("waiting")
        wait(config.GroundSpeed * 2.5)
    end

    UpdateLog("exiting jewelry store")

    if game.Workspace.Jewelrys:GetChildren()[1].Floors:FindFirstChild("1_Classic") then
        if not GetJewelStatus() then
            RobbingLocation = false
            return
        end

        pathMove(Vector3.new(105, 55, 1281))
        if reset then return end
        pathMove(Vector3.new(105, 70, 1281))
        if reset then return end
        pathMove(Vector3.new(125, 70, 1337))
        if reset then return end
        pathMove(Vector3.new(163, 63, 1332))
        if reset then return end
        pathMove(Vector3.new(153, 80, 1273))
        if reset then return end
        pathMove(Vector3.new(124, 80, 1277))
        if reset then return end
        pathMove(Vector3.new(133, 80, 1336))
        if reset then return end
        pathMove(Vector3.new(162, 85, 1331))
        if reset then return end
        pathMove(Vector3.new(152, 102, 1273))
        if reset then return end
    end
    if game.Workspace.Jewelrys:GetChildren()[1].Floors:FindFirstChild("6_LaserRooms") then
        if not GetJewelStatus() then
            RobbingLocation = false
            return
        end

        pathMove(Vector3.new(117, 55, 1278))
        if reset then return end
        pathMove(Vector3.new(135, 55, 1303))
        if reset then return end
        pathMove(Vector3.new(129, 55, 1339))
        if reset then return end
        pathMove(Vector3.new(163, 62, 1332))
        if reset then return end
        pathMove(Vector3.new(152, 79, 1274))
        if reset then return end
        pathMove(Vector3.new(124, 79, 1278))
        if reset then return end
        pathMove(Vector3.new(134, 79, 1337))
        if reset then return end
        pathMove(Vector3.new(162, 86, 1332))
        if reset then return end
        pathMove(Vector3.new(152, 103, 1273))
        if reset then return end
    end
    if game.Workspace.Jewelrys:GetChildren()[1].Floors:FindFirstChild("5_TheCEO") then
        if not GetJewelStatus() then
            RobbingLocation = false
            return
        end

        pathMove(Vector3.new(105, 55, 1281))
        if reset then return end
        pathMove(Vector3.new(105, 65, 1281))
        if reset then return end
        pathMove(Vector3.new(126, 65, 1282))
        if reset then return end
        pathMove(Vector3.new(135, 65, 1338))
        if reset then return end
        pathMove(Vector3.new(162, 63, 1333))
        if reset then return end
        pathMove(Vector3.new(153, 80, 1274))
        if reset then return end
        pathMove(Vector3.new(127, 80, 1292))
        if reset then return end
        pathMove(Vector3.new(100, 80, 1295))
        if reset then return end
        pathMove(Vector3.new(132, 80, 1338))
        if reset then return end
        pathMove(Vector3.new(162, 88, 1333))
        if reset then return end
        pathMove(Vector3.new(153, 103, 1274))
        if reset then return end
    end
    if game.Workspace.Jewelrys:GetChildren()[1].Floors:FindFirstChild("4_CameraFloors") then
        if not GetJewelStatus() then
            RobbingLocation = false
            return
        end

        pathMove(Vector3.new(106, 55, 1282))
        if reset then return end
        pathMove(Vector3.new(106, 71, 1282))
        if reset then return end
        pathMove(Vector3.new(120, 71, 1340))
        if reset then return end
        pathMove(Vector3.new(163, 62, 1332))
        if reset then return end
        pathMove(Vector3.new(153, 80, 1273))
        if reset then return end
        pathMove(Vector3.new(134, 80, 1277))
        if reset then return end
        pathMove(Vector3.new(136, 80, 1337))
        if reset then return end
        pathMove(Vector3.new(163, 85, 1333))
        if reset then return end
        pathMove(Vector3.new(153, 103, 1273))
        if reset then return end
    end
    if game.Workspace.Jewelrys:GetChildren()[1].Floors:FindFirstChild("3_ExpandedStore") then
        if not GetJewelStatus() then
            RobbingLocation = false
            return
        end

        pathMove(Vector3.new(96, 60, 1285))
        if reset then return end
        pathMove(Vector3.new(136, 60, 1337))
        if reset then return end
        pathMove(Vector3.new(162, 63, 1332))
        if reset then return end
        pathMove(Vector3.new(153, 80, 1274))
        if reset then return end
        pathMove(Vector3.new(140, 95, 1276))
        if reset then return end
        pathMove(Vector3.new(132, 95, 1339))
        if reset then return end
        pathMove(Vector3.new(163, 88, 1332))
        if reset then return end
        pathMove(Vector3.new(153, 103, 1274))
        if reset then return end
    end
    if game.Workspace.Jewelrys:GetChildren()[1].Floors:FindFirstChild("2_StorageAndMeeting") then
        if not GetJewelStatus() then
            RobbingLocation = false
            return
        end

        pathMove(Vector3.new(137, 55, 1284))
        if reset then return end
        pathMove(Vector3.new(140, 55, 1301))
        if reset then return end
        pathMove(Vector3.new(111, 55, 1310))
        if reset then return end
        pathMove(Vector3.new(118, 55, 1332))
        if reset then return end
        pathMove(Vector3.new(163, 63, 1333))
        if reset then return end
        pathMove(Vector3.new(153, 80, 1274))
        if reset then return end
        pathMove(Vector3.new(126, 80, 1294))
        if reset then return end
        pathMove(Vector3.new(101, 85, 1340))
        if reset then return end
        pathMove(Vector3.new(162, 85, 1331))
        if reset then return end
        pathMove(Vector3.new(153, 103, 1273))
        if reset then return end
    end
    if not GetJewelStatus() then
        RobbingLocation = false
        return
    end

    pathMove(Vector3.new(137, 103, 1278))
    if reset then return end
    pathMove(Vector3.new(137, 103, 1338))
    if reset then return end
    pathMove(Vector3.new(125, 102, 1341))
    if reset then return end
    pathMove(Vector3.new(112, 119, 1282))
    if reset then return end
    pathMove(Vector3.new(95, 119, 1285))
    if reset then return end

    UpdateLog("waiting")

    wait(5)

    UpdateLog("going to crim base")

    BotMove(Vector3.new(-300, 500, 1597), "city crim base", false)

    if reset then return end
    wait(3)
    RobbingLocation = false
    robbedJewel = true
    local jewelMoney = string.gsub(string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 2, 6), " ", "")
    jewelMoney = string.gsub(jewelMoney, "/", "")
    jewelMoney = string.gsub(jewelMoney, "kg", "")
    LogMessage("robbed jewelry store for $"..jewelMoney)
    jewelMoney = string.gsub(jewelMoney, ",", "")
    if tonumber(jewelMoney) ~= nil then
        ScriptTime.TotalMoneyEarned += tonumber(jewelMoney)
    end
end

function RobMansion()
    UpdateLog("going to mansion")
    BotMove(Vector3.new(3020, 500, -4524), "mansion", config.teleport)
    if reset then return end
    wait(1)
    exitCar.OnJump()
    wait(0.5)

    if not GetMansionStatus() then 
        RobbingLocation = false
        return 
    end

    UpdateLog("going to elevator")

    if not config.teleport then
        pathMove(Vector3.new(3090, 63, -4605))
        if reset then return end
        pathMove(Vector3.new(3112, 70, -4606))
        if reset then return end
        pathMove(Vector3.new(3199, 70, -4606))
        if reset then return end
    end

    pathMove(Vector3.new(3196, 63, -4662)) 
    if reset then return end

    UpdateLog("waiting for mansion to start")
    
    local Door = game:GetService("Workspace").MansionRobbery.ArrivalElevator.Floors:GetChildren()[1].DoorLeft.InnerModel.Door

    repeat 
        wait() 
        if reset then return end
    until Door.Position.X > 3208

    network:FireServer(hash, "AK47")

    UpdateLog("going to boss room")

    pathMove(Vector3.new(3202, -200, -4703))
    if reset then return end
    pathMove(Vector3.new(3201, -200, -4679))
    if reset then return end
    pathMove(Vector3.new(3106, -204, -4675))
    if reset then return end
    pathMove(Vector3.new(3106, -204, -4647))
    if reset then return end
    pathMove(Vector3.new(3140, -204, -4647))
    if reset then return end
    pathMove(Vector3.new(3147, -204, -4566))
    if reset then return end
    
    UpdateLog("waiting for cutscene")

    wait(15)

    if reset then return end

    UpdateLog("shooting ceo")
    
    network:FireServer(hash, "AK47")
    wait(0.5)

    local boss = nil
    for k, v in pairs(game.Workspace.MansionRobbery:GetDescendants()) do
        if v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") then
            boss = v
        end
    end

    pcall(function()
        toolname = "AK47"
        if Bot.Backpack:FindFirstChild(toolname) and Bot.Character:FindFirstChild(toolname) == nil then
            local tool = Bot.Backpack:FindFirstChild(toolname)
            Bot.Character.Humanoid:EquipTool(tool)
        end
    end)

    local args = {
        [1] = true
    }

    game:GetService("Players").LocalPlayer.Folder.AK47.InventoryEquipRemote:FireServer(unpack(args))

    wait(0.5)
    if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
    Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(Bot.Character.HumanoidRootPart.Position.X, -169, Bot.Character.HumanoidRootPart.Position.Z))
    Bot.Character.HumanoidRootPart.Velocity = Vector3.new(0,1.005,0)
    local CEOplatform = Instance.new("Part")
    CEOplatform.Parent = game:GetService("Workspace")
    CEOplatform.Anchored = true
    CEOplatform.Size = Vector3.new(25, 0.5, 25)
    CEOplatform.Position = Bot.Character.HumanoidRootPart.Position + Vector3.new(0, -7, 0)
    while boss:FindFirstChild("Humanoid") do

        if not Bot.Folder:FindFirstChild("Ak47") then
            network:FireServer(hash, "AK47")
            wait(0.5)
        end
        if not Bot.Character:FindFirstChild("AK47") then

            wait(0.5)

            repeat wait() until Bot.Character.Humanoid:GetState() == Enum.HumanoidStateType.Running

            wait(0.1)

            pcall(function()
                toolname = "AK47"
                if Bot.Backpack:FindFirstChild(toolname) and Bot.Character:FindFirstChild(toolname) == nil then
                    local tool = Bot.Backpack:FindFirstChild(toolname)
                    Bot.Character.Humanoid:EquipTool(tool)
                end
            end)

            local args = {
                [1] = true
            }

            game:GetService("Players").LocalPlayer.Folder.AK47.InventoryEquipRemote:FireServer(unpack(args))

            wait(0.1)
        end

        for k, v in pairs(game.Workspace.MansionRobbery.GuardsFolder:GetDescendants()) do
        end
        game:GetService('VirtualInputManager'):SendMouseButtonEvent(0,0,0,true,game,0)

        if reset then return end
        wait()
    end
    CEOplatform:Destroy()
    game:GetService('VirtualInputManager'):SendMouseButtonEvent(0,0,0,false,game,0)

    UpdateLog("waiting for custscene")

    wait(5)

    if reset then return end

    UpdateLog("exiting mansion")

    pathMove(Vector3.new(3113, -204, -4440))
    if reset then return end
    pathMove(Vector3.new(3096, -204, -4440))
    if reset then return end
    pathMove(Vector3.new(3097, -219, -4519))
    if reset then return end
    pathMove(Vector3.new(3077, -221, -4518))
    if reset then return end
    
    local pos = Vector3.new(3064, -221, -4473)
    local moveTime = 0

    if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
    while Bot.Character:FindFirstChild("HumanoidRootPart") and (Bot.Character.HumanoidRootPart.Position - pos).magnitude > 5 do
        if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
        local amount = (Bot.Character.HumanoidRootPart.Position - pos).magnitude / (config.GroundSpeed / 2)
        local MoveDist = (Bot.Character.HumanoidRootPart.Position - pos) / amount
        for i = 1, amount, 1 do
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.Position - MoveDist)
            Bot.Character.HumanoidRootPart.Velocity = Vector3.new(0,1.005,0)
            wait()
            moveTime += 0.03
            if moveTime > 15 then
                LogMessage("possibly stuck, ressetting")
                Bot.Character.Humanoid.Health = 0
                exitCar.OnJump()
                return
            end
            if reset then return end
        end
        if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(pos)
    end
    if reset then return end
    wait(0.5)
    pathMove(Vector3.new(3104, 57, -4384))
    if reset then return end

    wait(1)
    RobbingLocation = false
    LogMessage("robbed mansion for $16,000")
    ScriptTime.TotalMoneyEarned += 16000
end

function RobCasino()
    if not GetCasinoStatus() then
        RobbingLocation = false
        return
    end
    if config.teleport then
        exitCar.OnJump()
        wait(0.5)
        UpdateLog("hacking computers")
        for k, v in pairs(game.Workspace.Casino.Computers:GetChildren()) do
            if not GetCasinoStatus() then
                RobbingLocation = false
                return
            end
            while v.Display.BrickColor ~= BrickColor.new("Institutional white") and v.Display.BrickColor ~= BrickColor.new("Lime green") do       
                Bot.Character.HumanoidRootPart.CFrame = CFrame.new(v.Display.Position)
                v.CasinoComputerHack:FireServer()
                wait()
            end
            wait(0.1)
            if v.Display.BrickColor == BrickColor.new("Lime green") then
                break
            end
        end

        UpdateLog("collecting cash")

        for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
            if not GetCasinoStatus() then
                RobbingLocation = false
                return
            end
            if string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 6) == string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 10, 15) and Bot.PlayerGui.RobberyMoneyGui.Enabled then
                break
            end
            for i = 1, 30, 1 do
                Bot.Character.HumanoidRootPart:PivotTo(CFrame.new(v.Position + Vector3.new(0, 5, 0)))
                v.CasinoLootCollect:FireServer()
                wait(0.01)
            end
        end
        wait(10)
    else
        UpdateLog("going to casino")
        BotMove(Vector3.new(-220, 500, -4575), "casino", false)
        wait(1)
        exitCar.OnJump()
        wait(0.5)
        if not GetCasinoStatus() then
            RobbingLocation = false
            return
        end
        UpdateLog("going to roof")

        pathMove(Vector3.new(-220, 175, -4575))
        if reset then return end
        pathMove(Vector3.new(-62, 160, -4718))
        if reset then return end
        pathMove(Vector3.new(-13, 157, -4741))
        if reset then return end

        wait(0.5)

        
        UpdateLog("waiting for elevator")

        repeat 
            fireclickdetector(game.Workspace.Casino.Elevator.Car.InnerModel.Calls:FindFirstChild("4").ClickDetector)
            if reset then return end
            wait()
        until game.Workspace.Casino.Elevator.Floors:GetChildren()[4].DoorLeft.InnerModel.Door.Position.X > -8

        UpdateLog("entering elevator")

        pathMove(Vector3.new(-18, 156, -4754))
        if reset then return end

        local hacked = false

        for k, v in pairs(game.Workspace.Casino.Computers:GetChildren()) do
            if v.Display.BrickColor == BrickColor.new("Lime green") then
                hacked = true
            end
        end

        if not hacked then
            UpdateLog("going to security")
            repeat 
                fireclickdetector(game.Workspace.Casino.Elevator.Car.InnerModel.Calls:FindFirstChild("3").ClickDetector)
                if reset then return end
                wait() 
            until game.Workspace.Casino.Elevator.Floors:GetChildren()[3].DoorLeft.InnerModel.Door.Position.X > -8

            pathMove(Vector3.new(-3, 72, -4705))
            if reset then return end
            pathMove(Vector3.new(-58, 72, -4684))
            if reset then return end
            pathMove(Vector3.new(-44, 80, -4645))
            
            UpdateLog("hacking computers")

            for k, v in pairs(game.Workspace.Casino.Computers:GetChildren()) do
                if v.Display.BrickColor ~= BrickColor.new("Institutional white") and v.Display.BrickColor ~= BrickColor.new("Lime green") then
                    pathMove(v.Display.Position + Vector3.new(0, 5, 0))
                    if reset then return end
                    wait(0.1)
                    v.CasinoComputerHack:FireServer()
                    wait(0.3)
                    v.CasinoComputerHack:FireServer()
                    wait(0.5)
                end
                if v.Display.BrickColor == BrickColor.new("Lime green") then
                    break
                end
            end

            UpdateLog("going to elevator")

            pathMove(Vector3.new(-44, 80, -4645))
            if reset then return end
            pathMove(Vector3.new(-58, 72, -4684))
            if reset then return end
            pathMove(Vector3.new(-3, 72, -4705))

            UpdateLog("waiting for elevator")

            repeat 
                fireclickdetector(game.Workspace.Casino.Elevator.Car.InnerModel.Calls:FindFirstChild("3").ClickDetector)
                if reset then return end
                wait() 
            until game.Workspace.Casino.Elevator.Floors:GetChildren()[3].DoorLeft.InnerModel.Door.Position.X > -8

            UpdateLog("entering elevator")

            pathMove(Vector3.new(-18, 72, -4754))
            if reset then return end
        end

        UpdateLog("going to vault")

        repeat 
            fireclickdetector(game.Workspace.Casino.Elevator.Car.InnerModel.Calls:FindFirstChild("1").ClickDetector)
            if reset then return end
            wait() 
        until game.Workspace.Casino.Elevator.Floors:GetChildren()[1].DoorLeft.InnerModel.Door.Position.X > -8

        pathMove(Vector3.new(-15, -77, -4739))
        if reset then return end
        pathMove(Vector3.new(13, -76, -4748))
        if reset then return end

        UpdateLog("breaking glass")

        local UI = require(game:GetService("ReplicatedStorage").Module:WaitForChild("UI"));
        for i,v in pairs (UI.CircleAction.Specs) do
            if v.Name == "Break" then
                v.Duration = 0
                v.Time = true
                v:Callback(v, true)
            end
        end

        wait(1)

        UpdateLog("going to vault")

        pathMove(Vector3.new(26, -77, -4751))
        if reset then return end
        pathMove(Vector3.new(48, -77, -4667))
        if reset then return end
        pathMove(Vector3.new(9, -77, -4658))
        if reset then return end
        pathMove(Vector3.new(32, -77, -4581))
        if reset then return end
        pathMove(Vector3.new(85, -77, -4536))
        if reset then return end
        pathMove(Vector3.new(140, -77, -4527))
        if reset then return end

        UpdateLog("hacking vault")

        local HackingVault = false
        local hacked = 0
        local Rotate = true
        local VaultLight = game:GetService("Workspace").Casino.HackableVaults.VaultDoorMain.InnerModel.Model.UnlockedLED

        if math.floor(game.Workspace.Casino.HackableVaults.VaultDoorMain.InnerModel.Model.Body.Rotation.Y) ~= 2 then
            hacked = 4
        end 
        while hacked < 4 do
            if not HackingVault then
                game:GetService("Workspace").Casino.HackableVaults.VaultDoorMain.InnerModel.Puzzle.RequestHack:FireServer()
                HackingVault = true
                hacked += 1
            end
            if HackingVault then

                if VaultLight.BrickColor == BrickColor.new("Lime green") and Rotate then
                    game:GetService("Workspace").Casino.HackableVaults.VaultDoorMain.InnerModel.Puzzle.UpdateDirection:FireServer()
                    hacked += 1
                    Rotate = false
                end
                if VaultLight.BrickColor ~= BrickColor.new("Lime green") then
                    Rotate = true
                end
                if reset then return end
                wait(0.01)
            end
            if math.floor(game.Workspace.Casino.HackableVaults.VaultDoorMain.InnerModel.Model.Body.Rotation.Y) ~= 2 then
                break
            end 
        end
        
        wait(3)

        UpdateLog("collecting cash")

        pathMove(Vector3.new(250, -74, -4528))
        if reset then return end

        for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
            v.CasinoLootCollect:FireServer()
        end

        pathMove(Vector3.new(247, -76, -4542))
        if reset then return end

        for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
            v.CasinoLootCollect:FireServer()
        end

        pathMove(Vector3.new(237, -75, -4599))
        if reset then return end

        for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
            v.CasinoLootCollect:FireServer()
        end

        pathMove(Vector3.new(264, -77, -4614))
        if reset then return end

        for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
            v.CasinoLootCollect:FireServer()
        end

        pathMove(Vector3.new(262, -76, -4595))
        if reset then return end

        for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
            v.CasinoLootCollect:FireServer()
        end

        pathMove(Vector3.new(271, -77, -4595))
        if reset then return end

        for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
            v.CasinoLootCollect:FireServer()
        end

        pathMove(Vector3.new(255, -77, -4514))
        if reset then return end

        for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
            v.CasinoLootCollect:FireServer()
        end

        pathMove(Vector3.new(242, -76, -4459))
        if reset then return end

        for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
            v.CasinoLootCollect:FireServer()
        end

        pathMove(Vector3.new(258, -77, -4436))
        if reset then return end

        for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
            v.CasinoLootCollect:FireServer()
        end

        pathMove(Vector3.new(269, -77, -4439))
        if reset then return end

        for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
            v.CasinoLootCollect:FireServer()
        end

        pathMove(Vector3.new(256, -77, -4488))
        if reset then return end

        pathMove(Vector3.new(301, -76, -4482))
        if reset then return end

        for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
            v.CasinoLootCollect:FireServer()
        end

        if not Bot.PlayerGui.RobberyMoneyGui.Enabled or (Bot.PlayerGui.RobberyMoneyGui.Enabled and string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 6) ~= string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 10, 15)) then


            pathMove(Vector3.new(314, -76, -4520))
            if reset then return end

            HackingVault = false
            hacked = 0
            Rotate = true 
            VaultLight = game:GetService("Workspace").Casino.HackableVaults:GetChildren()[2].InnerModel.Model.Light

            while hacked < 4 do
                if not HackingVault then
                    game:GetService("Workspace").Casino.HackableVaults:GetChildren()[2].InnerModel.Puzzle.RequestHack:FireServer()
                    HackingVault = true
                    hacked += 1
                end
                if HackingVault then

                    if VaultLight.BrickColor == BrickColor.new("Lime green") and Rotate then
                        game:GetService("Workspace").Casino.HackableVaults:GetChildren()[2].InnerModel.Puzzle.UpdateDirection:FireServer()
                        hacked += 1
                        Rotate = false
                    end
                    if VaultLight.BrickColor ~= BrickColor.new("Lime green") then
                        Rotate = true
                    end
                    if reset then return end
                    wait(0.01)
                end
                if math.floor(game.Workspace.Casino.HackableVaults:GetChildren()[2].InnerModel.Model.Body.Position.Z) < -4530 then
                    break
                end 
                wait()
            end

            repeat wait() until math.floor(game.Workspace.Casino.HackableVaults:GetChildren()[2].InnerModel.Model.Body.Position.Z) < -4530

            pathMove(Vector3.new(331, -77, -4527))
            if reset then return end

            for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
                v.CasinoLootCollect:FireServer()
            end

            pathMove(Vector3.new(320, -77, -4484))
            if reset then return end

            for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
                v.CasinoLootCollect:FireServer()
            end
            
            pathMove(Vector3.new(334, -77, -4494))
            if reset then return end

            for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
                v.CasinoLootCollect:FireServer()
            end
            
            pathMove(Vector3.new(342, -77, -4536))
            if reset then return end

            for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
                v.CasinoLootCollect:FireServer()
            end
            
            pathMove(Vector3.new(337, -77, -4541))
            if reset then return end

            for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
                v.CasinoLootCollect:FireServer()
            end

            pathMove(Vector3.new(337, -77. -4558))
            if reset then return end

            for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
                v.CasinoLootCollect:FireServer()
            end
            
            pathMove(Vector3.new(328, -77, -4562))
            if reset then return end

            for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
                v.CasinoLootCollect:FireServer()
            end

            pathMove(Vector3.new(322, -77, -4582))
            if reset then return end

            for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
                v.CasinoLootCollect:FireServer()
            end

            pathMove(Vector3.new(321, -77, -4576))
            if reset then return end

            for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
                v.CasinoLootCollect:FireServer()
            end

            pathMove(Vector3.new(338, -77, -4520))
            if reset then return end
            
            pathMove(Vector3.new(296, -77, -4525))
            if reset then return end
        end

        if not Bot.PlayerGui.RobberyMoneyGui.Enabled or (Bot.PlayerGui.RobberyMoneyGui.Enabled and string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 6) ~= string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 10, 15)) then
            
            pathMove(Vector3.new(283, -77, -4449))
            if reset then return end
            
            HackingVault = false
            hacked = 0
            Rotate = true
            VaultLight = game:GetService("Workspace").Casino.HackableVaults:GetChildren()[3].InnerModel.Model.Light

            while hacked < 4 do
                if not HackingVault then
                    game:GetService("Workspace").Casino.HackableVaults:GetChildren()[3].InnerModel.Puzzle.RequestHack:FireServer()
                    HackingVault = true
                    hacked += 1
                end
                if HackingVault then

                    if VaultLight.BrickColor == BrickColor.new("Lime green") and Rotate then
                        game:GetService("Workspace").Casino.HackableVaults:GetChildren()[3].InnerModel.Puzzle.UpdateDirection:FireServer()
                        hacked += 1
                        Rotate = false
                    end
                    if VaultLight.BrickColor ~= BrickColor.new("Lime green") then
                        Rotate = true
                    end
                    if reset then return end
                    wait(0.01)
                end
                if math.floor(game.Workspace.Casino.HackableVaults:GetChildren()[3].InnerModel.Model.Body.Position.Z) < -4467 then
                    break
                end 
                wait()
            end

            repeat wait() until math.floor(game.Workspace.Casino.HackableVaults:GetChildren()[3].InnerModel.Model.Body.Position.Z) < -4467

            pathMove(Vector3.new(283, -77, -4449))
            if reset then return end

            for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
                v.CasinoLootCollect:FireServer()
            end
            
            pathMove(Vector3.new(291, -77, -4454))
            if reset then return end

            for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
                v.CasinoLootCollect:FireServer()
            end

            pathMove(Vector3.new(300, -77, -4461))
            if reset then return end

            for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
                v.CasinoLootCollect:FireServer()
            end

            pathMove(Vector3.new(282, -77, -4457))
            if reset then return end

            pathMove(Vector3.new(273, -77, -4475))
            if reset then return end
        end

        if not Bot.PlayerGui.RobberyMoneyGui.Enabled or (Bot.PlayerGui.RobberyMoneyGui.Enabled and string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 6) ~= string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 10, 15)) then
            
            pathMove(Vector3.new(288, -77, -4579))
            if reset then return end
            
            HackingVault = false
            hacked = 0
            Rotate = true
            VaultLight = game:GetService("Workspace").Casino.HackableVaults:GetChildren()[4].InnerModel.Model.Light

            while hacked < 4 do
                if not HackingVault then
                    game:GetService("Workspace").Casino.HackableVaults:GetChildren()[4].InnerModel.Puzzle.RequestHack:FireServer()
                    HackingVault = true
                    hacked += 1
                end
                if HackingVault then

                    if VaultLight.BrickColor == BrickColor.new("Lime green") and Rotate then
                        game:GetService("Workspace").Casino.HackableVaults:GetChildren()[4].InnerModel.Puzzle.UpdateDirection:FireServer()
                        hacked += 1
                        Rotate = false
                    end
                    if VaultLight.BrickColor ~= BrickColor.new("Lime green") then
                        Rotate = true
                    end
                    if reset then return end
                    wait(0.01)
                end
                if math.floor(game.Workspace.Casino.HackableVaults:GetChildren()[4].InnerModel.Model.Body.Position.Z) < -4590 then
                    break
                end 
                wait()
            end

            repeat wait() until math.floor(game.Workspace.Casino.HackableVaults:GetChildren()[4].InnerModel.Model.Body.Position.Z) < -4590

            pathMove(Vector3.new(308, -77, -4597))
            if reset then return end

            for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
                v.CasinoLootCollect:FireServer()
            end

            pathMove(Vector3.new(285, -77, -4609))
            if reset then return end

            for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
                v.CasinoLootCollect:FireServer()
            end

            pathMove(Vector3.new(289, -77, -4605))
            if reset then return end

            for k, v in pairs(game.Workspace.Casino.Loots:GetChildren()) do
                v.CasinoLootCollect:FireServer()
            end

            pathMove(Vector3.new(291, -77, -4562))
            if reset then return end
        end

        UpdateLog("going to elevator")

        pathMove(Vector3.new(250, -74, -4528))
        if reset then return end
        pathMove(Vector3.new(140, -77, -4527))
        if reset then return end
        pathMove(Vector3.new(85, -77, -4536))
        if reset then return end
        pathMove(Vector3.new(32, -77, -4581))
        if reset then return end
        pathMove(Vector3.new(9, -77, -4658))
        if reset then return end
        pathMove(Vector3.new(48, -77, -4667))
        if reset then return end
        pathMove(Vector3.new(26, -77, -4751))
        if reset then return end

        UpdateLog("breaking glass")

        local UI = require(game:GetService("ReplicatedStorage").Module:WaitForChild("UI"));
        for i,v in pairs (UI.CircleAction.Specs) do
            if v.Name == "Break" then
                v.Duration = 0
                v.Time = true
                v:Callback(v, true)
            end
        end

        wait(1)

        UpdateLog("going to elevator")

        pathMove(Vector3.new(13, -76, -4748))
        if reset then return end
        pathMove(Vector3.new(-15, -77, -4739))
        if reset then return end

        UpdateLog("waiting for elevator")

        repeat 
            fireclickdetector(game.Workspace.Casino.Elevator.Car.InnerModel.Calls:FindFirstChild("1").ClickDetector)
            if reset then return end
            wait() 
        until game.Workspace.Casino.Elevator.Floors:GetChildren()[1].DoorLeft.InnerModel.Door.Position.X > -8

        UpdateLog("entering elevator")

        pathMove(Vector3.new(-18, -77, -4754))
        if reset then return end

        UpdateLog("going to roof")

        repeat 
            fireclickdetector(game.Workspace.Casino.Elevator.Car.InnerModel.Calls:FindFirstChild("4").ClickDetector)
            if reset then return end
            wait() 
        until game.Workspace.Casino.Elevator.Floors:GetChildren()[4].DoorLeft.InnerModel.Door.Position.X > -8

        UpdateLog("exiting casino")

        pathMove(Vector3.new(-13, 156, -4741))
        if reset then return end
        pathMove(Vector3.new(-62, 160, -4718))
        if reset then return end
    end

    if Bot.Character:FindFirstChild("HumanoidRootPart") and (Vector3.new(2275, 500, -2024) - Bot.Character.HumanoidRootPart.Position).magnitude < (Vector3.new(-300, 500, 1597) - Bot.Character.HumanoidRootPart.Position).magnitude then
        UpdateLog("going to volcano")
        BotMove(Vector3.new(2275, 500, -2024), "volcano base", false)
    else
        UpdateLog("going to crim base")
        BotMove(Vector3.new(-300, 500, 1597), "city crim base", false)
    end
    wait(1)
    RobbingLocation = false
    robbedCasino = true
    local casinoMoney = string.gsub(string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 2, 6), " ", "")
    casinoMoney = string.gsub(casinoMoney, "/", "")
    casinoMoney = string.gsub(casinoMoney, "kg", "")
    LogMessage("robbed casino for $"..casinoMoney)
    casinoMoney = string.gsub(casinoMoney, ",", "")
    if tonumber(casinoMoney) ~= nil then
        ScriptTime.TotalMoneyEarned += tonumber(casinoMoney)
    end
end

function RobMuseum()
    UpdateLog("going to museum")
    BotMove(Vector3.new(1048, 500, 1242), "museum", config.teleport)
    wait(1)
    exitCar.OnJump()
    wait(0.5)

    if not GetMuseumStatus() then
        RobbingLocation = false
        return
    end

    if not config.teleport then
        UpdateLog("entering museum")
        pathMove(Vector3.new(1048, 150, 1242))
        if reset then return end
        pathMove(Vector3.new(1048, 150, 1286))
        if reset then return end
        pathMove(Vector3.new(1082, 141, 1312))
        if reset then return end
        pathMove(Vector3.new(1083, 129, 1312))
        if reset then return end
    end

    pathMove(Vector3.new(1133, 115, 1307))
    if reset then return end

    UpdateLog("grabbing stuff")

    local UI = require(game:GetService("ReplicatedStorage").Module:WaitForChild("UI"));
    for i,v in pairs (UI.CircleAction.Specs) do
        if v.Name == "Grab Bone" then
            if Bot.PlayerGui.RobberyMoneyGui.Enabled and (string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 3) == string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 7, 9) or string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 4) == string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 8, 11)) then
                break
            end
            v.Duration = 0
            v.Time = true
            v:Callback(v, true)
            if reset then return end
            wait(0.5)
        end
    end
    if reset then return end

    if false then -- replace with true later
        if not Bot.PlayerGui.RobberyMoneyGui.Enabled or (Bot.PlayerGui.RobberyMoneyGui.Enabled and not (string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 3) == string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 7, 9) or string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 4) == string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 8, 11))) then
            pathMove(Vector3.new(1170, 111, 1297))
            for i,v in pairs (UI.CircleAction.Specs) do
                if v.Name == "Grab DinoArm" then
                    v.Duration = 0
                    v.Time = true
                    v:Callback(v, true)
                end
            end
        end
        if reset then return end
        if not Bot.PlayerGui.RobberyMoneyGui.Enabled or (Bot.PlayerGui.RobberyMoneyGui.Enabled and not (string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 3) == string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 7, 9) or string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 4) == string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 8, 11))) then
            pathMove(Vector3.new(1129, 108, 1264))
            for i,v in pairs (UI.CircleAction.Specs) do
                if v.Name == "Grab Mask" then
                    v.Duration = 0
                    v.Time = true
                    v:Callback(v, true)
                end
            end
        end
        if reset then return end
        if not Bot.PlayerGui.RobberyMoneyGui.Enabled or (Bot.PlayerGui.RobberyMoneyGui.Enabled and not (string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 3) == string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 7, 9) or string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 4) == string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 8, 11))) then
            pathMove(Vector3.new(1091, 108, 1312))
            for i,v in pairs (UI.CircleAction.Specs) do
                if v.Name == "Grab TombLantern" then
                    v.Duration = 0
                    v.Time = true
                    v:Callback(v, true)
                end
            end
        end
        if reset then return end
        if not Bot.PlayerGui.RobberyMoneyGui.Enabled or (Bot.PlayerGui.RobberyMoneyGui.Enabled and not (string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 3) == string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 7, 9) or string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 4) == string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 8, 11))) then
            pathMove(Vector3.new(1126, 108, 1343))
            for i,v in pairs (UI.CircleAction.Specs) do
                if v.Name == "Grab DinoEgg" then
                    v.Duration = 0
                    v.Time = true
                    v:Callback(v, true)
                end
            end
        end
        if reset then return end
        if not Bot.PlayerGui.RobberyMoneyGui.Enabled or (Bot.PlayerGui.RobberyMoneyGui.Enabled and not (string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 3) == string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 7, 9) or string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 4) == string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 8, 11))) then
            pathMove(Vector3.new(1095, 108, 1363))
            for i,v in pairs (UI.CircleAction.Specs) do
                if v.Name == "Grab Jewel" then
                    v.Duration = 0
                    v.Time = true
                    v:Callback(v, true)
                end
            end
        end
        if reset then return end
        if not Bot.PlayerGui.RobberyMoneyGui.Enabled or (Bot.PlayerGui.RobberyMoneyGui.Enabled and not (string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 3) == string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 7, 9) or string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 4) == string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 8, 11))) then
            pathMove(Vector3.new(1173, 108, 1259))
            for i,v in pairs (UI.CircleAction.Specs) do
                if v.Name == "Grab Relic" then
                    v.Duration = 0
                    v.Time = true
                    v:Callback(v, true)
                end
            end
        end
    end

    if reset then return end

    UpdateLog("exiting museum")

    if not config.teleport then
        pathMove(Vector3.new(1083, 129, 1312))
        if reset then return end
        pathMove(Vector3.new(1082, 141, 1312))
        if reset then return end
        pathMove(Vector3.new(1048, 150, 1286))
        if reset then return end
        pathMove(Vector3.new(1059, 150, 1247))
        if reset then return end
    end

    pathMove(Vector3.new(1050, 103, 1244))
    if reset then return end

    if Bot.PlayerGui.RobberyMoneyGui.Enabled then
        UpdateLog("going to volcano")
        wait(2)
        BotMove(Vector3.new(2275, 500, -2024), "volcano base", false)
    end
    wait(1)
    RobbingLocation = false
    robbedMuseum = true
    if string.len(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text) == 9 then
        LogMessage("robbed museum for "..string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 3))
        if tonumber(string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 1)) ~= nil then
            ScriptTime.TotalMoneyEarned += tonumber(string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 1)) * 700
        end
    else
        LogMessage("robbed museum for "..string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 4))
        if tonumber(string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 2)) ~= nil then
            ScriptTime.TotalMoneyEarned += tonumber(string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 2)) * 700
        end
    end
end

function RobDonut()
    BotMove(Vector3.new(77, 500, -1516), "donut store", false)
    wait(1)
    exitCar.OnJump()
    wait(0.5)
    pathMove(Vector3.new(96, 20, -1527))
    if reset then return end
    pathMove(Vector3.new(111, 20, -1578))
    if reset then return end
    pathMove(Vector3.new(78, 20, -1589))
    if reset then return end

    wait(0.5)

    game:GetService('VirtualInputManager'):SendKeyEvent(true, "E", false, game)
    wait(0.1)
    game:GetService('VirtualInputManager'):SendKeyEvent(false, "E", false, game)

    wait(11)

    local UI = require(game:GetService("ReplicatedStorage").Module:WaitForChild("UI"));
    for i,v in pairs (UI.CircleAction.Specs) do
        if v.Name == "Rob" then
            v:Callback(v, true)
        end
    end

    pathMove(Vector3.new(111, 20, -1578))
    if reset then return end
    pathMove(Vector3.new(96, 20, -1527))
    if reset then return end
    pathMove(Vector3.new(92, 20, -1516))

    wait(1)
    RobbingLocation = false
    LogMessage("robbed donut store for $750")
end

function RobGas()
    BotMove(Vector3.new(-1563, 500, 708), "gas station", false)
    wait(1)
    exitCar.OnJump()
    wait(0.5)
    pathMove(Vector3.new(-1596, 19, 709))
    if reset then return end
    pathMove(Vector3.new(-1599, 19, 687))
    if reset then return end

    wait(0.5)

    game:GetService('VirtualInputManager'):SendKeyEvent(true, "E", false, game)
    wait(0.1)
    game:GetService('VirtualInputManager'):SendKeyEvent(false, "E", false, game)

    wait(11)

    local UI = require(game:GetService("ReplicatedStorage").Module:WaitForChild("UI"));
    for i,v in pairs (UI.CircleAction.Specs) do
        if v.Name == "Rob" then
            v:Callback(v, true)
        end
    end

    pathMove(Vector3.new(-1596, 19, 709))
    if reset then return end
    pathMove(Vector3.new(-1567, 19, 705))
    if reset then return end

    wait(1)
    RobbingLocation = false
    LogMessage("robbed gas station for $750")
end

function RobTrain()

    UpdateLog("going to train")

    BotMove(Vector3.new(587, 500, -477), "Train", false)
    wait(1)
    exitCar.OnJump()
    wait(0.5)

    local UI = require(game:GetService("ReplicatedStorage").Module:WaitForChild("UI"));
    for i,v in pairs (UI.CircleAction.Specs) do
        if v.Name == "Breach Vault" or v.Name == "Open Door" then
            v.Duration = 0
            v.Timed = true
            v:Callback(v, true)
        end
    end

    if reset then return end

    local cart = nil
    for k, v in pairs(game.Workspace.Trains:GetChildren()) do
        if string.sub(v.Name, 1, 6) == "BoxCar" then
            cart = v
            break
        end 
    end

    UpdateLog("collecting money")

    robbedTrain = true
    while not Bot.PlayerGui.RobberyMoneyGui.Enabled or (Bot.PlayerGui.RobberyMoneyGui.Enabled and string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 1, 6) ~= string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 10, 15)) do
        if cart == nil then 
            RobbingLocation = false
            return 
        end
        if not cart:FindFirstChild("Model") then
            RobbingLocation = false
            return 
        end
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(cart.Model.Rob.Gold.Position + Vector3.new(0, 4, 0))
        if reset then return end
        wait()
    end

    local rayOrigin = cart.Model.Rob.Gold.Position + Vector3.new(0, 10, 0)
    local rayDirection2 = Vector3.new(0, 300, 0)
    local ray = Ray.new(rayOrigin, rayDirection2)
    local rain = game:GetService("Workspace"):FindFirstChild("Rain")
    if rain ~= nil then
        local ignoreStuff = {rain.RainDroplets, rain.RainFall}
        if platform ~= nil then
            table.insert(ignoreStuff, #(ignoreStuff), platform)
        end
        for k, v in pairs(Bot:GetDescendants()) do
            table.insert(ignoreStuff, #(ignoreStuff), v)
        end
        hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
    else
        local ignoreStuff = {}
        if platform ~= nil then
            table.insert(ignoreStuff, #(ignoreStuff), platform)
        end
        for k, v in pairs(Bot:GetDescendants()) do
            table.insert(ignoreStuff, #(ignoreStuff), v)
        end
        hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
    end

    UpdateLog("waiting for train to not be under a roof")

    while hit ~= nil do
        if cart == nil then 
            RobbingLocation = false
            return 
        end
        if not cart:FindFirstChild("Model") then
            RobbingLocation = false
            return 
        end

        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(cart.Model.Rob.Gold.Position + Vector3.new(0, 4, 0))
        
        rayOrigin = cart.Model.Rob.Gold.Position + Vector3.new(0, 10, 0)
        ray = Ray.new(rayOrigin, rayDirection2)
        rain = game:GetService("Workspace"):FindFirstChild("Rain")
        if rain ~= nil then
            ignoreStuff = {rain.RainDroplets, rain.RainFall}
            if platform ~= nil then
                table.insert(ignoreStuff, #(ignoreStuff), platform)
            end
            for k, v in pairs(Bot:GetDescendants()) do
                table.insert(ignoreStuff, #(ignoreStuff), v)
            end
            hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
        else
            ignoreStuff = {}
            if platform ~= nil then
                table.insert(ignoreStuff, #(ignoreStuff), platform)
            end
            for k, v in pairs(Bot:GetDescendants()) do
                table.insert(ignoreStuff, #(ignoreStuff), v)
            end
            hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
        end
        if reset then return end
        wait(0.1)
    end

    UpdateLog("exiting train")

    for i = 1, 5, 1 do
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.Position.X, 500, Bot.Character.HumanoidRootPart.Position.Z)
        wait(0.1)
    end

    wait(0.5)

    robbedTrain = true
    RobbingLocation = false
    local trainMoney = string.gsub(string.sub(Bot.PlayerGui.RobberyMoneyGui.Container.Bottom.Progress.Amount.Text, 2, 6), " ", "")
    trainMoney = string.gsub(trainMoney, "/", "")
    trainMoney = string.gsub(trainMoney, "kg", "")
    LogMessage("robbed cargo train for $"..trainMoney)
    trainMoney = string.gsub(trainMoney, ",", "")
    if tonumber(trainMoney) ~= nil then
        ScriptTime.TotalMoneyEarned += tonumber(trainMoney)
    end
end

function RobTomb()

    if not GetTombStatus() then
        RobbingLocation = false
        return
    end

    UpdateLog("going to tomb")
    
    BotMove(Vector3.new(587, 500, -477), "tomb", config.teleport)

    wait(1)
    exitCar.OnJump()
    wait(0.5)

    UpdateLog("entering tomb")

    if not config.teleport then
        pathMove(Vector3.new(541, 30, -501))
        if reset then return end
    end

    if not GetTombStatus() then
        pathMove(Vector3.new(587, 500, -477))
        RobbingLocation = false
        return
    end

    pathMove(Vector3.new(546, 25, -546))
    if reset then return end
    pathMove(Vector3.new(546, -59, -546))

    UpdateLog("doing room 1")

    if reset then return end
    pathMove(Vector3.new(521, -59, -346))
    if reset then return end
    pathMove(Vector3.new(570, -71, -254))
    if reset then return end
    pathMove(Vector3.new(620, -72, -229))
    if reset then return end
    pathMove(Vector3.new(641, -72, -226))
    if reset then return end

    UpdateLog("doing room 2")

    for i = 1, 26, 1 do
        for l = 1, 3, 1 do
            game.Players.localPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(game.Workspace.RobberyTomb.DartRoom.Pillars[tostring(i)].InnerModel.Platform.Position + Vector3.new(0, 5, 0))
            wait(0.01)
        end
        wait(0.01)
    end

    if not GetTombStatus() then
        pathMove(Vector3.new(587, 500, -477))
        if reset then return end
        RobbingLocation = false
        return
    end

    UpdateLog("going across bridge")
    
    pathMove(Vector3.new(799, -90, -207))
    if reset then return end
    pathMove(Vector3.new(833, -84, -203))
    if reset then return end
    pathMove(Vector3.new(879, -93, -197))
    if reset then return end
    pathMove(Vector3.new(935, -84, -192))
    if reset then return end
    
    UpdateLog("going to jewels")

    pathMove(Vector3.new(941, -85, -191))
    if reset then return end

    repeat wait() until game.Workspace.RobberyTomb.Gates.Gate1.InnerModel.Gate.Position.Y > -75

    pathMove(Vector3.new(967, -85, -187))
    if reset then return end

    repeat wait() until game.Workspace.RobberyTomb.Gates.Gate2.InnerModel.Gate.Position.Y > -75

    pathMove(Vector3.new(986, -85, -185))
    if reset then return end

    wait(0.1)

    if not GetTombStatus() then
        pathMove(Vector3.new(587, 500, -477))
        RobbingLocation = false
        return
    end

    for k, v in pairs(game:GetService("Workspace").RobberyTomb.Tomb.Gems:GetChildren()) do
        v.TombGemCollect:FireServer()
    end

    UpdateLog("waiting for door to open")

    repeat wait() until game.Workspace.RobberyTomb.Tomb.ExitDoor.InnerModel.Base.Position.Z < -184
    
    UpdateLog("going to cart")

    pathMove(Vector3.new(1010, -84, -185))
    if reset then return end

    UpdateLog("entering cart")

    while (Bot.Character.HumanoidRootPart.Position - Vector3.new(1010, -84, -185)).magnitude < 5 do
        local UI = require(game:GetService("ReplicatedStorage").Module:WaitForChild("UI"));
        for i,v in pairs (UI.CircleAction.Specs) do
            if v.Name == "Sit" then
                v.Duration = 0
                v.Timed = true
                v:Callback(v, true)
            end
        end
        wait(0.1)
    end

    UpdateLog("waiting for cart section to end")

    repeat 
        if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
        wait() 
        if reset then return end
        if not GetTombStatus() then
            pathMove(Vector3.new(587, 500, -477))
            RobbingLocation = false
            return
        end
    until Bot.Character:FindFirstChild("HumanoidRootPart") and (Vector3.new(299, 19, 191) - Bot.Character.HumanoidRootPart.Position).magnitude < 5 or (Vector3.new(1206, 14, -1244) - Bot.Character.HumanoidRootPart.Position).magnitude < 5

    UpdateLog("exiting tomb")

    wait(0.5)
    for k, v in pairs(game.Workspace:GetChildren()) do
        if v.Name == "Cart" then
            v:Destroy()
        end
    end

    wait(0.5)

    if Bot.Character:FindFirstChild("HumanoidRootPart") and (Vector3.new(1206, 14, -1244) - Bot.Character.HumanoidRootPart.Position).magnitude < 5 then
        pathMove(Vector3.new(1200, 20, -1222))
        if reset then return end
        pathMove(Vector3.new(1293, 20, -1135))
        if reset then return end
    end

    if Bot.Character:FindFirstChild("HumanoidRootPart") and (Vector3.new(299, 19, 191) - Bot.Character.HumanoidRootPart.Position).magnitude < 5 then
        pathMove(Vector3.new(305, 20, 206))
        if reset then return end
        pathMove(Vector3.new(232, 20, 211))
        if reset then return end
        pathMove(Vector3.new(193, 20, 247))
        if reset then return end
    end

    RobbingLocation = false
    robbedTomb = true
    LogMessage("robbed tomb for $7,000")
    ScriptTime.TotalMoneyEarned += 7000
end

function RobDrop(Drop, pos)

    UpdateLog("going to drop")

    BotMove(pos, "nearest air drop", false)
    if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
    exitCar.OnJump()
    wait(1)
    if not Drop:FindFirstChild("Root") then 
        RobbingLocation = false
        return 
    end
    Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Drop.Root.Position)
    wait(0.5)

    UpdateLog("opening airdrop")

    local UI = require(game:GetService("ReplicatedStorage").Module:WaitForChild("UI"));

    workspace.Drop.BriefcasePress:FireServer(ohBoolean1)

    for i,v in pairs (UI.CircleAction.Specs) do
        if v.Name == "Open Crate" then
            v.Pressed = true
            v.PressedAt = os.time()
        end
    end

    local ohBoolean1 = true

    if reset then return end
    wait(25)
    if reset then return end
    local ohBoolean1 = false

    workspace.Drop.BriefcaseRelease:FireServer(ohBoolean1)

    workspace.Drop.BriefcaseCollect:FireServer()

    for i,v in pairs (UI.CircleAction.Specs) do
        if v.Name == "Open Crate" then
            v:Callback(v, true)
        end
    end

    repeat
        workspace.Drop.BriefcasePress:FireServer(ohBoolean1)

        for i,v in pairs (UI.CircleAction.Specs) do
            if v.Name == "Open Crate" then
                v.Pressed = true
                v.PressedAt = os.time()
            end
        end

        local ohBoolean1 = true

        if reset then return end
        wait(0.5)
        if reset then return end
        local ohBoolean1 = false

        workspace.Drop.BriefcaseRelease:FireServer(ohBoolean1)

        workspace.Drop.BriefcaseCollect:FireServer()

        for i,v in pairs (UI.CircleAction.Specs) do
            if v.Name == "Open Crate" then
                v:Callback(v, true)
            end
        end
        wait()
        if reset then return end
        if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
    until not Drop:FindFirstChild("Root")

    wait(0.5)

    UpdateLog("collecting cash")
    
    wait(1)
    local MoneyCollected = 0
    wait(0.1)
    local UI = require(game:GetService("ReplicatedStorage").Module:WaitForChild("UI"));
    for i,v in pairs (UI.CircleAction.Specs) do
        if v.Part then
            if string.sub(v.Name, 1, 9) == "Collect $" then
                moneyText = string.sub(v.Name, 10, 14)
                moneyText = string.gsub(moneyText, ',', '')
                moneyText = string.gsub(moneyText, 'f', '')
                MoneyCollected += moneyText
                v.Duration = 0
                v.Timed = true
                v:Callback(v, true)
            end
        end
    end

    wait(5)
    if reset then return end
    RobbingLocation = false
    LogMessage("robbed air drop for $"..string.sub(tostring(MoneyCollected), 1, 1)..","..string.sub(tostring(MoneyCollected), 2, 4))
    if MoneyCollected ~= nil then
        ScriptTime.TotalMoneyEarned += MoneyCollected
    end
end

function RobBoat()

    local Heli
    for i,v in pairs(workspace.Vehicles:GetChildren()) do
        if pcall(function() return v.Seat.PlayerName end) then
            if v.Seat.PlayerName.Value == Bot.Name then
                Heli = v
            end
        end
    end

    for k, v in pairs(game.Workspace.CargoShip.Crates:GetChildren()) do
        Heli.Preset.RopePull.AttachedTo.Value = v
        wait(0.1)
        v.IsAttached.Value = true
    end

    --game:GetService("Workspace").CargoShip.Crates.Crate.MeshPart.PickupWeld
end

function RobPlane()
    if config.teleport then
        exitCar.OnJump()
        wait(0.5)
        UpdateLog("collecting crate")
        local oldPos = Bot.Character.HumanoidRootPart.Position
        while not Bot.PlayerGui.RobberyMoneyGui.Enabled do
            Bot.Character.HumanoidRootPart.CFrame = CFrame.new(game.Workspace.Plane.Crates:GetChildren()[1]:GetChildren()[1].Position)
            local UI = require(game:GetService("ReplicatedStorage").Module:WaitForChild("UI"));
            for i,v in pairs (UI.CircleAction.Specs) do
                if v.Name == "Inspect Crate" then
                    v.Duration = 0
                    v.Timed = true
                    v:Callback(v, true)
                    break
                end
            end
            if reset then return end
            wait(0.01)
        end
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(oldPos)

        wait(1)

        if Bot.PlayerGui.RobberyMoneyGui.Enabled then
            if reset then return end
            UpdateLog("going to cargo port")
            BotMove(Vector3.new(-342, 500, 2055), "cargo port", false)

            wait(2)
            robbedPlane = true
            LogMessage("robbed cargo plane for $7,000")
            ScriptTime.TotalMoneyEarned += 7000
        end
        
        RobbingLocation = false
    else
        UpdateLog("going to air port")
        BotMove(Vector3.new(-1298, 500, 2903), "airport", false)
        wait(1)
        exitCar.OnJump()
        wait(0.5)

        UpdateLog("waiting for plane to land")

        repeat
            wait()
            if reset then return end
            if game.Workspace.Plane.CargoPlane.Position.X > -1180 then
                RobbingLocation = false
                return
            end
        until math.floor(game.Workspace.Plane.CargoPlane.Position.X) == -1185

        UpdateLog("entering plane")
        pathMove(Vector3.new(-1158, 47, 2904))

        UpdateLog("waiting")
        wait(15)

        UpdateLog("grabbing crate")
        while not Bot.PlayerGui.RobberyMoneyGui.Enabled do
            local UI = require(game:GetService("ReplicatedStorage").Module:WaitForChild("UI"));
            for i,v in pairs (UI.CircleAction.Specs) do
                if v.Name == "Inspect Crate" then
                    v.Duration = 0
                    v.Timed = true
                    v:Callback(v, true)
                    break
                end
            end
            if reset then return end
            wait(0.01)
        end

        UpdateLog("exiting plane")
        
        for i = 1, 3, 1 do
            Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(Bot.Character.HumanoidRootPart.Position.X, Bot.Character.HumanoidRootPart.Position.Y - 50, Bot.Character.HumanoidRootPart.Position.Z))
            wait(0.1)
        end

        UpdateLog("going to cargo port")
        BotMove(Vector3.new(-342, 500, 2055), "cargo port", false)

        wait(2)
        robbedPlane = true
        LogMessage("robbed cargo plane for $7,000")
        ScriptTime.TotalMoneyEarned += 7000
        RobbingLocation = false
    end
end


local platformed = false
coroutine.wrap(function()
    while true do
        if toggled then
            if not RobbingLocation then
                if Bot.Character then
                    if Bot.Character:FindFirstChild("HumanoidRootPart") then
                        if not platformed then
                            platformed = true
                            local Car
                            for k, v in pairs(game:GetService("Workspace").Vehicles:GetChildren()) do
                                if pcall(function() return v.Seat.PlayerName end) then
                                    if v.Seat.PlayerName.Value == game:GetService("Players").LocalPlayer.Name then
                                        Car = v
                                    end
                                end
                            end
                            if platform ~= nil then
                                platform:Destroy()
                            end
                            platform = Instance.new("Part")
                            platform.Parent = game:GetService("Workspace")
                            platform.Anchored = true
                            platform.Size = Vector3.new(30, 0.5, 30)
                            if Car == nil then
                                Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.CFrame.X, 5000, Bot.Character.HumanoidRootPart.CFrame.Z)
                                Bot.Character.HumanoidRootPart.Velocity = Vector3.new(0,1.005,0)
                                platform.Position = Bot.Character.HumanoidRootPart.Position + Vector3.new(0, -5, 0)
                            else
                                Car.Engine.CFrame = CFrame.new(Car.Engine.CFrame.X, 5000, Car.Engine.CFrame.Z)
                                Car.Engine.Velocity = Vector3.new(0,1.005,0)
                                platform.Position = Car.Engine.Position + Vector3.new(0, -5, 0)
                            end
                        else
                            robLocation()
                            if Bot.Character.HumanoidRootPart.Position.Y < 3000 then
                                platformed = false
                            end
                        end
                    end
                else
                    if platform ~= nil then
                        platform:Destroy()
                    end
                    platformed = false
                end
            else
                if platform ~= nil then
                    platform:Destroy()
                end
                platformed = false
            end
        else
            UpdateLog("disabled")
            if platform ~= nil then
                platform:Destroy()
            end
            platformed = false
        end
        wait(1)
    end
end)()

for k, v in pairs(game.Workspace:GetDescendants()) do
    if v.Name == "TouchInterest" then
        if v.Parent then
            if v.Parent.Name ~= "LaserTouch" and v.Parent.Name ~= "TriggerDoor" and v.Parent.Name ~= "TouchToEnter" and v.Parent.Name ~= "HatchTouch" and v.Parent.Name ~= "TriggerFoundBossRoom" and v.Parent.Parent.Name ~= "ExitDoor" then
                v.Parent:GetAttributeChangedSignal("CanTouch"):Connect(function()
                    v.Parent.CanTouch = false
                end)
                v.Parent.CanTouch = false
            end
        end
    end
    if v.Name == "MansionBossNPCDamage" then
        v:Destroy()
    end
    if v.Name == "Door" or v.Name == "SwingDoor" or v.Name == "FrontDoorLeft" or v.Name == "FrontDoorRight" or v.Name == "SlideDoor" then
        for k, l in pairs(v:GetDescendants()) do
            if l:IsA("Part") or l:IsA("MeshPart") then
                l:GetAttributeChangedSignal("CanCollide"):Connect(function()
                    l.CanCollide = false
                end)
                l.CanCollide = false
            end
        end
    end
    if v.Name == "DartFire" or v.Name == "DartDamage" or v.Name == "NPCDestObj" or v.Name == "TurretFront" or v.Name == "TurretBack" then
        v:Destroy()
    end
end

game.Workspace.DescendantAdded:Connect(function(part)
    wait(0.1)
    if part.Name == "TouchInterest" then
        if part.Parent then
            if part.Parent.Name ~= "LaserTouch" and part.Parent.Name ~= "TriggerDoor" and part.Parent.Name ~= "TouchToEnter" and part.Parent.Name ~= "HatchTouch" and part.Parent.Name ~= "TriggerFoundBossRoom" and part.Parent.Parent.Name ~= "ExitDoor" then
                part.Parent:GetAttributeChangedSignal("CanTouch"):Connect(function()
                    part.Parent.CanTouch = false
                end)
                part.Parent.CanTouch = false
            end
        end
    end
    if part.Name == "MansionBossNPCDamage" then
        part:Destroy()
    end
    if part.Name == "Door" or part.Name == "SwingDoor" or part.Name == "FrontDoorLeft" or part.Name == "FrontDoorRight" or part.Name == "SlideDoor" then
        for k, l in pairs(part:GetDescendants()) do
            if l:IsA("Part") or l:IsA("MeshPart") then
                l:GetAttributeChangedSignal("CanCollide"):Connect(function()
                    l.CanCollide = false
                end)
                l.CanCollide = false
            end
        end
    end
    if part.Name == "DartFire" or part.Name == "DartDamage" or part.Name == "NPCDestObj" or part.Name == "TurretFront" or part.Name == "TurretBack" then
        part:Destroy()
    end
end)

require(game:GetService("ReplicatedStorage").Game.Paraglide).IsFlying = function()
	return tostring(getfenv(2).script) == "Falling"
end

for i = 1, 10, 1 do
    Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-220, 500, -4575))
    wait(0.01)
end

for i = 1, 10, 1 do
    Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(-1, 500, 865))
    wait(0.01)
end

local shooting = false
coroutine.wrap(function()
    while true do
        local shoot = false
        if config.killAura and toggled then
            for k, v in pairs(game.Players:GetChildren()) do
                if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                    if (v.Character.HumanoidRootPart.Position - Bot.Character.HumanoidRootPart.Position).magnitude < config.killAuraRange and v.Team ~= Bot.Team then
                        shoot = true
                    end
                end
            end

            if shoot then
                if not shooting then
                    network:FireServer(hash, "AK47")
                
                    wait(1)

                    pcall(function()
                        toolname = "AK47"
                        if Bot.Backpack:FindFirstChild(toolname) and Bot.Character:FindFirstChild(toolname) == nil then
                            local tool = Bot.Backpack:FindFirstChild(toolname)
                            Bot.Character.Humanoid:EquipTool(tool)
                        end
                    end)

                    local args = {
                        [1] = true
                    }

                    game:GetService("Players").LocalPlayer.Folder.AK47.InventoryEquipRemote:FireServer(unpack(args))

                    wait(0.5)
                end

                shooting = true
                game:GetService('VirtualInputManager'):SendMouseButtonEvent(0,0,0,true,game,0)
            else
                if shooting then
                    game:GetService('VirtualInputManager'):SendMouseButtonEvent(0,0,0,false,game,0)
                    shooting = false
                end
            end
        end
        wait(1)
    end
end)()

if game.Players.localPlayer.PlayerScripts.WorldUnload:FindFirstChild("WorldUnload") then
    game.Players.localPlayer.PlayerScripts.WorldUnload.WorldUnload:Destroy()
end
if game.Players.localPlayer.PlayerScripts.WorldUnload:FindFirstChild("HumanoidUnload") then
    game.Players.localPlayer.PlayerScripts.HumanoidUnload.HumanoidUnload:Destroy()
end


coroutine.wrap(function()
    while true do
        if toggled then
            if (not Bot.Character and not (Bot.Team.Name == "Prisoner" and Bot.Character.HumanoidRootPart.Position.Y < 10)) or (Bot.Character and Bot.Character.Humanoid and Bot.Character.Humanoid.Health == 0 and Bot.Team.Name ~= "Prisoner") then
                UpdateLog("respawning")
                RobbingLocation = true
                reset = true
                wait(3)
                reset = false
                respawn(false)
            end
            if Bot.Character:FindFirstChild("HumanoidRootPart") and Bot.Team.Name == "Prisoner" and Bot.Character.HumanoidRootPart.Position.Y < 10 then
                if Bot.Character:FindFirstChild("HumanoidRootPart") and (Vector3.new(Bot.Character.HumanoidRootPart.Position.X, 500, Bot.Character.HumanoidRootPart.Position.Z) - Vector3.new(-2940, 500, 2258)).magnitude > 50 then
                    UpdateLog("escaping prison")
                    RobbingLocation = true
                    reset = true
                    wait(3)
                    reset = false
                    respawn(true)
                end
            end
        end
        wait()
    end
end)()

--AntiAFK
local VirtualUser = game:service"VirtualUser"

game:service"Players".LocalPlayer.Idled:connect(function()
	VirtualUser:CaptureController()VirtualUser:ClickButton2(Vector2.new())
end)

local plrUtils = game:GetService("ReplicatedStorage").Game.PlayerUtils
require(plrUtils).hasKey = function() 
    return true
end

coroutine.wrap(function()
    while true do
        if toggled or (not toggled and RobbingLocation) then
            ScriptTime.seconds += 1

            if ScriptTime.seconds == 60 then
                ScriptTime.minutes += 1
                ScriptTime.seconds = 0
            end
            if ScriptTime.minutes == 60 then
                ScriptTime.hours += 1
                ScriptTime.minutes = 0
            end

            if ScriptTime.seconds < 10 then
                ScriptTime.secondsStr = "0"..tostring(ScriptTime.seconds)
            else
                ScriptTime.secondsStr = tostring(ScriptTime.seconds)
            end

            if ScriptTime.minutes < 10 then
                ScriptTime.minutesStr = "0"..tostring(ScriptTime.minutes)
            else
                ScriptTime.minutesStr = tostring(ScriptTime.minutes)
            end

            if ScriptTime.hours < 10 then
                ScriptTime.hoursStr = "0"..tostring(ScriptTime.hours)
            else
                ScriptTime.hoursStr = tostring(ScriptTime.hours)
            end
            ScriptTime.TotalMoneyEarnedStr = ScriptTime.TotalMoneyEarned
            if ScriptTime.TotalMoneyEarnedStr == nil then
                ScriptTime.TotalMoneyEarnedStr = "0"
            end
            if string.len(ScriptTime.TotalMoneyEarnedStr) > 8 then
                ScriptTime.TotalMoneyEarnedStr = ">99,999,999"
            end
            if string.len(ScriptTime.TotalMoneyEarnedStr) == 8 then
                ScriptTime.TotalMoneyEarnedStr = string.sub(ScriptTime.TotalMoneyEarnedStr, 1, 2)..","..string.sub(ScriptTime.TotalMoneyEarnedStr, 3, 5)..","..string.sub(ScriptTime.TotalMoneyEarnedStr, 6, 8)
            end
            if string.len(ScriptTime.TotalMoneyEarnedStr) == 7 then
                ScriptTime.TotalMoneyEarnedStr = "0"..string.sub(ScriptTime.TotalMoneyEarnedStr, 1, 1)..","..string.sub(ScriptTime.TotalMoneyEarnedStr, 2, 4)..","..string.sub(ScriptTime.TotalMoneyEarnedStr, 5, 7)
            end
            if string.len(ScriptTime.TotalMoneyEarnedStr) == 6 then
                ScriptTime.TotalMoneyEarnedStr = "00,"..string.sub(ScriptTime.TotalMoneyEarnedStr, 1, 3)..","..string.sub(ScriptTime.TotalMoneyEarnedStr, 4, 6)
            end
            if string.len(ScriptTime.TotalMoneyEarnedStr) == 5 then
                ScriptTime.TotalMoneyEarnedStr = "00,0"..string.sub(ScriptTime.TotalMoneyEarnedStr, 1, 2)..","..string.sub(ScriptTime.TotalMoneyEarnedStr, 3, 5)
            end
            if string.len(ScriptTime.TotalMoneyEarnedStr) == 4 then
                ScriptTime.TotalMoneyEarnedStr = "00,00"..string.sub(ScriptTime.TotalMoneyEarnedStr, 1, 1)..","..string.sub(ScriptTime.TotalMoneyEarnedStr, 2, 4)
            end
            if string.len(ScriptTime.TotalMoneyEarnedStr) == 3 then
                ScriptTime.TotalMoneyEarnedStr = "00,000,"..string.sub(ScriptTime.TotalMoneyEarnedStr, 1, 3)
            end
            if string.len(ScriptTime.TotalMoneyEarnedStr) == 2 then
                ScriptTime.TotalMoneyEarnedStr = "00,000,0"..string.sub(ScriptTime.TotalMoneyEarnedStr, 1, 2)
            end
            if string.len(ScriptTime.TotalMoneyEarnedStr) == 1 then
                ScriptTime.TotalMoneyEarnedStr = "00,000,00"..string.sub(ScriptTime.TotalMoneyEarnedStr, 1, 1)
            end
            if string.len(ScriptTime.TotalMoneyEarnedStr) == 0 then
                ScriptTime.TotalMoneyEarnedStr = "00,000,000"
            end

            ProjectAutoV2.Time.Text = "Time Elapsed: "..ScriptTime.hoursStr..":"..ScriptTime.minutesStr..":"..ScriptTime.secondsStr
            ProjectAutoV2.Money.Text = "Money Earned: $"..ScriptTime.TotalMoneyEarnedStr
        end
        wait(1)
    end
end)()

old = old or require(game:GetService("ReplicatedStorage").Module.RayCast).RayIgnoreNonCollideWithIgnoreList

if true then
    require(game:GetService("ReplicatedStorage").Module.RayCast).RayIgnoreNonCollideWithIgnoreList = function(...)
        local nearestDistance, nearestEnemy = 999999, nil
        local nearestEnemyPlayer
        for i,v in pairs(game:GetService("Players"):GetPlayers()) do
            if v.Team ~= game:GetService("Players").LocalPlayer.Team and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                if v.Team.Name ~= "Prisoner" then
                    if v.Character.Humanoid.Health > 0 then
                        if (v.Character.HumanoidRootPart.Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude < nearestDistance then
                            nearestDistance, nearestEnemy = (v.Character.HumanoidRootPart.Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude, v
                            nearestEnemyPlayer = true
                        end
                    end
                end
            end
        end
        for i,v in pairs(game:GetService("Workspace"):GetChildren()) do
            if v.Name == "Drop" then
                for k, j in pairs(v:GetDescendants()) do
                    if j:FindFirstChild("Humanoid") and j:FindFirstChild("HumanoidRootPart") then
                        if j.Humanoid.Health > 0 then
                            if (j.HumanoidRootPart.Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude < nearestDistance then
                                nearestDistance, nearestEnemy = (j.HumanoidRootPart.Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude, j
                                nearestEnemyPlayer = false
                            end
                        end
                    end
                end
            end
            if v.Name == "MansionRobbery" then
                for k, j in pairs(v:GetDescendants()) do
                    if j:FindFirstChild("Humanoid") and j:FindFirstChild("HumanoidRootPart") then
                        if j.Humanoid.Health > 0 then
                            if (j.HumanoidRootPart.Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude < nearestDistance then
                                nearestDistance, nearestEnemy = (j.HumanoidRootPart.Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude, j
                                nearestEnemyPlayer = false
                            end
                        end
                    end
                end
            end
        end
        local arg = {old(...)}
        if (tostring(getfenv(2).script) == "BulletEmitter" or tostring(getfenv(2).script) == "Taser") and nearestEnemy then
            if nearestEnemyPlayer then
                arg[1] = nearestEnemy.Character.HumanoidRootPart
                arg[2] = nearestEnemy.Character.HumanoidRootPart.Position
            else
                arg[1] = nearestEnemy.Head
                arg[2] = nearestEnemy.Head.Position
            end
        end
        return unpack(arg)
    end
else
    require(game:GetService("ReplicatedStorage").Module.RayCast).RayIgnoreNonCollideWithIgnoreList = old
end
