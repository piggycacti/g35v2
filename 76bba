local hwid = ""
local Exploit = ""

local http_request = http.request;

local body = http.request({Url = 'http://Pxsta.pythonanywhere.com/get'; Method = 'GET'}).Body;
local decoded = game:GetService('HttpService'):JSONDecode(body)

Exploit = decoded["User-Agent"]

for k, v in pairs(decoded) do
    if string.sub(k, #(k) - 10, #(k)) == "Fingerprint" then
        hwid = v
    end
end
----------------------------------------------------------------
local ServerResponse = ""
local User = ""
local Status = ""
local webhook = "https://discord.com/api/webhooks/1122435489484517436/GbDzBvczWUrKnZgyUDHaE0VJ_n4VVPvGDiVwZx-TnQvIJnZwbJeVgttyq5_KvAGh-T_1"

function PostWebHook()
    local data = {
    ["embeds"] = {
        {
            ["title"] = "Someone Executed The Special Script!", 
            ["description"] = "user: "..User.."\nkey: ".._G.Key.."\nstatus: "..string.lower(Status).."\nexploit: "..string.lower(Exploit).."\nhwid: "..tostring(hwid).."\nserver response: "..ServerResponse,
            ["color"] = 0x9000ff,
        }
    }
    }

    local newdata = game:GetService("HttpService"):JSONEncode(data)

    local headers = {
    ["content-type"] = "application/json"
    }

    http.request({Url = webhook, Body = newdata, Method = "POST", Headers = headers})
end

----------------------------------------------------------------

if hwid == nil or hwid == "" then
    game.Players.localPlayer.PlayerGui.NotificationGui.ContainerNotification.Message.Text = "missing hwid, join our discord for support - auto.projectbot.top"
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = true
    _G.AutoRobLoaded = false
    wait(5)
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = false
    ServerResponse = "missing hwid"
    PostWebHook()
    return
end

if _G.Key == nil or _G.Key == "" then
    game.Players.localPlayer.PlayerGui.NotificationGui.ContainerNotification.Message.Text = "missing key, join our discord for a key - auto.projectbot.top"
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = true
    _G.AutoRobLoaded = false
    wait(5)
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = false
    ServerResponse = "missing key"
    PostWebHook()
    return
end

local VerifyString = _G.Key.." "..tostring(hwid)

data = {['VERIFY'] = VerifyString}

Server = http.request({Url = "http://Pxsta.pythonanywhere.com", Method = "POST", Headers = data})

if string.sub(Server.Body, 1, 20) == "SET HWID - STATUS: " then
    Status = string.sub(Server.Body, 21, #(Server.Body))
    ServerResponse = "correct info, set hwid"
end

if string.sub(Server.Body, 1, 23) == "CORRECT HWID - STATUS: " then
    Status = string.sub(Server.Body, 24, #(Server.Body))
    ServerResponse = "correct info"
end

if string.upper(string.sub(Server.Body, 24, #(Server.Body))) == "USER" or string.upper(string.sub(Server.Body, 24, #(Server.Body))) == "EPIC" then
    game.Players.localPlayer.PlayerGui.NotificationGui.ContainerNotification.Message.Text = "you need donator role or above to access the special script, join discord to donate - auto.projectbot.top"
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = true
    _G.AutoRobLoaded = false
    wait(5)
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = false
    ServerResponse = "user cannot run special script"
    PostWebHook()
    return
end

if string.sub(Server.Body, 1, 14) == "Blacklisted - " then
    game.Players.localPlayer.PlayerGui.NotificationGui.ContainerNotification.Message.Text = "you have been blacklisted from ProjectAuto for "..string.sub(Server.Body, 15, #(Server.Body))
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = true
    _G.AutoRobLoaded = false
    wait(5)
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = false
    ServerResponse = "player is blacklisted"
    PostWebHook()
    return
end

if Server.Body == "INCORRECT HWID" then
    game.Players.localPlayer.PlayerGui.NotificationGui.ContainerNotification.Message.Text = "Incorrect hwid, reset your hwid using our discord - auto.projectbot.top"
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = true
    _G.AutoRobLoaded = false
    wait(5)
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = false
    ServerResponse = "incorrect hwid"
    PostWebHook()
    return
end

if Server.Body == "NO KEY" then
    game.Players.localPlayer.PlayerGui.NotificationGui.ContainerNotification.Message.Text = "Incorrect key, join our discord for a key - auto.projectbot.top"
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = true
    _G.AutoRobLoaded = false
    wait(5)
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = false
    ServerResponse = "incorrect key"
    PostWebHook()
    return
end

data = {['DISCORD'] = _G.Key}

Server = http.request({Url = "http://Pxsta.pythonanywhere.com", Method = "POST", Headers = data})

if Server.Body == "INVALID KEY" then
    game.Players.localPlayer.PlayerGui.NotificationGui.ContainerNotification.Message.Text = "Key not activated, activate key in our discord - auto.projectbot.top"
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = true
    _G.AutoRobLoaded = false
    wait(5)
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = false
    ServerResponse = "key not activated"
    PostWebHook()
    return
end

if ServerResponse == "" then
    game.Players.localPlayer.PlayerGui.NotificationGui.ContainerNotification.Message.Text = "a error occured, join our discord for support - auto.projectbot.top"
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = true
    _G.AutoRobLoaded = false
    wait(5)
    game.Players.localPlayer.PlayerGui.NotificationGui.Enabled = false
    ServerResponse = "server error"
    PostWebHook()
    return
end

User = string.sub(Server.Body, 10, #(Server.Body))

PostWebHook()

----------------------------------------------------------------

local Bot = game.Players.localPlayer
local platform = nil
local toggled = true -- TRUE = ON  | FALSE = OFF
local exitCar = require(game:GetService("ReplicatedStorage").Game.CharacterUtil)
local Arresting = false
local hit, pos
local rayDirection = Vector3.new(0, -3000, 0)
local rayDirection1 = Vector3.new(0, 200, 0)
local Target = nil
local network = getupvalue(require(game.ReplicatedStorage.Module.AlexChassis).SetEvent, 1)
local kickHash = 'c04tage4' -- Y
local arrestHash = 'uht8s6vx' -- Y
local ArrestingNow = false
local ChatRemote = game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest
local network = getupvalue(require(game.ReplicatedStorage.Module.AlexChassis).SetEvent, 1)
local popHash = "jos1evcp" -- Y
local tazeHash = 'wlpgqhxg' -- Y
local Positions = {
    Vector3.new(740, 500, 1062),
}

function GetPos(location)
    local ClosestDistance = nil
    local MinDistance = math.huge
    for k, v in pairs(Positions) do
        if (v - location).Magnitude + 5 <= MinDistance then
            local IgnorePos = false
            for k, l in pairs(game:GetService("Workspace").Vehicles:GetChildren()) do
                if l.Name == "Jeep" or l.Name == "Camaro" then
                    if (Vector3.new(l.Engine.Position.X, 500, l.Engine.Position.Z) - v).magnitude < 50 then
                        if (Vector3.new(l.Engine.Position.X, 500, l.Engine.Position.Z) - v).magnitude > 5 then
                            IgnorePos = true
                        end
                    end
                end
            end
            if not IgnorePos then
                MinDistance = (v - location).Magnitude
                ClosestDistance = v
            end
        end
    end
    for k, v in pairs(game:GetService("Workspace").Vehicles:GetChildren()) do
        if v.Name == "Jeep" or v.Name == "Camaro" then
            if v.Seat.PlayerName.Value == "" then

                local rayOrigin = v.Seat.Position + Vector3.new(0, 5, 0)
                local ray = Ray.new(rayOrigin, rayDirection1)
                local rain = game:GetService("Workspace"):FindFirstChild("Rain")
                if rain ~= nil then
                    local ignoreStuff = {rain.RainDroplets, rain.RainFall}
                    if platform ~= nil then
                        table.insert(ignoreStuff, #(ignoreStuff), platform)
                    end
                    for k, v in pairs(Bot:GetDescendants()) do
                        table.insert(ignoreStuff, #(ignoreStuff), v)
                    end
                    hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
                else
                    local ignoreStuff = {}
                    if platform ~= nil then
                        table.insert(ignoreStuff, #(ignoreStuff), platform)
                    end
                    for k, v in pairs(Bot:GetDescendants()) do
                        table.insert(ignoreStuff, #(ignoreStuff), v)
                    end
                    hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
                end
                
                if hit == nil then
                    if (v.Seat.Position - location).Magnitude + 5 <= MinDistance then
                        MinDistance = (v.Seat.Position - location).Magnitude
                        ClosestDistance = v.Seat.Position
                    end
                end
            end
        end
    end
    return ClosestDistance
end

function BotMove()

    Car = nil

    for i,v in pairs(game:GetService("Workspace").Vehicles:GetChildren()) do
        if pcall(function() return v.Seat.PlayerName end) then
            if v.Seat.PlayerName.Value == Bot.Name then
                Car = v
            end
        end
    end

    if platform ~= nil then
        platform:Destroy()
    end

    wait(0.1)

    if Car == nil and Bot.Team.Name ~= "Prisoner" then
        if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
        local rayOrigin = Bot.Character.HumanoidRootPart.Position + Vector3.new(0, -5, 0)
        local ray = Ray.new(rayOrigin, rayDirection1)
        local rain = game:GetService("Workspace"):FindFirstChild("Rain")
        if rain ~= nil then
            local ignoreStuff = {rain.RainDroplets, rain.RainFall}
            if platform ~= nil then
                table.insert(ignoreStuff, #(ignoreStuff), platform)
            end
            for k, v in pairs(Bot:GetDescendants()) do
                table.insert(ignoreStuff, #(ignoreStuff), v)
            end
            hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
        else
            local ignoreStuff = {}
            if platform ~= nil then
                table.insert(ignoreStuff, #(ignoreStuff), platform)
            end
            for k, v in pairs(Bot:GetDescendants()) do
                table.insert(ignoreStuff, #(ignoreStuff), v)
            end
            hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
        end
        if hit ~= nil then
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.CFrame.X, pos.Y, Bot.Character.HumanoidRootPart.CFrame.Z)
        else
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.CFrame.X, 300, Bot.Character.HumanoidRootPart.CFrame.Z)
            local rayDirection2 = Vector3.new(0, -1, 0)
            while hit == nil do
                if reset then return end
                rayOrigin = Bot.Character.HumanoidRootPart.Position + Vector3.new(0, -2, 0)
                ray = Ray.new(rayOrigin, rayDirection2)
                rain = game:GetService("Workspace"):FindFirstChild("Rain")
                if rain ~= nil then
                    local ignoreStuff = {rain.RainDroplets, rain.RainFall}
                    if platform ~= nil then
                        table.insert(ignoreStuff, #(ignoreStuff), platform)
                    end
                    for k, v in pairs(Bot:GetDescendants()) do
                        table.insert(ignoreStuff, #(ignoreStuff), v)
                    end
                    hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
                else
                    local ignoreStuff = {}
                    if platform ~= nil then
                        table.insert(ignoreStuff, #(ignoreStuff), platform)
                    end
                    for k, v in pairs(Bot:GetDescendants()) do
                        table.insert(ignoreStuff, #(ignoreStuff), v)
                    end
                    hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
                end
                wait()
            end
        end
        if reset then return end
        Bot.Character.HumanoidRootPart.Velocity = Vector3.new()

        local args = {
        [1] = "Chassis",
        [2] = "Jeep"
        }
        game:GetService("ReplicatedStorage").GarageSpawnVehicle:FireServer(unpack(args))
    end

    if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
    for i,v in pairs(game:GetService("Workspace").Vehicles:GetChildren()) do
        if pcall(function() return v.Seat.PlayerName end) then
            if v.Seat.PlayerName.Value == Bot.Name then
                Car = v
            end
        end
    end
    if reset then return end

    while Car == nil do
        if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.CFrame.X, 500, Bot.Character.HumanoidRootPart.CFrame.Z)
        if reset then return end
        if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
        move(GetPos(Bot.Character.HumanoidRootPart.Position))
        if reset then return end

        local rayOrigin = Bot.Character.HumanoidRootPart.Position + Vector3.new(0, -5, 0)
        local ray = Ray.new(rayOrigin, rayDirection)
        local rain = game:GetService("Workspace"):FindFirstChild("Rain")
        if rain ~= nil then
            ignoreStuff = {rain.RainDroplets, rain.RainFall}
            if platform ~= nil then
                table.insert(ignoreStuff, #(ignoreStuff), platform)
            end
            for k, v in pairs(Bot:GetDescendants()) do
                table.insert(ignoreStuff, #(ignoreStuff), v)
            end
            hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
        else
            local ignoreStuff = {}
            if platform ~= nil then
                table.insert(ignoreStuff, #(ignoreStuff), platform)
            end
            for k, v in pairs(Bot:GetDescendants()) do
                table.insert(ignoreStuff, #(ignoreStuff), v)
            end
            hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
        end

        if reset then return end
        if hit ~= nil then
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.CFrame.X, pos.Y, Bot.Character.HumanoidRootPart.CFrame.Z)
        else
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.CFrame.X, 300, Bot.Character.HumanoidRootPart.CFrame.Z)
            local rayDirection2 = Vector3.new(0, -1, 0)
            while hit == nil do
                if reset then return end
                rayOrigin = Bot.Character.HumanoidRootPart.Position + Vector3.new(0, -2, 0)
                ray = Ray.new(rayOrigin, rayDirection2)
                rain = game:GetService("Workspace"):FindFirstChild("Rain")
                if rain ~= nil then
                    ignoreStuff = {rain.RainDroplets, rain.RainFall}
                    if platform ~= nil then
                        table.insert(ignoreStuff, #(ignoreStuff), platform)
                    end
                    for k, v in pairs(Bot:GetDescendants()) do
                        table.insert(ignoreStuff, #(ignoreStuff), v)
                    end
                    hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
                else
                    local ignoreStuff = {}
                    if platform ~= nil then
                        table.insert(ignoreStuff, #(ignoreStuff), platform)
                    end
                    for k, v in pairs(Bot:GetDescendants()) do
                        table.insert(ignoreStuff, #(ignoreStuff), v)
                    end
                    hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
                end
                wait()
            end
        end
        if reset then return end
        if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
        Bot.Character.HumanoidRootPart.Velocity = Vector3.new()

        local UI = require(game:GetService("ReplicatedStorage").Module:WaitForChild("UI"));
        for i,v in pairs (UI.CircleAction.Specs) do
            if v.Name == "Hijack" then
                if v.Part.Parent.Name == "Camaro" or v.Part.Parent.Name == "Jeep" then
                    v.Duration = 0
                    v.Timed = true
                    v:Callback(v, true)
                end
            end
        end

        wait(0.5)
        if reset then return end

        local UI = require(game:GetService("ReplicatedStorage").Module:WaitForChild("UI"));
        for i,v in pairs (UI.CircleAction.Specs) do
            if v.Name == "Enter Driver" then
                if reset then return end
                if v.Part.Parent.Name == "Camaro" or v.Part.Parent.Name == "Jeep" then
                    local rayOrigin = v.Part.Position + Vector3.new(0, 10, 0)
                    local ray = Ray.new(rayOrigin, rayDirection1)
                    local rain = game:GetService("Workspace"):FindFirstChild("Rain")
                    if rain ~= nil then
                        local ignoreStuff = {rain.RainDroplets, rain.RainFall}
                        if platform ~= nil then
                            table.insert(ignoreStuff, #(ignoreStuff), platform)
                        end
                        for k, v in pairs(Bot:GetDescendants()) do
                            table.insert(ignoreStuff, #(ignoreStuff), v)
                        end
                        hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
                    else
                        local ignoreStuff = {}
                        if platform ~= nil then
                            table.insert(ignoreStuff, #(ignoreStuff), platform)
                        end
                        for k, v in pairs(Bot:GetDescendants()) do
                            table.insert(ignoreStuff, #(ignoreStuff), v)
                        end
                        hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
                    end
                    if hit == nil then
                        v:Callback(v, true)
                    end
                end
            end
        end

        wait(0.5)

        if reset then return end
        
        for i,v in pairs(game:GetService("Workspace").Vehicles:GetChildren()) do
            if pcall(function() return v.Seat.PlayerName end) then
                if v.Seat.PlayerName.Value == Bot.Name then
                    Car = v
                end
            end
        end

        if reset then return end
    end

    if reset then return end
    Car.Engine.CFrame = CFrame.new(Car.Engine.CFrame.X, 500, Car.Engine.CFrame.Z)

    if not Target.Character or not Target.Character:FindFirstChild("HumanoidRootPart") then return end
    local rayOrigin = Target.Character.HumanoidRootPart.Position + Vector3.new(0, 10, 0)
    local ray = Ray.new(rayOrigin, rayDirection1)
    local rain = game:GetService("Workspace"):FindFirstChild("Rain")
    if rain ~= nil then
        local ignoreStuff = {rain.RainDroplets, rain.RainFall}
        if platform ~= nil then
            table.insert(ignoreStuff, #(ignoreStuff), platform)
        end
        for k, v in pairs(Bot:GetDescendants()) do
            table.insert(ignoreStuff, #(ignoreStuff), v)
        end
        for k, v in pairs(Car:GetDescendants()) do
            table.insert(ignoreStuff, #(ignoreStuff), v)
        end
        hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
    else
        local ignoreStuff = {}
        if platform ~= nil then
            table.insert(ignoreStuff, #(ignoreStuff), platform)
        end
        for k, v in pairs(Bot:GetDescendants()) do
            table.insert(ignoreStuff, #(ignoreStuff), v)
        end
        for k, v in pairs(Car:GetDescendants()) do
            table.insert(ignoreStuff, #(ignoreStuff), v)
        end
        hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
    end
    if hit ~= nil then
        Arresting = false
        return
    end
    while Target.Character and Target.Character:FindFirstChild("HumanoidRootPart") and (Vector3.new(Car.Engine.Position.X, 500, Car.Engine.Position.Z) - Vector3.new(Target.Character.HumanoidRootPart.Position.X, 500, Target.Character.HumanoidRootPart.Position.Z)).magnitude > 11 do 
        if not Target.Character or not Target.Character:FindFirstChild("HumanoidRootPart") then return end
        if reset then return end
        move(Vector3.new(0, 0, 0), Target.Character.HumanoidRootPart)
        if not Target.Character or not Target.Character:FindFirstChild("HumanoidRootPart") then return end
        rayOrigin = Target.Character.HumanoidRootPart.Position + Vector3.new(0, 10, 0)
        ray = Ray.new(rayOrigin, rayDirection1)
        rain = game:GetService("Workspace"):FindFirstChild("Rain")
        if rain ~= nil then
            ignoreStuff = {rain.RainDroplets, rain.RainFall}
            if platform ~= nil then
                table.insert(ignoreStuff, #(ignoreStuff), platform)
            end
            for k, v in pairs(Bot:GetDescendants()) do
                table.insert(ignoreStuff, #(ignoreStuff), v)
            end
            for k, v in pairs(Car:GetDescendants()) do
                table.insert(ignoreStuff, #(ignoreStuff), v)
            end
            hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
        else
            local ignoreStuff = {}
            if platform ~= nil then
                table.insert(ignoreStuff, #(ignoreStuff), platform)
            end
            for k, v in pairs(Bot:GetDescendants()) do
                table.insert(ignoreStuff, #(ignoreStuff), v)
            end
            for k, v in pairs(Car:GetDescendants()) do
                table.insert(ignoreStuff, #(ignoreStuff), v)
            end
            hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
        end
        if hit ~= nil then
            Arresting = false
            return
        end
        if reset then return end
        if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
        wait()
    end

    if not Target.Character or not Target.Character:FindFirstChild("HumanoidRootPart") then return end
    if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
    if reset then return end

    Car.Engine.CFrame = CFrame.new(Car.Engine.CFrame.X, Target.Character.HumanoidRootPart.Position.Y, Car.Engine.CFrame.Z)


    Car.Engine.Velocity = Vector3.new()
end

function move(pos, object)

    local Car = nil
    for i,v in pairs(game:GetService("Workspace").Vehicles:GetChildren()) do
        if pcall(function() return v.Seat.PlayerName end) then
            if v.Seat.PlayerName.Value == Bot.Name then
                Car = v
            end
        end
    end

    if object == nil then
        if Car == nil then
            pos = Vector3.new(pos.X, 500, pos.Z)
            if reset then return end
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.Position.X, 500, Bot.Character.HumanoidRootPart.Position.Z)
            while Bot.Character:FindFirstChild("HumanoidRootPart") and (Vector3.new(Bot.Character.HumanoidRootPart.Position.X, 500, Bot.Character.HumanoidRootPart.Position.Z) - pos).magnitude > 5 do
                if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
                local amount = (Bot.Character.HumanoidRootPart.Position - pos).magnitude
                local velocity = (Bot.Character.HumanoidRootPart.Position - pos) / amount
                Bot.Character.HumanoidRootPart.Velocity = Vector3.new(velocity.X * -150, 0.1, velocity.Z * -150)
                Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.Position.X, 500, Bot.Character.HumanoidRootPart.Position.Z)
                wait()
                if reset then return end
            end
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Bot.Character.HumanoidRootPart.CFrame = CFrame.new(pos)
            Bot.Character.HumanoidRootPart.Velocity = Vector3.new()
        else
            pos = Vector3.new(pos.X, 500, pos.Z)
            if reset then return end
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Car.Engine.CFrame = CFrame.new(Car.Engine.Position.X, 500, Car.Engine.Position.Z)
            while (Vector3.new(Car.Engine.Position.X, 500, Car.Engine.Position.Z) - pos).magnitude > 10 do
                if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
                local amount = (Car.Engine.Position - pos).magnitude
                local velocity = (Car.Engine.Position - pos) / amount
                Car.Engine.Velocity = Vector3.new(velocity.X * -600, 0.1, velocity.Z * -600)
                Car.Engine.CFrame = CFrame.new(Car.Engine.Position.X, 500, Car.Engine.Position.Z)
                wait()
                if reset then return end
            end
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Car.Engine.CFrame = CFrame.new(pos)
            Car.Engine.Velocity = Vector3.new()
        end
    else
        if Car == nil then
            if reset then return end
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.Position.X, 500, Bot.Character.HumanoidRootPart.Position.Z)
            while Bot.Character:FindFirstChild("HumanoidRootPart") and (Vector3.new(Bot.Character.HumanoidRootPart.Position.X, 500, Bot.Character.HumanoidRootPart.Position.Z) - Vector3.new(object.Position.X, 500, object.Position.Z)).magnitude > 5 do
                if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
                local amount = (Bot.Character.HumanoidRootPart.Position - Vector3.new(object.Position.X, 500, object.Position.Z)).magnitude
                local velocity = (Bot.Character.HumanoidRootPart.Position - Vector3.new(object.Position.X, 500, object.Position.Z)) / amount
                Bot.Character.HumanoidRootPart.Velocity = Vector3.new(velocity.X * -150, 0.1, velocity.Z * -150)
                Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.Position.X, 500, Bot.Character.HumanoidRootPart.Position.Z)
                wait()
                if reset then return end
            end
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(object.Position.X, 500, object.Position.Z))
            Bot.Character.HumanoidRootPart.Velocity = Vector3.new()
        else
            if reset then return end
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Car.Engine.CFrame = CFrame.new(Car.Engine.Position.X, 500, Car.Engine.Position.Z)
            while (Vector3.new(Car.Engine.Position.X, 500, Car.Engine.Position.Z) - Vector3.new(object.Position.X, 500, object.Position.Z)).magnitude > 10 do
                if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
                local amount = (Car.Engine.Position - Vector3.new(object.Position.X, 500, object.Position.Z)).magnitude
                local velocity = (Car.Engine.Position - Vector3.new(object.Position.X, 500, object.Position.Z)) / amount
                Car.Engine.Velocity = Vector3.new(velocity.X * -600, 0.1, velocity.Z * -600)
                Car.Engine.CFrame = CFrame.new(Car.Engine.Position.X, 500, Car.Engine.Position.Z)
                wait()
                if reset then return end
            end
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Car.Engine.CFrame = CFrame.new(Vector3.new(object.Position.X, 500, object.Position.Z))
            Car.Engine.Velocity = Vector3.new()
        end
    end
end

function pathFind(pos)

    if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
    local PathFindingService = game:GetService("PathfindingService")
    local human = Bot.Character.Humanoid
    local torso = Bot.Character.HumanoidRootPart

    local path = PathFindingService:CreatePath()
    path:ComputeAsync(torso.Position, pos)
    if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
    local Waypoints = path:GetWaypoints()

    if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end

    for i, Waypoint in pairs(Waypoints) do
        pathFindMove(Waypoint.Position + Vector3.new(0, 2, 0))
        if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
    end
end

function pathFindMove(pos)

    if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
    while Bot.Character:FindFirstChild("HumanoidRootPart") and (Bot.Character.HumanoidRootPart.Position - pos).magnitude > 1 do
        if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
        local amount = (Bot.Character.HumanoidRootPart.Position - pos).magnitude
        local MoveDist = (Bot.Character.HumanoidRootPart.Position - pos) / amount
        for i = 1, amount, 1 do
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.Position - MoveDist)
            Bot.Character.HumanoidRootPart.Velocity = Vector3.new(0,1.005,0)
            wait()
            if reset then return end
        end
    end
    if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
    Bot.Character.HumanoidRootPart.CFrame = CFrame.new(pos)
end

function pathMove(pos)

    local Car = nil
    if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
    for i,v in pairs(game:GetService("Workspace").Vehicles:GetChildren()) do
        if pcall(function() return v.Seat.PlayerName end) then
            if v.Seat.PlayerName.Value == Bot.Name then
                Car = v
            end
        end
    end

    if Car == nil then
        if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
        while Bot.Character:FindFirstChild("HumanoidRootPart") and (Bot.Character.HumanoidRootPart.Position - pos).magnitude > 5 do
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            local amount = (Bot.Character.HumanoidRootPart.Position - pos).magnitude / (9 / 2)
            local MoveDist = (Bot.Character.HumanoidRootPart.Position - pos) / amount
            for i = 1, amount, 1 do
                if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
                Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.Position - MoveDist)
                Bot.Character.HumanoidRootPart.Velocity = Vector3.new(0,1.005,0)
                wait()
                if reset then return end
            end
        end
        if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
        Bot.Character.HumanoidRootPart.CFrame = CFrame.new(pos)
    else
        if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
        while (Car.Engine.Position - pos).magnitude > 5 do
            if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
            local amount = (Car.Engine.Position - pos).magnitude / (9 / 2)
            local MoveDist = (Car.Engine.Position - pos) / amount
            for i = 1, amount, 1 do
                if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
                Car.Engine.CFrame = CFrame.new(Car.Engine.Position - MoveDist)
                Car.Engine.Velocity = Vector3.new(0,1.005,0)
                wait()
                if reset then return end
            end
        end
        if not Bot.Character:FindFirstChild("HumanoidRootPart") then return end
        Car.Engine.CFrame = CFrame.new(pos)
    end
end

local Car

function arrestSomeone()
    local ClosestDistance = math.huge
    
    for k, v in pairs(game.Players:GetChildren()) do
        if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
            if v.Team.Name == "Criminal" then
                if not v.Folder:FindFirstChild("Cuffed") then
                    local rayOrigin = v.Character.HumanoidRootPart.Position + Vector3.new(0, 5, 0)
                    local ray = Ray.new(rayOrigin, rayDirection1)
                    local rain = game:GetService("Workspace"):FindFirstChild("Rain")
                    if rain ~= nil then
                        local ignoreStuff = {rain.RainDroplets, rain.RainFall}
                        if platform ~= nil then
                        table.insert(ignoreStuff, #(ignoreStuff), platform)
                        end
                        for k, v in pairs(Bot:GetDescendants()) do
                            table.insert(ignoreStuff, #(ignoreStuff), v)
                        end
                        hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
                    else
                        local ignoreStuff = {}
                        if platform ~= nil then
                            table.insert(ignoreStuff, #(ignoreStuff), platform)
                        end
                        for k, v in pairs(Bot:GetDescendants()) do
                            table.insert(ignoreStuff, #(ignoreStuff), v)
                        end
                        hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
                    end

                    if hit == nil then
                        if (v.Character.HumanoidRootPart.Position - Bot.Character.HumanoidRootPart.Position).magnitude < ClosestDistance then
                            ClosestDistance = (v.Character.HumanoidRootPart.Position - Bot.Character.HumanoidRootPart.Position).magnitude
                            Target = v
                        end
                    end
                end
            end
        end
    end

    if Target ~= nil then
        Arresting = true
        if not Target or not Target.Character or not Target.Character:FindFirstChild("HumanoidRootPart") then return end
        if (Vector3.new(Target.Character.HumanoidRootPart.Position.X, 500, Target.Character.HumanoidRootPart.Position.Z) - Vector3.new(Bot.Character.HumanoidRootPart.Position.X, 500, Bot.Character.HumanoidRootPart.Position.Z)).magnitude > 100 then
            BotMove()
        end

        if not Arresting then 
            Target = nil
            return 
        end

        wait(0.1)
        exitCar.OnJump()

        local ArrestTime = 0

        for k, v in pairs(game:GetService("Workspace").Vehicles:GetChildren()) do
            if pcall(function() return v.Seat.PlayerName end) then
                if v.Seat.PlayerName.Value == Target.Name then
                    Car = v
                    break
                end
                for k, l in pairs(v:GetChildren()) do
                    if l.Name == "Passanger" then
                        if l.PlayerName.Value == Target.Name then
                            Car = v
                            break
                        end
                    end
                end
            end
        end
        
        local rayOrigin = Target.Character.HumanoidRootPart.Position + Vector3.new(0, 10, 0)
        local ray = Ray.new(rayOrigin, rayDirection1)
        local rain = game:GetService("Workspace"):FindFirstChild("Rain")
        if rain ~= nil then
            local ignoreStuff = {rain.RainDroplets, rain.RainFall}
            if platform ~= nil then
                table.insert(ignoreStuff, #(ignoreStuff), platform)
            end
            for k, v in pairs(Bot:GetDescendants()) do
                table.insert(ignoreStuff, #(ignoreStuff), v)
            end
            hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
        else
            local ignoreStuff = {}
            if platform ~= nil then
                table.insert(ignoreStuff, #(ignoreStuff), platform)
            end
            for k, v in pairs(Bot:GetDescendants()) do
                table.insert(ignoreStuff, #(ignoreStuff), v)
            end
            hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
        end

        while Target and Target.Team.Name == "Criminal" and not Target.Folder:FindFirstChild("Cuffed") and hit == nil do
            if not Target or not Target.Character or not Target.Character:FindFirstChild("HumanoidRootPart") then break end
            if not Bot:FindFirstChild("Handcuffs") then
                local toolname = "Handcuffs"
                if Bot.Backpack:FindFirstChild(toolname) and Bot.Character:FindFirstChild(toolname) == nil then
                    local tool = Bot.Backpack:FindFirstChild(toolname)
                    Bot.Character.Humanoid:EquipTool(tool)
                end

                local args = {
                    [1] = true
                }
                
                Bot.Folder.Handcuffs.InventoryEquipRemote:FireServer(unpack(args))
            end
            if (Target.Character.HumanoidRootPart.Position - Bot.Character.HumanoidRootPart.Position).magnitude < 20 then
                Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Target.Character.HumanoidRootPart.Position + Vector3.new(0, 3, 0))
            else
                local MoveVector = (Target.Character.HumanoidRootPart.Position - Bot.Character.HumanoidRootPart.Position).Unit

                Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.Position + Vector3.new(MoveVector.X * 5, 0, MoveVector.Z * 5))
                Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(Bot.Character.HumanoidRootPart.Position.X, Target.Character.HumanoidRootPart.Position.Y + 10, Bot.Character.HumanoidRootPart.Position.Z))
            end
            if ArrestTime > 3.1 then break end

            rayOrigin = Target.Character.HumanoidRootPart.Position + Vector3.new(0, 10, 0)
            ray = Ray.new(rayOrigin, rayDirection1)
            if rain ~= nil then
                local ignoreStuff = {rain.RainDroplets, rain.RainFall}
                if platform ~= nil then
                    table.insert(ignoreStuff, #(ignoreStuff), platform)
                end
                for k, v in pairs(Bot:GetDescendants()) do
                    table.insert(ignoreStuff, #(ignoreStuff), v)
                end
                hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
            else
                local ignoreStuff = {}
                if platform ~= nil then
                    table.insert(ignoreStuff, #(ignoreStuff), platform)
                end
                for k, v in pairs(Bot:GetDescendants()) do
                    table.insert(ignoreStuff, #(ignoreStuff), v)
                end
                hit, pos = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(ray, ignoreStuff)
            end

            if ArrestTime > 0.3 and not ArrestingNow then
                ArrestingNow = true
                if Car then
                    network:FireServer(popHash, Car, "Shotgun")
                end
                if Target and Target.Character and Target.Character:FindFirstChild("HumanoidRootPart") then
                    network:FireServer(tazeHash, Target.Character.Humanoid, Target.Character.UpperTorso, Target.Character.HumanoidRootPart.Position)
                end
                network:FireServer(kickHash)
                if Target then
                    network:FireServer(arrestHash, Target.Name)
                end
            end
            ArrestTime += 0.03
            wait()
        end

        ArrestingNow = false
        Arresting = false
        Target = nil

        Bot.Character.Humanoid:UnequipTools()

        local args = {
            [1] = false
        }
                
        Bot.Folder.Handcuffs.InventoryEquipRemote:FireServer(unpack(args))

        wait(0.5)
    end
end

coroutine.wrap(function()
    while true do
        if ArrestingNow then
            if Target then
                network:FireServer(arrestHash, Target.Name)
            end
            if Target and Target.Character and Target.Character:FindFirstChild("HumanoidRootPart") then
                network:FireServer(tazeHash, Target.Character.Humanoid, Target.Character.UpperTorso, Target.Character.HumanoidRootPart.Position)
            end
            if Car then
                network:FireServer(kickHash, Car)
            end
        end
        wait(0.5)
    end
end)()

coroutine.wrap(function()
    while true do
        if ArrestingNow then
            if Car then
                network:FireServer(popHash, Car, "Shotgun")
            end
        end
        wait(0.1)
    end
end)()

local Chats = {
    "auto.projectbot.top is a pro server",
    "YOUR GETTING ARRESTED",
    "THERES NO ESCAPE",
    "script by pxsta",
    "flying camaro lol",
    "your bounty is mine",
    "'hacker'",
    "IM SENDING YOU BACK TO PRISON",
    "ProjectAuto #1",
    "only cool people are in dsc.gg/projectauto",
    "you got arrested? SKILL ISSUE",
}
_G.Toggled = false
coroutine.wrap(function()
    while _G.Toggled do
        local number = math.random(1, #Chats)
        for k, v in pairs(Chats) do
            if k == number then
                ChatRemote:FireServer(v, "All") 
                wait(3)
            end
        end
        wait()
    end
end)()

local platformed = false
coroutine.wrap(function()
    while true do
        if toggled then
            if not Arresting then
                if Bot.Character then
                    if Bot.Character:FindFirstChild("HumanoidRootPart") then
                        if not platformed then
                            platformed = true
                            local Car
                            for k, v in pairs(game:GetService("Workspace").Vehicles:GetChildren()) do
                                if pcall(function() return v.Seat.PlayerName end) then
                                    if v.Seat.PlayerName.Value == Bot.Name then
                                        Car = v
                                    end
                                end
                            end
                            if platform ~= nil then
                                platform:Destroy()
                            end
                            platform = Instance.new("Part")
                            platform.Parent = game:GetService("Workspace")
                            platform.Anchored = true
                            platform.Size = Vector3.new(30, 0.5, 30)
                            if Car == nil then
                                Bot.Character.HumanoidRootPart.CFrame = CFrame.new(Bot.Character.HumanoidRootPart.CFrame.X, 5000, Bot.Character.HumanoidRootPart.CFrame.Z)
                                Bot.Character.HumanoidRootPart.Velocity = Vector3.new(0,1.005,0)
                                platform.Position = Bot.Character.HumanoidRootPart.Position + Vector3.new(0, -5, 0)
                            else
                                Car.Engine.CFrame = CFrame.new(Car.Engine.CFrame.X, 5000, Car.Engine.CFrame.Z)
                                Car.Engine.Velocity = Vector3.new(0,1.005,0)
                                platform.Position = Car.Engine.Position + Vector3.new(0, -5, 0)
                            end
                        else
                            arrestSomeone()
                            if Bot.Character.HumanoidRootPart.Position.Y < 3000 then
                                platformed = false
                            end
                        end
                    end
                else
                    if platform ~= nil then
                        platform:Destroy()
                    end
                    platformed = false
                end
            else
                if platform ~= nil then
                    platform:Destroy()
                end
                platformed = false
            end
        else
            if platform ~= nil then
                platform:Destroy()
            end
            platformed = false
        end
        wait(0.1)
    end
end)()

require(game:GetService("ReplicatedStorage").Game.Paraglide).IsFlying = function()
	return tostring(getfenv(2).script) == "Falling"
end

if game.Players.localPlayer.PlayerScripts.WorldUnload:FindFirstChild("WorldUnload") then
    game.Players.localPlayer.PlayerScripts.WorldUnload.WorldUnload:Destroy()
end
if game.Players.localPlayer.PlayerScripts.WorldUnload:FindFirstChild("HumanoidUnload") then
    game.Players.localPlayer.PlayerScripts.HumanoidUnload.HumanoidUnload:Destroy()
end
